{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":["file:///Users/monz/Code/queue/frontend/node_modules/sshpk/lib/algs.js"],"sourcesContent":["// Copyright 2015 Joyent, Inc.\n\nvar Buffer = require('safer-buffer').Buffer;\n\nvar algInfo = {\n\t'dsa': {\n\t\tparts: ['p', 'q', 'g', 'y'],\n\t\tsizePart: 'p'\n\t},\n\t'rsa': {\n\t\tparts: ['e', 'n'],\n\t\tsizePart: 'n'\n\t},\n\t'ecdsa': {\n\t\tparts: ['curve', 'Q'],\n\t\tsizePart: 'Q'\n\t},\n\t'ed25519': {\n\t\tparts: ['A'],\n\t\tsizePart: 'A'\n\t}\n};\nalgInfo['curve25519'] = algInfo['ed25519'];\n\nvar algPrivInfo = {\n\t'dsa': {\n\t\tparts: ['p', 'q', 'g', 'y', 'x']\n\t},\n\t'rsa': {\n\t\tparts: ['n', 'e', 'd', 'iqmp', 'p', 'q']\n\t},\n\t'ecdsa': {\n\t\tparts: ['curve', 'Q', 'd']\n\t},\n\t'ed25519': {\n\t\tparts: ['A', 'k']\n\t}\n};\nalgPrivInfo['curve25519'] = algPrivInfo['ed25519'];\n\nvar hashAlgs = {\n\t'md5': true,\n\t'sha1': true,\n\t'sha256': true,\n\t'sha384': true,\n\t'sha512': true\n};\n\n/*\n * Taken from\n * http://csrc.nist.gov/groups/ST/toolkit/documents/dss/NISTReCur.pdf\n */\nvar curves = {\n\t'nistp256': {\n\t\tsize: 256,\n\t\tpkcs8oid: '1.2.840.10045.3.1.7',\n\t\tp: Buffer.from(('00' +\n\t\t    'ffffffff 00000001 00000000 00000000' +\n\t\t    '00000000 ffffffff ffffffff ffffffff').\n\t\t    replace(/ /g, ''), 'hex'),\n\t\ta: Buffer.from(('00' +\n\t\t    'FFFFFFFF 00000001 00000000 00000000' +\n\t\t    '00000000 FFFFFFFF FFFFFFFF FFFFFFFC').\n\t\t    replace(/ /g, ''), 'hex'),\n\t\tb: Buffer.from((\n\t\t    '5ac635d8 aa3a93e7 b3ebbd55 769886bc' +\n\t\t    '651d06b0 cc53b0f6 3bce3c3e 27d2604b').\n\t\t    replace(/ /g, ''), 'hex'),\n\t\ts: Buffer.from(('00' +\n\t\t    'c49d3608 86e70493 6a6678e1 139d26b7' +\n\t\t    '819f7e90').\n\t\t    replace(/ /g, ''), 'hex'),\n\t\tn: Buffer.from(('00' +\n\t\t    'ffffffff 00000000 ffffffff ffffffff' +\n\t\t    'bce6faad a7179e84 f3b9cac2 fc632551').\n\t\t    replace(/ /g, ''), 'hex'),\n\t\tG: Buffer.from(('04' +\n\t\t    '6b17d1f2 e12c4247 f8bce6e5 63a440f2' +\n\t\t    '77037d81 2deb33a0 f4a13945 d898c296' +\n\t\t    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16' +\n\t\t    '2bce3357 6b315ece cbb64068 37bf51f5').\n\t\t    replace(/ /g, ''), 'hex')\n\t},\n\t'nistp384': {\n\t\tsize: 384,\n\t\tpkcs8oid: '1.3.132.0.34',\n\t\tp: Buffer.from(('00' +\n\t\t    'ffffffff ffffffff ffffffff ffffffff' +\n\t\t    'ffffffff ffffffff ffffffff fffffffe' +\n\t\t    'ffffffff 00000000 00000000 ffffffff').\n\t\t    replace(/ /g, ''), 'hex'),\n\t\ta: Buffer.from(('00' +\n\t\t    'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF' +\n\t\t    'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE' +\n\t\t    'FFFFFFFF 00000000 00000000 FFFFFFFC').\n\t\t    replace(/ /g, ''), 'hex'),\n\t\tb: Buffer.from((\n\t\t    'b3312fa7 e23ee7e4 988e056b e3f82d19' +\n\t\t    '181d9c6e fe814112 0314088f 5013875a' +\n\t\t    'c656398d 8a2ed19d 2a85c8ed d3ec2aef').\n\t\t    replace(/ /g, ''), 'hex'),\n\t\ts: Buffer.from(('00' +\n\t\t    'a335926a a319a27a 1d00896a 6773a482' +\n\t\t    '7acdac73').\n\t\t    replace(/ /g, ''), 'hex'),\n\t\tn: Buffer.from(('00' +\n\t\t    'ffffffff ffffffff ffffffff ffffffff' +\n\t\t    'ffffffff ffffffff c7634d81 f4372ddf' +\n\t\t    '581a0db2 48b0a77a ecec196a ccc52973').\n\t\t    replace(/ /g, ''), 'hex'),\n\t\tG: Buffer.from(('04' +\n\t\t    'aa87ca22 be8b0537 8eb1c71e f320ad74' +\n\t\t    '6e1d3b62 8ba79b98 59f741e0 82542a38' +\n\t\t    '5502f25d bf55296c 3a545e38 72760ab7' +\n\t\t    '3617de4a 96262c6f 5d9e98bf 9292dc29' +\n\t\t    'f8f41dbd 289a147c e9da3113 b5f0b8c0' +\n\t\t    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f').\n\t\t    replace(/ /g, ''), 'hex')\n\t},\n\t'nistp521': {\n\t\tsize: 521,\n\t\tpkcs8oid: '1.3.132.0.35',\n\t\tp: Buffer.from((\n\t\t    '01ffffff ffffffff ffffffff ffffffff' +\n\t\t    'ffffffff ffffffff ffffffff ffffffff' +\n\t\t    'ffffffff ffffffff ffffffff ffffffff' +\n\t\t    'ffffffff ffffffff ffffffff ffffffff' +\n\t\t    'ffff').replace(/ /g, ''), 'hex'),\n\t\ta: Buffer.from(('01FF' +\n\t\t    'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF' +\n\t\t    'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF' +\n\t\t    'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF' +\n\t\t    'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFC').\n\t\t    replace(/ /g, ''), 'hex'),\n\t\tb: Buffer.from(('51' +\n\t\t    '953eb961 8e1c9a1f 929a21a0 b68540ee' +\n\t\t    'a2da725b 99b315f3 b8b48991 8ef109e1' +\n\t\t    '56193951 ec7e937b 1652c0bd 3bb1bf07' +\n\t\t    '3573df88 3d2c34f1 ef451fd4 6b503f00').\n\t\t    replace(/ /g, ''), 'hex'),\n\t\ts: Buffer.from(('00' +\n\t\t    'd09e8800 291cb853 96cc6717 393284aa' +\n\t\t    'a0da64ba').replace(/ /g, ''), 'hex'),\n\t\tn: Buffer.from(('01ff' +\n\t\t    'ffffffff ffffffff ffffffff ffffffff' +\n\t\t    'ffffffff ffffffff ffffffff fffffffa' +\n\t\t    '51868783 bf2f966b 7fcc0148 f709a5d0' +\n\t\t    '3bb5c9b8 899c47ae bb6fb71e 91386409').\n\t\t    replace(/ /g, ''), 'hex'),\n\t\tG: Buffer.from(('04' +\n\t\t    '00c6 858e06b7 0404e9cd 9e3ecb66 2395b442' +\n\t\t         '9c648139 053fb521 f828af60 6b4d3dba' +\n\t\t         'a14b5e77 efe75928 fe1dc127 a2ffa8de' +\n\t\t         '3348b3c1 856a429b f97e7e31 c2e5bd66' +\n\t\t    '0118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9' +\n\t\t         '98f54449 579b4468 17afbd17 273e662c' +\n\t\t         '97ee7299 5ef42640 c550b901 3fad0761' +\n\t\t         '353c7086 a272c240 88be9476 9fd16650').\n\t\t    replace(/ /g, ''), 'hex')\n\t}\n};\n\nmodule.exports = {\n\tinfo: algInfo,\n\tprivInfo: algPrivInfo,\n\thashAlgs: hashAlgs,\n\tcurves: curves\n};\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 123, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 128, "column": 0}, "map": {"version":3,"sources":["file:///Users/monz/Code/queue/frontend/node_modules/sshpk/lib/errors.js"],"sourcesContent":["// Copyright 2015 Joyent, Inc.\n\nvar assert = require('assert-plus');\nvar util = require('util');\n\nfunction FingerprintFormatError(fp, format) {\n\tif (Error.captureStackTrace)\n\t\tError.captureStackTrace(this, FingerprintFormatError);\n\tthis.name = 'FingerprintFormatError';\n\tthis.fingerprint = fp;\n\tthis.format = format;\n\tthis.message = 'Fingerprint format is not supported, or is invalid: ';\n\tif (fp !== undefined)\n\t\tthis.message += ' fingerprint = ' + fp;\n\tif (format !== undefined)\n\t\tthis.message += ' format = ' + format;\n}\nutil.inherits(FingerprintFormatError, Error);\n\nfunction InvalidAlgorithmError(alg) {\n\tif (Error.captureStackTrace)\n\t\tError.captureStackTrace(this, InvalidAlgorithmError);\n\tthis.name = 'InvalidAlgorithmError';\n\tthis.algorithm = alg;\n\tthis.message = 'Algorithm \"' + alg + '\" is not supported';\n}\nutil.inherits(InvalidAlgorithmError, Error);\n\nfunction KeyParseError(name, format, innerErr) {\n\tif (Error.captureStackTrace)\n\t\tError.captureStackTrace(this, KeyParseError);\n\tthis.name = 'KeyParseError';\n\tthis.format = format;\n\tthis.keyName = name;\n\tthis.innerErr = innerErr;\n\tthis.message = 'Failed to parse ' + name + ' as a valid ' + format +\n\t    ' format key: ' + innerErr.message;\n}\nutil.inherits(KeyParseError, Error);\n\nfunction SignatureParseError(type, format, innerErr) {\n\tif (Error.captureStackTrace)\n\t\tError.captureStackTrace(this, SignatureParseError);\n\tthis.name = 'SignatureParseError';\n\tthis.type = type;\n\tthis.format = format;\n\tthis.innerErr = innerErr;\n\tthis.message = 'Failed to parse the given data as a ' + type +\n\t    ' signature in ' + format + ' format: ' + innerErr.message;\n}\nutil.inherits(SignatureParseError, Error);\n\nfunction CertificateParseError(name, format, innerErr) {\n\tif (Error.captureStackTrace)\n\t\tError.captureStackTrace(this, CertificateParseError);\n\tthis.name = 'CertificateParseError';\n\tthis.format = format;\n\tthis.certName = name;\n\tthis.innerErr = innerErr;\n\tthis.message = 'Failed to parse ' + name + ' as a valid ' + format +\n\t    ' format certificate: ' + innerErr.message;\n}\nutil.inherits(CertificateParseError, Error);\n\nfunction KeyEncryptedError(name, format) {\n\tif (Error.captureStackTrace)\n\t\tError.captureStackTrace(this, KeyEncryptedError);\n\tthis.name = 'KeyEncryptedError';\n\tthis.format = format;\n\tthis.keyName = name;\n\tthis.message = 'The ' + format + ' format key ' + name + ' is ' +\n\t    'encrypted (password-protected), and no passphrase was ' +\n\t    'provided in `options`';\n}\nutil.inherits(KeyEncryptedError, Error);\n\nmodule.exports = {\n\tFingerprintFormatError: FingerprintFormatError,\n\tInvalidAlgorithmError: InvalidAlgorithmError,\n\tKeyParseError: KeyParseError,\n\tSignatureParseError: SignatureParseError,\n\tKeyEncryptedError: KeyEncryptedError,\n\tCertificateParseError: CertificateParseError\n};\n"],"names":[],"mappings":"AAAA,8BAA8B;AAE9B,IAAI;AACJ,IAAI;AAEJ,SAAS,uBAAuB,EAAE,EAAE,MAAM;IACzC,IAAI,MAAM,iBAAiB,EAC1B,MAAM,iBAAiB,CAAC,IAAI,EAAE;IAC/B,IAAI,CAAC,IAAI,GAAG;IACZ,IAAI,CAAC,WAAW,GAAG;IACnB,IAAI,CAAC,MAAM,GAAG;IACd,IAAI,CAAC,OAAO,GAAG;IACf,IAAI,OAAO,WACV,IAAI,CAAC,OAAO,IAAI,oBAAoB;IACrC,IAAI,WAAW,WACd,IAAI,CAAC,OAAO,IAAI,eAAe;AACjC;AACA,KAAK,QAAQ,CAAC,wBAAwB;AAEtC,SAAS,sBAAsB,GAAG;IACjC,IAAI,MAAM,iBAAiB,EAC1B,MAAM,iBAAiB,CAAC,IAAI,EAAE;IAC/B,IAAI,CAAC,IAAI,GAAG;IACZ,IAAI,CAAC,SAAS,GAAG;IACjB,IAAI,CAAC,OAAO,GAAG,gBAAgB,MAAM;AACtC;AACA,KAAK,QAAQ,CAAC,uBAAuB;AAErC,SAAS,cAAc,IAAI,EAAE,MAAM,EAAE,QAAQ;IAC5C,IAAI,MAAM,iBAAiB,EAC1B,MAAM,iBAAiB,CAAC,IAAI,EAAE;IAC/B,IAAI,CAAC,IAAI,GAAG;IACZ,IAAI,CAAC,MAAM,GAAG;IACd,IAAI,CAAC,OAAO,GAAG;IACf,IAAI,CAAC,QAAQ,GAAG;IAChB,IAAI,CAAC,OAAO,GAAG,qBAAqB,OAAO,iBAAiB,SACxD,kBAAkB,SAAS,OAAO;AACvC;AACA,KAAK,QAAQ,CAAC,eAAe;AAE7B,SAAS,oBAAoB,IAAI,EAAE,MAAM,EAAE,QAAQ;IAClD,IAAI,MAAM,iBAAiB,EAC1B,MAAM,iBAAiB,CAAC,IAAI,EAAE;IAC/B,IAAI,CAAC,IAAI,GAAG;IACZ,IAAI,CAAC,IAAI,GAAG;IACZ,IAAI,CAAC,MAAM,GAAG;IACd,IAAI,CAAC,QAAQ,GAAG;IAChB,IAAI,CAAC,OAAO,GAAG,yCAAyC,OACpD,mBAAmB,SAAS,cAAc,SAAS,OAAO;AAC/D;AACA,KAAK,QAAQ,CAAC,qBAAqB;AAEnC,SAAS,sBAAsB,IAAI,EAAE,MAAM,EAAE,QAAQ;IACpD,IAAI,MAAM,iBAAiB,EAC1B,MAAM,iBAAiB,CAAC,IAAI,EAAE;IAC/B,IAAI,CAAC,IAAI,GAAG;IACZ,IAAI,CAAC,MAAM,GAAG;IACd,IAAI,CAAC,QAAQ,GAAG;IAChB,IAAI,CAAC,QAAQ,GAAG;IAChB,IAAI,CAAC,OAAO,GAAG,qBAAqB,OAAO,iBAAiB,SACxD,0BAA0B,SAAS,OAAO;AAC/C;AACA,KAAK,QAAQ,CAAC,uBAAuB;AAErC,SAAS,kBAAkB,IAAI,EAAE,MAAM;IACtC,IAAI,MAAM,iBAAiB,EAC1B,MAAM,iBAAiB,CAAC,IAAI,EAAE;IAC/B,IAAI,CAAC,IAAI,GAAG;IACZ,IAAI,CAAC,MAAM,GAAG;IACd,IAAI,CAAC,OAAO,GAAG;IACf,IAAI,CAAC,OAAO,GAAG,SAAS,SAAS,iBAAiB,OAAO,SACrD,2DACA;AACL;AACA,KAAK,QAAQ,CAAC,mBAAmB;AAEjC,OAAO,OAAO,GAAG;IAChB,wBAAwB;IACxB,uBAAuB;IACvB,eAAe;IACf,qBAAqB;IACrB,mBAAmB;IACnB,uBAAuB;AACxB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 191, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 196, "column": 0}, "map": {"version":3,"sources":["file:///Users/monz/Code/queue/frontend/node_modules/sshpk/lib/utils.js"],"sourcesContent":["// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n\tbufferSplit: bufferSplit,\n\taddRSAMissing: addRSAMissing,\n\tcalculateDSAPublic: calculateDSAPublic,\n\tcalculateED25519Public: calculateED25519Public,\n\tcalculateX25519Public: calculateX25519Public,\n\tmpNormalize: mpNormalize,\n\tmpDenormalize: mpDenormalize,\n\tecNormalize: ecNormalize,\n\tcountZeros: countZeros,\n\tassertCompatible: assertCompatible,\n\tisCompatible: isCompatible,\n\topensslKeyDeriv: opensslKeyDeriv,\n\topensshCipherInfo: opensshCipherInfo,\n\tpublicFromPrivateECDSA: publicFromPrivateECDSA,\n\tzeroPadToLength: zeroPadToLength,\n\twriteBitString: writeBitString,\n\treadBitString: readBitString,\n\tpbkdf2: pbkdf2\n};\n\nvar assert = require('assert-plus');\nvar Buffer = require('safer-buffer').Buffer;\nvar PrivateKey = require('./private-key');\nvar Key = require('./key');\nvar crypto = require('crypto');\nvar algs = require('./algs');\nvar asn1 = require('asn1');\n\nvar ec = require('ecc-jsbn/lib/ec');\nvar jsbn = require('jsbn').BigInteger;\nvar nacl = require('tweetnacl');\n\nvar MAX_CLASS_DEPTH = 3;\n\nfunction isCompatible(obj, klass, needVer) {\n\tif (obj === null || typeof (obj) !== 'object')\n\t\treturn (false);\n\tif (needVer === undefined)\n\t\tneedVer = klass.prototype._sshpkApiVersion;\n\tif (obj instanceof klass &&\n\t    klass.prototype._sshpkApiVersion[0] == needVer[0])\n\t\treturn (true);\n\tvar proto = Object.getPrototypeOf(obj);\n\tvar depth = 0;\n\twhile (proto.constructor.name !== klass.name) {\n\t\tproto = Object.getPrototypeOf(proto);\n\t\tif (!proto || ++depth > MAX_CLASS_DEPTH)\n\t\t\treturn (false);\n\t}\n\tif (proto.constructor.name !== klass.name)\n\t\treturn (false);\n\tvar ver = proto._sshpkApiVersion;\n\tif (ver === undefined)\n\t\tver = klass._oldVersionDetect(obj);\n\tif (ver[0] != needVer[0] || ver[1] < needVer[1])\n\t\treturn (false);\n\treturn (true);\n}\n\nfunction assertCompatible(obj, klass, needVer, name) {\n\tif (name === undefined)\n\t\tname = 'object';\n\tassert.ok(obj, name + ' must not be null');\n\tassert.object(obj, name + ' must be an object');\n\tif (needVer === undefined)\n\t\tneedVer = klass.prototype._sshpkApiVersion;\n\tif (obj instanceof klass &&\n\t    klass.prototype._sshpkApiVersion[0] == needVer[0])\n\t\treturn;\n\tvar proto = Object.getPrototypeOf(obj);\n\tvar depth = 0;\n\twhile (proto.constructor.name !== klass.name) {\n\t\tproto = Object.getPrototypeOf(proto);\n\t\tassert.ok(proto && ++depth <= MAX_CLASS_DEPTH,\n\t\t    name + ' must be a ' + klass.name + ' instance');\n\t}\n\tassert.strictEqual(proto.constructor.name, klass.name,\n\t    name + ' must be a ' + klass.name + ' instance');\n\tvar ver = proto._sshpkApiVersion;\n\tif (ver === undefined)\n\t\tver = klass._oldVersionDetect(obj);\n\tassert.ok(ver[0] == needVer[0] && ver[1] >= needVer[1],\n\t    name + ' must be compatible with ' + klass.name + ' klass ' +\n\t    'version ' + needVer[0] + '.' + needVer[1]);\n}\n\nvar CIPHER_LEN = {\n\t'des-ede3-cbc': { key: 24, iv: 8 },\n\t'aes-128-cbc': { key: 16, iv: 16 },\n\t'aes-256-cbc': { key: 32, iv: 16 }\n};\nvar PKCS5_SALT_LEN = 8;\n\nfunction opensslKeyDeriv(cipher, salt, passphrase, count) {\n\tassert.buffer(salt, 'salt');\n\tassert.buffer(passphrase, 'passphrase');\n\tassert.number(count, 'iteration count');\n\n\tvar clen = CIPHER_LEN[cipher];\n\tassert.object(clen, 'supported cipher');\n\n\tsalt = salt.slice(0, PKCS5_SALT_LEN);\n\n\tvar D, D_prev, bufs;\n\tvar material = Buffer.alloc(0);\n\twhile (material.length < clen.key + clen.iv) {\n\t\tbufs = [];\n\t\tif (D_prev)\n\t\t\tbufs.push(D_prev);\n\t\tbufs.push(passphrase);\n\t\tbufs.push(salt);\n\t\tD = Buffer.concat(bufs);\n\t\tfor (var j = 0; j < count; ++j)\n\t\t\tD = crypto.createHash('md5').update(D).digest();\n\t\tmaterial = Buffer.concat([material, D]);\n\t\tD_prev = D;\n\t}\n\n\treturn ({\n\t    key: material.slice(0, clen.key),\n\t    iv: material.slice(clen.key, clen.key + clen.iv)\n\t});\n}\n\n/* See: RFC2898 */\nfunction pbkdf2(hashAlg, salt, iterations, size, passphrase) {\n\tvar hkey = Buffer.alloc(salt.length + 4);\n\tsalt.copy(hkey);\n\n\tvar gen = 0, ts = [];\n\tvar i = 1;\n\twhile (gen < size) {\n\t\tvar t = T(i++);\n\t\tgen += t.length;\n\t\tts.push(t);\n\t}\n\treturn (Buffer.concat(ts).slice(0, size));\n\n\tfunction T(I) {\n\t\thkey.writeUInt32BE(I, hkey.length - 4);\n\n\t\tvar hmac = crypto.createHmac(hashAlg, passphrase);\n\t\thmac.update(hkey);\n\n\t\tvar Ti = hmac.digest();\n\t\tvar Uc = Ti;\n\t\tvar c = 1;\n\t\twhile (c++ < iterations) {\n\t\t\thmac = crypto.createHmac(hashAlg, passphrase);\n\t\t\thmac.update(Uc);\n\t\t\tUc = hmac.digest();\n\t\t\tfor (var x = 0; x < Ti.length; ++x)\n\t\t\t\tTi[x] ^= Uc[x];\n\t\t}\n\t\treturn (Ti);\n\t}\n}\n\n/* Count leading zero bits on a buffer */\nfunction countZeros(buf) {\n\tvar o = 0, obit = 8;\n\twhile (o < buf.length) {\n\t\tvar mask = (1 << obit);\n\t\tif ((buf[o] & mask) === mask)\n\t\t\tbreak;\n\t\tobit--;\n\t\tif (obit < 0) {\n\t\t\to++;\n\t\t\tobit = 8;\n\t\t}\n\t}\n\treturn (o*8 + (8 - obit) - 1);\n}\n\nfunction bufferSplit(buf, chr) {\n\tassert.buffer(buf);\n\tassert.string(chr);\n\n\tvar parts = [];\n\tvar lastPart = 0;\n\tvar matches = 0;\n\tfor (var i = 0; i < buf.length; ++i) {\n\t\tif (buf[i] === chr.charCodeAt(matches))\n\t\t\t++matches;\n\t\telse if (buf[i] === chr.charCodeAt(0))\n\t\t\tmatches = 1;\n\t\telse\n\t\t\tmatches = 0;\n\n\t\tif (matches >= chr.length) {\n\t\t\tvar newPart = i + 1;\n\t\t\tparts.push(buf.slice(lastPart, newPart - matches));\n\t\t\tlastPart = newPart;\n\t\t\tmatches = 0;\n\t\t}\n\t}\n\tif (lastPart <= buf.length)\n\t\tparts.push(buf.slice(lastPart, buf.length));\n\n\treturn (parts);\n}\n\nfunction ecNormalize(buf, addZero) {\n\tassert.buffer(buf);\n\tif (buf[0] === 0x00 && buf[1] === 0x04) {\n\t\tif (addZero)\n\t\t\treturn (buf);\n\t\treturn (buf.slice(1));\n\t} else if (buf[0] === 0x04) {\n\t\tif (!addZero)\n\t\t\treturn (buf);\n\t} else {\n\t\twhile (buf[0] === 0x00)\n\t\t\tbuf = buf.slice(1);\n\t\tif (buf[0] === 0x02 || buf[0] === 0x03)\n\t\t\tthrow (new Error('Compressed elliptic curve points ' +\n\t\t\t    'are not supported'));\n\t\tif (buf[0] !== 0x04)\n\t\t\tthrow (new Error('Not a valid elliptic curve point'));\n\t\tif (!addZero)\n\t\t\treturn (buf);\n\t}\n\tvar b = Buffer.alloc(buf.length + 1);\n\tb[0] = 0x0;\n\tbuf.copy(b, 1);\n\treturn (b);\n}\n\nfunction readBitString(der, tag) {\n\tif (tag === undefined)\n\t\ttag = asn1.Ber.BitString;\n\tvar buf = der.readString(tag, true);\n\tassert.strictEqual(buf[0], 0x00, 'bit strings with unused bits are ' +\n\t    'not supported (0x' + buf[0].toString(16) + ')');\n\treturn (buf.slice(1));\n}\n\nfunction writeBitString(der, buf, tag) {\n\tif (tag === undefined)\n\t\ttag = asn1.Ber.BitString;\n\tvar b = Buffer.alloc(buf.length + 1);\n\tb[0] = 0x00;\n\tbuf.copy(b, 1);\n\tder.writeBuffer(b, tag);\n}\n\nfunction mpNormalize(buf) {\n\tassert.buffer(buf);\n\twhile (buf.length > 1 && buf[0] === 0x00 && (buf[1] & 0x80) === 0x00)\n\t\tbuf = buf.slice(1);\n\tif ((buf[0] & 0x80) === 0x80) {\n\t\tvar b = Buffer.alloc(buf.length + 1);\n\t\tb[0] = 0x00;\n\t\tbuf.copy(b, 1);\n\t\tbuf = b;\n\t}\n\treturn (buf);\n}\n\nfunction mpDenormalize(buf) {\n\tassert.buffer(buf);\n\twhile (buf.length > 1 && buf[0] === 0x00)\n\t\tbuf = buf.slice(1);\n\treturn (buf);\n}\n\nfunction zeroPadToLength(buf, len) {\n\tassert.buffer(buf);\n\tassert.number(len);\n\twhile (buf.length > len) {\n\t\tassert.equal(buf[0], 0x00);\n\t\tbuf = buf.slice(1);\n\t}\n\twhile (buf.length < len) {\n\t\tvar b = Buffer.alloc(buf.length + 1);\n\t\tb[0] = 0x00;\n\t\tbuf.copy(b, 1);\n\t\tbuf = b;\n\t}\n\treturn (buf);\n}\n\nfunction bigintToMpBuf(bigint) {\n\tvar buf = Buffer.from(bigint.toByteArray());\n\tbuf = mpNormalize(buf);\n\treturn (buf);\n}\n\nfunction calculateDSAPublic(g, p, x) {\n\tassert.buffer(g);\n\tassert.buffer(p);\n\tassert.buffer(x);\n\tg = new jsbn(g);\n\tp = new jsbn(p);\n\tx = new jsbn(x);\n\tvar y = g.modPow(x, p);\n\tvar ybuf = bigintToMpBuf(y);\n\treturn (ybuf);\n}\n\nfunction calculateED25519Public(k) {\n\tassert.buffer(k);\n\n\tvar kp = nacl.sign.keyPair.fromSeed(new Uint8Array(k));\n\treturn (Buffer.from(kp.publicKey));\n}\n\nfunction calculateX25519Public(k) {\n\tassert.buffer(k);\n\n\tvar kp = nacl.box.keyPair.fromSeed(new Uint8Array(k));\n\treturn (Buffer.from(kp.publicKey));\n}\n\nfunction addRSAMissing(key) {\n\tassert.object(key);\n\tassertCompatible(key, PrivateKey, [1, 1]);\n\n\tvar d = new jsbn(key.part.d.data);\n\tvar buf;\n\n\tif (!key.part.dmodp) {\n\t\tvar p = new jsbn(key.part.p.data);\n\t\tvar dmodp = d.mod(p.subtract(1));\n\n\t\tbuf = bigintToMpBuf(dmodp);\n\t\tkey.part.dmodp = {name: 'dmodp', data: buf};\n\t\tkey.parts.push(key.part.dmodp);\n\t}\n\tif (!key.part.dmodq) {\n\t\tvar q = new jsbn(key.part.q.data);\n\t\tvar dmodq = d.mod(q.subtract(1));\n\n\t\tbuf = bigintToMpBuf(dmodq);\n\t\tkey.part.dmodq = {name: 'dmodq', data: buf};\n\t\tkey.parts.push(key.part.dmodq);\n\t}\n}\n\nfunction publicFromPrivateECDSA(curveName, priv) {\n\tassert.string(curveName, 'curveName');\n\tassert.buffer(priv);\n\tvar params = algs.curves[curveName];\n\tvar p = new jsbn(params.p);\n\tvar a = new jsbn(params.a);\n\tvar b = new jsbn(params.b);\n\tvar curve = new ec.ECCurveFp(p, a, b);\n\tvar G = curve.decodePointHex(params.G.toString('hex'));\n\n\tvar d = new jsbn(mpNormalize(priv));\n\tvar pub = G.multiply(d);\n\tpub = Buffer.from(curve.encodePointHex(pub), 'hex');\n\n\tvar parts = [];\n\tparts.push({name: 'curve', data: Buffer.from(curveName)});\n\tparts.push({name: 'Q', data: pub});\n\n\tvar key = new Key({type: 'ecdsa', curve: curve, parts: parts});\n\treturn (key);\n}\n\nfunction opensshCipherInfo(cipher) {\n\tvar inf = {};\n\tswitch (cipher) {\n\tcase '3des-cbc':\n\t\tinf.keySize = 24;\n\t\tinf.blockSize = 8;\n\t\tinf.opensslName = 'des-ede3-cbc';\n\t\tbreak;\n\tcase 'blowfish-cbc':\n\t\tinf.keySize = 16;\n\t\tinf.blockSize = 8;\n\t\tinf.opensslName = 'bf-cbc';\n\t\tbreak;\n\tcase 'aes128-cbc':\n\tcase 'aes128-ctr':\n\tcase 'aes128-gcm@openssh.com':\n\t\tinf.keySize = 16;\n\t\tinf.blockSize = 16;\n\t\tinf.opensslName = 'aes-128-' + cipher.slice(7, 10);\n\t\tbreak;\n\tcase 'aes192-cbc':\n\tcase 'aes192-ctr':\n\tcase 'aes192-gcm@openssh.com':\n\t\tinf.keySize = 24;\n\t\tinf.blockSize = 16;\n\t\tinf.opensslName = 'aes-192-' + cipher.slice(7, 10);\n\t\tbreak;\n\tcase 'aes256-cbc':\n\tcase 'aes256-ctr':\n\tcase 'aes256-gcm@openssh.com':\n\t\tinf.keySize = 32;\n\t\tinf.blockSize = 16;\n\t\tinf.opensslName = 'aes-256-' + cipher.slice(7, 10);\n\t\tbreak;\n\tdefault:\n\t\tthrow (new Error(\n\t\t    'Unsupported openssl cipher \"' + cipher + '\"'));\n\t}\n\treturn (inf);\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 548, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 553, "column": 0}, "map": {"version":3,"sources":["file:///Users/monz/Code/queue/frontend/node_modules/sshpk/lib/ssh-buffer.js"],"sourcesContent":["// Copyright 2015 Joyent, Inc.\n\nmodule.exports = SSHBuffer;\n\nvar assert = require('assert-plus');\nvar Buffer = require('safer-buffer').Buffer;\n\nfunction SSHBuffer(opts) {\n\tassert.object(opts, 'options');\n\tif (opts.buffer !== undefined)\n\t\tassert.buffer(opts.buffer, 'options.buffer');\n\n\tthis._size = opts.buffer ? opts.buffer.length : 1024;\n\tthis._buffer = opts.buffer || Buffer.alloc(this._size);\n\tthis._offset = 0;\n}\n\nSSHBuffer.prototype.toBuffer = function () {\n\treturn (this._buffer.slice(0, this._offset));\n};\n\nSSHBuffer.prototype.atEnd = function () {\n\treturn (this._offset >= this._buffer.length);\n};\n\nSSHBuffer.prototype.remainder = function () {\n\treturn (this._buffer.slice(this._offset));\n};\n\nSSHBuffer.prototype.skip = function (n) {\n\tthis._offset += n;\n};\n\nSSHBuffer.prototype.expand = function () {\n\tthis._size *= 2;\n\tvar buf = Buffer.alloc(this._size);\n\tthis._buffer.copy(buf, 0);\n\tthis._buffer = buf;\n};\n\nSSHBuffer.prototype.readPart = function () {\n\treturn ({data: this.readBuffer()});\n};\n\nSSHBuffer.prototype.readBuffer = function () {\n\tvar len = this._buffer.readUInt32BE(this._offset);\n\tthis._offset += 4;\n\tassert.ok(this._offset + len <= this._buffer.length,\n\t    'length out of bounds at +0x' + this._offset.toString(16) +\n\t    ' (data truncated?)');\n\tvar buf = this._buffer.slice(this._offset, this._offset + len);\n\tthis._offset += len;\n\treturn (buf);\n};\n\nSSHBuffer.prototype.readString = function () {\n\treturn (this.readBuffer().toString());\n};\n\nSSHBuffer.prototype.readCString = function () {\n\tvar offset = this._offset;\n\twhile (offset < this._buffer.length &&\n\t    this._buffer[offset] !== 0x00)\n\t\toffset++;\n\tassert.ok(offset < this._buffer.length, 'c string does not terminate');\n\tvar str = this._buffer.slice(this._offset, offset).toString();\n\tthis._offset = offset + 1;\n\treturn (str);\n};\n\nSSHBuffer.prototype.readInt = function () {\n\tvar v = this._buffer.readUInt32BE(this._offset);\n\tthis._offset += 4;\n\treturn (v);\n};\n\nSSHBuffer.prototype.readInt64 = function () {\n\tassert.ok(this._offset + 8 < this._buffer.length,\n\t    'buffer not long enough to read Int64');\n\tvar v = this._buffer.slice(this._offset, this._offset + 8);\n\tthis._offset += 8;\n\treturn (v);\n};\n\nSSHBuffer.prototype.readChar = function () {\n\tvar v = this._buffer[this._offset++];\n\treturn (v);\n};\n\nSSHBuffer.prototype.writeBuffer = function (buf) {\n\twhile (this._offset + 4 + buf.length > this._size)\n\t\tthis.expand();\n\tthis._buffer.writeUInt32BE(buf.length, this._offset);\n\tthis._offset += 4;\n\tbuf.copy(this._buffer, this._offset);\n\tthis._offset += buf.length;\n};\n\nSSHBuffer.prototype.writeString = function (str) {\n\tthis.writeBuffer(Buffer.from(str, 'utf8'));\n};\n\nSSHBuffer.prototype.writeCString = function (str) {\n\twhile (this._offset + 1 + str.length > this._size)\n\t\tthis.expand();\n\tthis._buffer.write(str, this._offset);\n\tthis._offset += str.length;\n\tthis._buffer[this._offset++] = 0;\n};\n\nSSHBuffer.prototype.writeInt = function (v) {\n\twhile (this._offset + 4 > this._size)\n\t\tthis.expand();\n\tthis._buffer.writeUInt32BE(v, this._offset);\n\tthis._offset += 4;\n};\n\nSSHBuffer.prototype.writeInt64 = function (v) {\n\tassert.buffer(v, 'value');\n\tif (v.length > 8) {\n\t\tvar lead = v.slice(0, v.length - 8);\n\t\tfor (var i = 0; i < lead.length; ++i) {\n\t\t\tassert.strictEqual(lead[i], 0,\n\t\t\t    'must fit in 64 bits of precision');\n\t\t}\n\t\tv = v.slice(v.length - 8, v.length);\n\t}\n\twhile (this._offset + 8 > this._size)\n\t\tthis.expand();\n\tv.copy(this._buffer, this._offset);\n\tthis._offset += 8;\n};\n\nSSHBuffer.prototype.writeChar = function (v) {\n\twhile (this._offset + 1 > this._size)\n\t\tthis.expand();\n\tthis._buffer[this._offset++] = v;\n};\n\nSSHBuffer.prototype.writePart = function (p) {\n\tthis.writeBuffer(p.data);\n};\n\nSSHBuffer.prototype.write = function (buf) {\n\twhile (this._offset + buf.length > this._size)\n\t\tthis.expand();\n\tbuf.copy(this._buffer, this._offset);\n\tthis._offset += buf.length;\n};\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 667, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 672, "column": 0}, "map": {"version":3,"sources":["file:///Users/monz/Code/queue/frontend/node_modules/sshpk/lib/signature.js"],"sourcesContent":["// Copyright 2015 Joyent, Inc.\n\nmodule.exports = Signature;\n\nvar assert = require('assert-plus');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('./algs');\nvar crypto = require('crypto');\nvar errs = require('./errors');\nvar utils = require('./utils');\nvar asn1 = require('asn1');\nvar SSHBuffer = require('./ssh-buffer');\n\nvar InvalidAlgorithmError = errs.InvalidAlgorithmError;\nvar SignatureParseError = errs.SignatureParseError;\n\nfunction Signature(opts) {\n\tassert.object(opts, 'options');\n\tassert.arrayOfObject(opts.parts, 'options.parts');\n\tassert.string(opts.type, 'options.type');\n\n\tvar partLookup = {};\n\tfor (var i = 0; i < opts.parts.length; ++i) {\n\t\tvar part = opts.parts[i];\n\t\tpartLookup[part.name] = part;\n\t}\n\n\tthis.type = opts.type;\n\tthis.hashAlgorithm = opts.hashAlgo;\n\tthis.curve = opts.curve;\n\tthis.parts = opts.parts;\n\tthis.part = partLookup;\n}\n\nSignature.prototype.toBuffer = function (format) {\n\tif (format === undefined)\n\t\tformat = 'asn1';\n\tassert.string(format, 'format');\n\n\tvar buf;\n\tvar stype = 'ssh-' + this.type;\n\n\tswitch (this.type) {\n\tcase 'rsa':\n\t\tswitch (this.hashAlgorithm) {\n\t\tcase 'sha256':\n\t\t\tstype = 'rsa-sha2-256';\n\t\t\tbreak;\n\t\tcase 'sha512':\n\t\t\tstype = 'rsa-sha2-512';\n\t\t\tbreak;\n\t\tcase 'sha1':\n\t\tcase undefined:\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow (new Error('SSH signature ' +\n\t\t\t    'format does not support hash ' +\n\t\t\t    'algorithm ' + this.hashAlgorithm));\n\t\t}\n\t\tif (format === 'ssh') {\n\t\t\tbuf = new SSHBuffer({});\n\t\t\tbuf.writeString(stype);\n\t\t\tbuf.writePart(this.part.sig);\n\t\t\treturn (buf.toBuffer());\n\t\t} else {\n\t\t\treturn (this.part.sig.data);\n\t\t}\n\t\tbreak;\n\n\tcase 'ed25519':\n\t\tif (format === 'ssh') {\n\t\t\tbuf = new SSHBuffer({});\n\t\t\tbuf.writeString(stype);\n\t\t\tbuf.writePart(this.part.sig);\n\t\t\treturn (buf.toBuffer());\n\t\t} else {\n\t\t\treturn (this.part.sig.data);\n\t\t}\n\t\tbreak;\n\n\tcase 'dsa':\n\tcase 'ecdsa':\n\t\tvar r, s;\n\t\tif (format === 'asn1') {\n\t\t\tvar der = new asn1.BerWriter();\n\t\t\tder.startSequence();\n\t\t\tr = utils.mpNormalize(this.part.r.data);\n\t\t\ts = utils.mpNormalize(this.part.s.data);\n\t\t\tder.writeBuffer(r, asn1.Ber.Integer);\n\t\t\tder.writeBuffer(s, asn1.Ber.Integer);\n\t\t\tder.endSequence();\n\t\t\treturn (der.buffer);\n\t\t} else if (format === 'ssh' && this.type === 'dsa') {\n\t\t\tbuf = new SSHBuffer({});\n\t\t\tbuf.writeString('ssh-dss');\n\t\t\tr = this.part.r.data;\n\t\t\tif (r.length > 20 && r[0] === 0x00)\n\t\t\t\tr = r.slice(1);\n\t\t\ts = this.part.s.data;\n\t\t\tif (s.length > 20 && s[0] === 0x00)\n\t\t\t\ts = s.slice(1);\n\t\t\tif ((this.hashAlgorithm &&\n\t\t\t    this.hashAlgorithm !== 'sha1') ||\n\t\t\t    r.length + s.length !== 40) {\n\t\t\t\tthrow (new Error('OpenSSH only supports ' +\n\t\t\t\t    'DSA signatures with SHA1 hash'));\n\t\t\t}\n\t\t\tbuf.writeBuffer(Buffer.concat([r, s]));\n\t\t\treturn (buf.toBuffer());\n\t\t} else if (format === 'ssh' && this.type === 'ecdsa') {\n\t\t\tvar inner = new SSHBuffer({});\n\t\t\tr = this.part.r.data;\n\t\t\tinner.writeBuffer(r);\n\t\t\tinner.writePart(this.part.s);\n\n\t\t\tbuf = new SSHBuffer({});\n\t\t\t/* XXX: find a more proper way to do this? */\n\t\t\tvar curve;\n\t\t\tif (r[0] === 0x00)\n\t\t\t\tr = r.slice(1);\n\t\t\tvar sz = r.length * 8;\n\t\t\tif (sz === 256)\n\t\t\t\tcurve = 'nistp256';\n\t\t\telse if (sz === 384)\n\t\t\t\tcurve = 'nistp384';\n\t\t\telse if (sz === 528)\n\t\t\t\tcurve = 'nistp521';\n\t\t\tbuf.writeString('ecdsa-sha2-' + curve);\n\t\t\tbuf.writeBuffer(inner.toBuffer());\n\t\t\treturn (buf.toBuffer());\n\t\t}\n\t\tthrow (new Error('Invalid signature format'));\n\tdefault:\n\t\tthrow (new Error('Invalid signature data'));\n\t}\n};\n\nSignature.prototype.toString = function (format) {\n\tassert.optionalString(format, 'format');\n\treturn (this.toBuffer(format).toString('base64'));\n};\n\nSignature.parse = function (data, type, format) {\n\tif (typeof (data) === 'string')\n\t\tdata = Buffer.from(data, 'base64');\n\tassert.buffer(data, 'data');\n\tassert.string(format, 'format');\n\tassert.string(type, 'type');\n\n\tvar opts = {};\n\topts.type = type.toLowerCase();\n\topts.parts = [];\n\n\ttry {\n\t\tassert.ok(data.length > 0, 'signature must not be empty');\n\t\tswitch (opts.type) {\n\t\tcase 'rsa':\n\t\t\treturn (parseOneNum(data, type, format, opts));\n\t\tcase 'ed25519':\n\t\t\treturn (parseOneNum(data, type, format, opts));\n\n\t\tcase 'dsa':\n\t\tcase 'ecdsa':\n\t\t\tif (format === 'asn1')\n\t\t\t\treturn (parseDSAasn1(data, type, format, opts));\n\t\t\telse if (opts.type === 'dsa')\n\t\t\t\treturn (parseDSA(data, type, format, opts));\n\t\t\telse\n\t\t\t\treturn (parseECDSA(data, type, format, opts));\n\n\t\tdefault:\n\t\t\tthrow (new InvalidAlgorithmError(type));\n\t\t}\n\n\t} catch (e) {\n\t\tif (e instanceof InvalidAlgorithmError)\n\t\t\tthrow (e);\n\t\tthrow (new SignatureParseError(type, format, e));\n\t}\n};\n\nfunction parseOneNum(data, type, format, opts) {\n\tif (format === 'ssh') {\n\t\ttry {\n\t\t\tvar buf = new SSHBuffer({buffer: data});\n\t\t\tvar head = buf.readString();\n\t\t} catch (e) {\n\t\t\t/* fall through */\n\t\t}\n\t\tif (buf !== undefined) {\n\t\t\tvar msg = 'SSH signature does not match expected ' +\n\t\t\t    'type (expected ' + type + ', got ' + head + ')';\n\t\t\tswitch (head) {\n\t\t\tcase 'ssh-rsa':\n\t\t\t\tassert.strictEqual(type, 'rsa', msg);\n\t\t\t\topts.hashAlgo = 'sha1';\n\t\t\t\tbreak;\n\t\t\tcase 'rsa-sha2-256':\n\t\t\t\tassert.strictEqual(type, 'rsa', msg);\n\t\t\t\topts.hashAlgo = 'sha256';\n\t\t\t\tbreak;\n\t\t\tcase 'rsa-sha2-512':\n\t\t\t\tassert.strictEqual(type, 'rsa', msg);\n\t\t\t\topts.hashAlgo = 'sha512';\n\t\t\t\tbreak;\n\t\t\tcase 'ssh-ed25519':\n\t\t\t\tassert.strictEqual(type, 'ed25519', msg);\n\t\t\t\topts.hashAlgo = 'sha512';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow (new Error('Unknown SSH signature ' +\n\t\t\t\t    'type: ' + head));\n\t\t\t}\n\t\t\tvar sig = buf.readPart();\n\t\t\tassert.ok(buf.atEnd(), 'extra trailing bytes');\n\t\t\tsig.name = 'sig';\n\t\t\topts.parts.push(sig);\n\t\t\treturn (new Signature(opts));\n\t\t}\n\t}\n\topts.parts.push({name: 'sig', data: data});\n\treturn (new Signature(opts));\n}\n\nfunction parseDSAasn1(data, type, format, opts) {\n\tvar der = new asn1.BerReader(data);\n\tder.readSequence();\n\tvar r = der.readString(asn1.Ber.Integer, true);\n\tvar s = der.readString(asn1.Ber.Integer, true);\n\n\topts.parts.push({name: 'r', data: utils.mpNormalize(r)});\n\topts.parts.push({name: 's', data: utils.mpNormalize(s)});\n\n\treturn (new Signature(opts));\n}\n\nfunction parseDSA(data, type, format, opts) {\n\tif (data.length != 40) {\n\t\tvar buf = new SSHBuffer({buffer: data});\n\t\tvar d = buf.readBuffer();\n\t\tif (d.toString('ascii') === 'ssh-dss')\n\t\t\td = buf.readBuffer();\n\t\tassert.ok(buf.atEnd(), 'extra trailing bytes');\n\t\tassert.strictEqual(d.length, 40, 'invalid inner length');\n\t\tdata = d;\n\t}\n\topts.parts.push({name: 'r', data: data.slice(0, 20)});\n\topts.parts.push({name: 's', data: data.slice(20, 40)});\n\treturn (new Signature(opts));\n}\n\nfunction parseECDSA(data, type, format, opts) {\n\tvar buf = new SSHBuffer({buffer: data});\n\n\tvar r, s;\n\tvar inner = buf.readBuffer();\n\tvar stype = inner.toString('ascii');\n\tif (stype.slice(0, 6) === 'ecdsa-') {\n\t\tvar parts = stype.split('-');\n\t\tassert.strictEqual(parts[0], 'ecdsa');\n\t\tassert.strictEqual(parts[1], 'sha2');\n\t\topts.curve = parts[2];\n\t\tswitch (opts.curve) {\n\t\tcase 'nistp256':\n\t\t\topts.hashAlgo = 'sha256';\n\t\t\tbreak;\n\t\tcase 'nistp384':\n\t\t\topts.hashAlgo = 'sha384';\n\t\t\tbreak;\n\t\tcase 'nistp521':\n\t\t\topts.hashAlgo = 'sha512';\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow (new Error('Unsupported ECDSA curve: ' +\n\t\t\t    opts.curve));\n\t\t}\n\t\tinner = buf.readBuffer();\n\t\tassert.ok(buf.atEnd(), 'extra trailing bytes on outer');\n\t\tbuf = new SSHBuffer({buffer: inner});\n\t\tr = buf.readPart();\n\t} else {\n\t\tr = {data: inner};\n\t}\n\n\ts = buf.readPart();\n\tassert.ok(buf.atEnd(), 'extra trailing bytes');\n\n\tr.name = 'r';\n\ts.name = 's';\n\n\topts.parts.push(r);\n\topts.parts.push(s);\n\treturn (new Signature(opts));\n}\n\nSignature.isSignature = function (obj, ver) {\n\treturn (utils.isCompatible(obj, Signature, ver));\n};\n\n/*\n * API versions for Signature:\n * [1,0] -- initial ver\n * [2,0] -- support for rsa in full ssh format, compat with sshpk-agent\n *          hashAlgorithm property\n * [2,1] -- first tagged version\n */\nSignature.prototype._sshpkApiVersion = [2, 1];\n\nSignature._oldVersionDetect = function (obj) {\n\tassert.func(obj.toBuffer);\n\tif (obj.hasOwnProperty('hashAlgorithm'))\n\t\treturn ([2, 0]);\n\treturn ([1, 0]);\n};\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 966, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 971, "column": 0}, "map": {"version":3,"sources":["file:///Users/monz/Code/queue/frontend/node_modules/sshpk/lib/dhe.js"],"sourcesContent":["// Copyright 2017 Joyent, Inc.\n\nmodule.exports = {\n\tDiffieHellman: DiffieHellman,\n\tgenerateECDSA: generateECDSA,\n\tgenerateED25519: generateED25519\n};\n\nvar assert = require('assert-plus');\nvar crypto = require('crypto');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('./algs');\nvar utils = require('./utils');\nvar nacl = require('tweetnacl');\n\nvar Key = require('./key');\nvar PrivateKey = require('./private-key');\n\nvar CRYPTO_HAVE_ECDH = (crypto.createECDH !== undefined);\n\nvar ecdh = require('ecc-jsbn');\nvar ec = require('ecc-jsbn/lib/ec');\nvar jsbn = require('jsbn').BigInteger;\n\nfunction DiffieHellman(key) {\n\tutils.assertCompatible(key, Key, [1, 4], 'key');\n\tthis._isPriv = PrivateKey.isPrivateKey(key, [1, 3]);\n\tthis._algo = key.type;\n\tthis._curve = key.curve;\n\tthis._key = key;\n\tif (key.type === 'dsa') {\n\t\tif (!CRYPTO_HAVE_ECDH) {\n\t\t\tthrow (new Error('Due to bugs in the node 0.10 ' +\n\t\t\t    'crypto API, node 0.12.x or later is required ' +\n\t\t\t    'to use DH'));\n\t\t}\n\t\tthis._dh = crypto.createDiffieHellman(\n\t\t    key.part.p.data, undefined,\n\t\t    key.part.g.data, undefined);\n\t\tthis._p = key.part.p;\n\t\tthis._g = key.part.g;\n\t\tif (this._isPriv)\n\t\t\tthis._dh.setPrivateKey(key.part.x.data);\n\t\tthis._dh.setPublicKey(key.part.y.data);\n\n\t} else if (key.type === 'ecdsa') {\n\t\tif (!CRYPTO_HAVE_ECDH) {\n\t\t\tthis._ecParams = new X9ECParameters(this._curve);\n\n\t\t\tif (this._isPriv) {\n\t\t\t\tthis._priv = new ECPrivate(\n\t\t\t\t    this._ecParams, key.part.d.data);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tvar curve = {\n\t\t\t'nistp256': 'prime256v1',\n\t\t\t'nistp384': 'secp384r1',\n\t\t\t'nistp521': 'secp521r1'\n\t\t}[key.curve];\n\t\tthis._dh = crypto.createECDH(curve);\n\t\tif (typeof (this._dh) !== 'object' ||\n\t\t    typeof (this._dh.setPrivateKey) !== 'function') {\n\t\t\tCRYPTO_HAVE_ECDH = false;\n\t\t\tDiffieHellman.call(this, key);\n\t\t\treturn;\n\t\t}\n\t\tif (this._isPriv)\n\t\t\tthis._dh.setPrivateKey(key.part.d.data);\n\t\tthis._dh.setPublicKey(key.part.Q.data);\n\n\t} else if (key.type === 'curve25519') {\n\t\tif (this._isPriv) {\n\t\t\tutils.assertCompatible(key, PrivateKey, [1, 5], 'key');\n\t\t\tthis._priv = key.part.k.data;\n\t\t}\n\n\t} else {\n\t\tthrow (new Error('DH not supported for ' + key.type + ' keys'));\n\t}\n}\n\nDiffieHellman.prototype.getPublicKey = function () {\n\tif (this._isPriv)\n\t\treturn (this._key.toPublic());\n\treturn (this._key);\n};\n\nDiffieHellman.prototype.getPrivateKey = function () {\n\tif (this._isPriv)\n\t\treturn (this._key);\n\telse\n\t\treturn (undefined);\n};\nDiffieHellman.prototype.getKey = DiffieHellman.prototype.getPrivateKey;\n\nDiffieHellman.prototype._keyCheck = function (pk, isPub) {\n\tassert.object(pk, 'key');\n\tif (!isPub)\n\t\tutils.assertCompatible(pk, PrivateKey, [1, 3], 'key');\n\tutils.assertCompatible(pk, Key, [1, 4], 'key');\n\n\tif (pk.type !== this._algo) {\n\t\tthrow (new Error('A ' + pk.type + ' key cannot be used in ' +\n\t\t    this._algo + ' Diffie-Hellman'));\n\t}\n\n\tif (pk.curve !== this._curve) {\n\t\tthrow (new Error('A key from the ' + pk.curve + ' curve ' +\n\t\t    'cannot be used with a ' + this._curve +\n\t\t    ' Diffie-Hellman'));\n\t}\n\n\tif (pk.type === 'dsa') {\n\t\tassert.deepEqual(pk.part.p, this._p,\n\t\t    'DSA key prime does not match');\n\t\tassert.deepEqual(pk.part.g, this._g,\n\t\t    'DSA key generator does not match');\n\t}\n};\n\nDiffieHellman.prototype.setKey = function (pk) {\n\tthis._keyCheck(pk);\n\n\tif (pk.type === 'dsa') {\n\t\tthis._dh.setPrivateKey(pk.part.x.data);\n\t\tthis._dh.setPublicKey(pk.part.y.data);\n\n\t} else if (pk.type === 'ecdsa') {\n\t\tif (CRYPTO_HAVE_ECDH) {\n\t\t\tthis._dh.setPrivateKey(pk.part.d.data);\n\t\t\tthis._dh.setPublicKey(pk.part.Q.data);\n\t\t} else {\n\t\t\tthis._priv = new ECPrivate(\n\t\t\t    this._ecParams, pk.part.d.data);\n\t\t}\n\n\t} else if (pk.type === 'curve25519') {\n\t\tvar k = pk.part.k;\n\t\tif (!pk.part.k)\n\t\t\tk = pk.part.r;\n\t\tthis._priv = k.data;\n\t\tif (this._priv[0] === 0x00)\n\t\t\tthis._priv = this._priv.slice(1);\n\t\tthis._priv = this._priv.slice(0, 32);\n\t}\n\tthis._key = pk;\n\tthis._isPriv = true;\n};\nDiffieHellman.prototype.setPrivateKey = DiffieHellman.prototype.setKey;\n\nDiffieHellman.prototype.computeSecret = function (otherpk) {\n\tthis._keyCheck(otherpk, true);\n\tif (!this._isPriv)\n\t\tthrow (new Error('DH exchange has not been initialized with ' +\n\t\t    'a private key yet'));\n\n\tvar pub;\n\tif (this._algo === 'dsa') {\n\t\treturn (this._dh.computeSecret(\n\t\t    otherpk.part.y.data));\n\n\t} else if (this._algo === 'ecdsa') {\n\t\tif (CRYPTO_HAVE_ECDH) {\n\t\t\treturn (this._dh.computeSecret(\n\t\t\t    otherpk.part.Q.data));\n\t\t} else {\n\t\t\tpub = new ECPublic(\n\t\t\t    this._ecParams, otherpk.part.Q.data);\n\t\t\treturn (this._priv.deriveSharedSecret(pub));\n\t\t}\n\n\t} else if (this._algo === 'curve25519') {\n\t\tpub = otherpk.part.A.data;\n\t\twhile (pub[0] === 0x00 && pub.length > 32)\n\t\t\tpub = pub.slice(1);\n\t\tvar priv = this._priv;\n\t\tassert.strictEqual(pub.length, 32);\n\t\tassert.strictEqual(priv.length, 32);\n\n\t\tvar secret = nacl.box.before(new Uint8Array(pub),\n\t\t    new Uint8Array(priv));\n\n\t\treturn (Buffer.from(secret));\n\t}\n\n\tthrow (new Error('Invalid algorithm: ' + this._algo));\n};\n\nDiffieHellman.prototype.generateKey = function () {\n\tvar parts = [];\n\tvar priv, pub;\n\tif (this._algo === 'dsa') {\n\t\tthis._dh.generateKeys();\n\n\t\tparts.push({name: 'p', data: this._p.data});\n\t\tparts.push({name: 'q', data: this._key.part.q.data});\n\t\tparts.push({name: 'g', data: this._g.data});\n\t\tparts.push({name: 'y', data: this._dh.getPublicKey()});\n\t\tparts.push({name: 'x', data: this._dh.getPrivateKey()});\n\t\tthis._key = new PrivateKey({\n\t\t\ttype: 'dsa',\n\t\t\tparts: parts\n\t\t});\n\t\tthis._isPriv = true;\n\t\treturn (this._key);\n\n\t} else if (this._algo === 'ecdsa') {\n\t\tif (CRYPTO_HAVE_ECDH) {\n\t\t\tthis._dh.generateKeys();\n\n\t\t\tparts.push({name: 'curve',\n\t\t\t    data: Buffer.from(this._curve)});\n\t\t\tparts.push({name: 'Q', data: this._dh.getPublicKey()});\n\t\t\tparts.push({name: 'd', data: this._dh.getPrivateKey()});\n\t\t\tthis._key = new PrivateKey({\n\t\t\t\ttype: 'ecdsa',\n\t\t\t\tcurve: this._curve,\n\t\t\t\tparts: parts\n\t\t\t});\n\t\t\tthis._isPriv = true;\n\t\t\treturn (this._key);\n\n\t\t} else {\n\t\t\tvar n = this._ecParams.getN();\n\t\t\tvar r = new jsbn(crypto.randomBytes(n.bitLength()));\n\t\t\tvar n1 = n.subtract(jsbn.ONE);\n\t\t\tpriv = r.mod(n1).add(jsbn.ONE);\n\t\t\tpub = this._ecParams.getG().multiply(priv);\n\n\t\t\tpriv = Buffer.from(priv.toByteArray());\n\t\t\tpub = Buffer.from(this._ecParams.getCurve().\n\t\t\t    encodePointHex(pub), 'hex');\n\n\t\t\tthis._priv = new ECPrivate(this._ecParams, priv);\n\n\t\t\tparts.push({name: 'curve',\n\t\t\t    data: Buffer.from(this._curve)});\n\t\t\tparts.push({name: 'Q', data: pub});\n\t\t\tparts.push({name: 'd', data: priv});\n\n\t\t\tthis._key = new PrivateKey({\n\t\t\t\ttype: 'ecdsa',\n\t\t\t\tcurve: this._curve,\n\t\t\t\tparts: parts\n\t\t\t});\n\t\t\tthis._isPriv = true;\n\t\t\treturn (this._key);\n\t\t}\n\n\t} else if (this._algo === 'curve25519') {\n\t\tvar pair = nacl.box.keyPair();\n\t\tpriv = Buffer.from(pair.secretKey);\n\t\tpub = Buffer.from(pair.publicKey);\n\t\tpriv = Buffer.concat([priv, pub]);\n\t\tassert.strictEqual(priv.length, 64);\n\t\tassert.strictEqual(pub.length, 32);\n\n\t\tparts.push({name: 'A', data: pub});\n\t\tparts.push({name: 'k', data: priv});\n\t\tthis._key = new PrivateKey({\n\t\t\ttype: 'curve25519',\n\t\t\tparts: parts\n\t\t});\n\t\tthis._isPriv = true;\n\t\treturn (this._key);\n\t}\n\n\tthrow (new Error('Invalid algorithm: ' + this._algo));\n};\nDiffieHellman.prototype.generateKeys = DiffieHellman.prototype.generateKey;\n\n/* These are helpers for using ecc-jsbn (for node 0.10 compatibility). */\n\nfunction X9ECParameters(name) {\n\tvar params = algs.curves[name];\n\tassert.object(params);\n\n\tvar p = new jsbn(params.p);\n\tvar a = new jsbn(params.a);\n\tvar b = new jsbn(params.b);\n\tvar n = new jsbn(params.n);\n\tvar h = jsbn.ONE;\n\tvar curve = new ec.ECCurveFp(p, a, b);\n\tvar G = curve.decodePointHex(params.G.toString('hex'));\n\n\tthis.curve = curve;\n\tthis.g = G;\n\tthis.n = n;\n\tthis.h = h;\n}\nX9ECParameters.prototype.getCurve = function () { return (this.curve); };\nX9ECParameters.prototype.getG = function () { return (this.g); };\nX9ECParameters.prototype.getN = function () { return (this.n); };\nX9ECParameters.prototype.getH = function () { return (this.h); };\n\nfunction ECPublic(params, buffer) {\n\tthis._params = params;\n\tif (buffer[0] === 0x00)\n\t\tbuffer = buffer.slice(1);\n\tthis._pub = params.getCurve().decodePointHex(buffer.toString('hex'));\n}\n\nfunction ECPrivate(params, buffer) {\n\tthis._params = params;\n\tthis._priv = new jsbn(utils.mpNormalize(buffer));\n}\nECPrivate.prototype.deriveSharedSecret = function (pubKey) {\n\tassert.ok(pubKey instanceof ECPublic);\n\tvar S = pubKey._pub.multiply(this._priv);\n\treturn (Buffer.from(S.getX().toBigInteger().toByteArray()));\n};\n\nfunction generateED25519() {\n\tvar pair = nacl.sign.keyPair();\n\tvar priv = Buffer.from(pair.secretKey);\n\tvar pub = Buffer.from(pair.publicKey);\n\tassert.strictEqual(priv.length, 64);\n\tassert.strictEqual(pub.length, 32);\n\n\tvar parts = [];\n\tparts.push({name: 'A', data: pub});\n\tparts.push({name: 'k', data: priv.slice(0, 32)});\n\tvar key = new PrivateKey({\n\t\ttype: 'ed25519',\n\t\tparts: parts\n\t});\n\treturn (key);\n}\n\n/* Generates a new ECDSA private key on a given curve. */\nfunction generateECDSA(curve) {\n\tvar parts = [];\n\tvar key;\n\n\tif (CRYPTO_HAVE_ECDH) {\n\t\t/*\n\t\t * Node crypto doesn't expose key generation directly, but the\n\t\t * ECDH instances can generate keys. It turns out this just\n\t\t * calls into the OpenSSL generic key generator, and we can\n\t\t * read its output happily without doing an actual DH. So we\n\t\t * use that here.\n\t\t */\n\t\tvar osCurve = {\n\t\t\t'nistp256': 'prime256v1',\n\t\t\t'nistp384': 'secp384r1',\n\t\t\t'nistp521': 'secp521r1'\n\t\t}[curve];\n\n\t\tvar dh = crypto.createECDH(osCurve);\n\t\tdh.generateKeys();\n\n\t\tparts.push({name: 'curve',\n\t\t    data: Buffer.from(curve)});\n\t\tparts.push({name: 'Q', data: dh.getPublicKey()});\n\t\tparts.push({name: 'd', data: dh.getPrivateKey()});\n\n\t\tkey = new PrivateKey({\n\t\t\ttype: 'ecdsa',\n\t\t\tcurve: curve,\n\t\t\tparts: parts\n\t\t});\n\t\treturn (key);\n\t} else {\n\n\t\tvar ecParams = new X9ECParameters(curve);\n\n\t\t/* This algorithm taken from FIPS PUB 186-4 (section B.4.1) */\n\t\tvar n = ecParams.getN();\n\t\t/*\n\t\t * The crypto.randomBytes() function can only give us whole\n\t\t * bytes, so taking a nod from X9.62, we round up.\n\t\t */\n\t\tvar cByteLen = Math.ceil((n.bitLength() + 64) / 8);\n\t\tvar c = new jsbn(crypto.randomBytes(cByteLen));\n\n\t\tvar n1 = n.subtract(jsbn.ONE);\n\t\tvar priv = c.mod(n1).add(jsbn.ONE);\n\t\tvar pub = ecParams.getG().multiply(priv);\n\n\t\tpriv = Buffer.from(priv.toByteArray());\n\t\tpub = Buffer.from(ecParams.getCurve().\n\t\t    encodePointHex(pub), 'hex');\n\n\t\tparts.push({name: 'curve', data: Buffer.from(curve)});\n\t\tparts.push({name: 'Q', data: pub});\n\t\tparts.push({name: 'd', data: priv});\n\n\t\tkey = new PrivateKey({\n\t\t\ttype: 'ecdsa',\n\t\t\tcurve: curve,\n\t\t\tparts: parts\n\t\t});\n\t\treturn (key);\n\t}\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1360, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1365, "column": 0}, "map": {"version":3,"sources":["file:///Users/monz/Code/queue/frontend/node_modules/sshpk/lib/ed-compat.js"],"sourcesContent":["// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n\tVerifier: Verifier,\n\tSigner: Signer\n};\n\nvar nacl = require('tweetnacl');\nvar stream = require('stream');\nvar util = require('util');\nvar assert = require('assert-plus');\nvar Buffer = require('safer-buffer').Buffer;\nvar Signature = require('./signature');\n\nfunction Verifier(key, hashAlgo) {\n\tif (hashAlgo.toLowerCase() !== 'sha512')\n\t\tthrow (new Error('ED25519 only supports the use of ' +\n\t\t    'SHA-512 hashes'));\n\n\tthis.key = key;\n\tthis.chunks = [];\n\n\tstream.Writable.call(this, {});\n}\nutil.inherits(Verifier, stream.Writable);\n\nVerifier.prototype._write = function (chunk, enc, cb) {\n\tthis.chunks.push(chunk);\n\tcb();\n};\n\nVerifier.prototype.update = function (chunk) {\n\tif (typeof (chunk) === 'string')\n\t\tchunk = Buffer.from(chunk, 'binary');\n\tthis.chunks.push(chunk);\n};\n\nVerifier.prototype.verify = function (signature, fmt) {\n\tvar sig;\n\tif (Signature.isSignature(signature, [2, 0])) {\n\t\tif (signature.type !== 'ed25519')\n\t\t\treturn (false);\n\t\tsig = signature.toBuffer('raw');\n\n\t} else if (typeof (signature) === 'string') {\n\t\tsig = Buffer.from(signature, 'base64');\n\n\t} else if (Signature.isSignature(signature, [1, 0])) {\n\t\tthrow (new Error('signature was created by too old ' +\n\t\t    'a version of sshpk and cannot be verified'));\n\t}\n\n\tassert.buffer(sig);\n\treturn (nacl.sign.detached.verify(\n\t    new Uint8Array(Buffer.concat(this.chunks)),\n\t    new Uint8Array(sig),\n\t    new Uint8Array(this.key.part.A.data)));\n};\n\nfunction Signer(key, hashAlgo) {\n\tif (hashAlgo.toLowerCase() !== 'sha512')\n\t\tthrow (new Error('ED25519 only supports the use of ' +\n\t\t    'SHA-512 hashes'));\n\n\tthis.key = key;\n\tthis.chunks = [];\n\n\tstream.Writable.call(this, {});\n}\nutil.inherits(Signer, stream.Writable);\n\nSigner.prototype._write = function (chunk, enc, cb) {\n\tthis.chunks.push(chunk);\n\tcb();\n};\n\nSigner.prototype.update = function (chunk) {\n\tif (typeof (chunk) === 'string')\n\t\tchunk = Buffer.from(chunk, 'binary');\n\tthis.chunks.push(chunk);\n};\n\nSigner.prototype.sign = function () {\n\tvar sig = nacl.sign.detached(\n\t    new Uint8Array(Buffer.concat(this.chunks)),\n\t    new Uint8Array(Buffer.concat([\n\t\tthis.key.part.k.data, this.key.part.A.data])));\n\tvar sigBuf = Buffer.from(sig);\n\tvar sigObj = Signature.parse(sigBuf, 'ed25519', 'raw');\n\tsigObj.hashAlgorithm = 'sha512';\n\treturn (sigObj);\n};\n"],"names":[],"mappings":"AAAA,8BAA8B;AAE9B,OAAO,OAAO,GAAG;IAChB,UAAU;IACV,QAAQ;AACT;AAEA,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI,SAAS,+FAAwB,MAAM;AAC3C,IAAI;AAEJ,SAAS,SAAS,GAAG,EAAE,QAAQ;IAC9B,IAAI,SAAS,WAAW,OAAO,UAC9B,MAAO,IAAI,MAAM,sCACb;IAEL,IAAI,CAAC,GAAG,GAAG;IACX,IAAI,CAAC,MAAM,GAAG,EAAE;IAEhB,OAAO,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;AAC7B;AACA,KAAK,QAAQ,CAAC,UAAU,OAAO,QAAQ;AAEvC,SAAS,SAAS,CAAC,MAAM,GAAG,SAAU,KAAK,EAAE,GAAG,EAAE,EAAE;IACnD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;IACjB;AACD;AAEA,SAAS,SAAS,CAAC,MAAM,GAAG,SAAU,KAAK;IAC1C,IAAI,OAAQ,UAAW,UACtB,QAAQ,OAAO,IAAI,CAAC,OAAO;IAC5B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;AAClB;AAEA,SAAS,SAAS,CAAC,MAAM,GAAG,SAAU,SAAS,EAAE,GAAG;IACnD,IAAI;IACJ,IAAI,UAAU,WAAW,CAAC,WAAW;QAAC;QAAG;KAAE,GAAG;QAC7C,IAAI,UAAU,IAAI,KAAK,WACtB,OAAQ;QACT,MAAM,UAAU,QAAQ,CAAC;IAE1B,OAAO,IAAI,OAAQ,cAAe,UAAU;QAC3C,MAAM,OAAO,IAAI,CAAC,WAAW;IAE9B,OAAO,IAAI,UAAU,WAAW,CAAC,WAAW;QAAC;QAAG;KAAE,GAAG;QACpD,MAAO,IAAI,MAAM,sCACb;IACL;IAEA,OAAO,MAAM,CAAC;IACd,OAAQ,KAAK,IAAI,CAAC,QAAQ,CAAC,MAAM,CAC7B,IAAI,WAAW,OAAO,MAAM,CAAC,IAAI,CAAC,MAAM,IACxC,IAAI,WAAW,MACf,IAAI,WAAW,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI;AACxC;AAEA,SAAS,OAAO,GAAG,EAAE,QAAQ;IAC5B,IAAI,SAAS,WAAW,OAAO,UAC9B,MAAO,IAAI,MAAM,sCACb;IAEL,IAAI,CAAC,GAAG,GAAG;IACX,IAAI,CAAC,MAAM,GAAG,EAAE;IAEhB,OAAO,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;AAC7B;AACA,KAAK,QAAQ,CAAC,QAAQ,OAAO,QAAQ;AAErC,OAAO,SAAS,CAAC,MAAM,GAAG,SAAU,KAAK,EAAE,GAAG,EAAE,EAAE;IACjD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;IACjB;AACD;AAEA,OAAO,SAAS,CAAC,MAAM,GAAG,SAAU,KAAK;IACxC,IAAI,OAAQ,UAAW,UACtB,QAAQ,OAAO,IAAI,CAAC,OAAO;IAC5B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;AAClB;AAEA,OAAO,SAAS,CAAC,IAAI,GAAG;IACvB,IAAI,MAAM,KAAK,IAAI,CAAC,QAAQ,CACxB,IAAI,WAAW,OAAO,MAAM,CAAC,IAAI,CAAC,MAAM,IACxC,IAAI,WAAW,OAAO,MAAM,CAAC;QAChC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI;QAAE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI;KAAC;IAC5C,IAAI,SAAS,OAAO,IAAI,CAAC;IACzB,IAAI,SAAS,UAAU,KAAK,CAAC,QAAQ,WAAW;IAChD,OAAO,aAAa,GAAG;IACvB,OAAQ;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1435, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1440, "column": 0}, "map": {"version":3,"sources":["file:///Users/monz/Code/queue/frontend/node_modules/sshpk/lib/formats/pkcs8.js"],"sourcesContent":["// Copyright 2018 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\treadPkcs8: readPkcs8,\n\twrite: write,\n\twritePkcs8: writePkcs8,\n\tpkcs8ToBuffer: pkcs8ToBuffer,\n\n\treadECDSACurve: readECDSACurve,\n\twriteECDSACurve: writeECDSACurve\n};\n\nvar assert = require('assert-plus');\nvar asn1 = require('asn1');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('../algs');\nvar utils = require('../utils');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar pem = require('./pem');\n\nfunction read(buf, options) {\n\treturn (pem.read(buf, options, 'pkcs8'));\n}\n\nfunction write(key, options) {\n\treturn (pem.write(key, options, 'pkcs8'));\n}\n\n/* Helper to read in a single mpint */\nfunction readMPInt(der, nm) {\n\tassert.strictEqual(der.peek(), asn1.Ber.Integer,\n\t    nm + ' is not an Integer');\n\treturn (utils.mpNormalize(der.readString(asn1.Ber.Integer, true)));\n}\n\nfunction readPkcs8(alg, type, der) {\n\t/* Private keys in pkcs#8 format have a weird extra int */\n\tif (der.peek() === asn1.Ber.Integer) {\n\t\tassert.strictEqual(type, 'private',\n\t\t    'unexpected Integer at start of public key');\n\t\tder.readString(asn1.Ber.Integer, true);\n\t}\n\n\tder.readSequence();\n\tvar next = der.offset + der.length;\n\n\tvar oid = der.readOID();\n\tswitch (oid) {\n\tcase '1.2.840.113549.1.1.1':\n\t\tder._offset = next;\n\t\tif (type === 'public')\n\t\t\treturn (readPkcs8RSAPublic(der));\n\t\telse\n\t\t\treturn (readPkcs8RSAPrivate(der));\n\tcase '1.2.840.10040.4.1':\n\t\tif (type === 'public')\n\t\t\treturn (readPkcs8DSAPublic(der));\n\t\telse\n\t\t\treturn (readPkcs8DSAPrivate(der));\n\tcase '1.2.840.10045.2.1':\n\t\tif (type === 'public')\n\t\t\treturn (readPkcs8ECDSAPublic(der));\n\t\telse\n\t\t\treturn (readPkcs8ECDSAPrivate(der));\n\tcase '1.3.101.112':\n\t\tif (type === 'public') {\n\t\t\treturn (readPkcs8EdDSAPublic(der));\n\t\t} else {\n\t\t\treturn (readPkcs8EdDSAPrivate(der));\n\t\t}\n\tcase '1.3.101.110':\n\t\tif (type === 'public') {\n\t\t\treturn (readPkcs8X25519Public(der));\n\t\t} else {\n\t\t\treturn (readPkcs8X25519Private(der));\n\t\t}\n\tdefault:\n\t\tthrow (new Error('Unknown key type OID ' + oid));\n\t}\n}\n\nfunction readPkcs8RSAPublic(der) {\n\t// bit string sequence\n\tder.readSequence(asn1.Ber.BitString);\n\tder.readByte();\n\tder.readSequence();\n\n\t// modulus\n\tvar n = readMPInt(der, 'modulus');\n\tvar e = readMPInt(der, 'exponent');\n\n\t// now, make the key\n\tvar key = {\n\t\ttype: 'rsa',\n\t\tsource: der.originalInput,\n\t\tparts: [\n\t\t\t{ name: 'e', data: e },\n\t\t\t{ name: 'n', data: n }\n\t\t]\n\t};\n\n\treturn (new Key(key));\n}\n\nfunction readPkcs8RSAPrivate(der) {\n\tder.readSequence(asn1.Ber.OctetString);\n\tder.readSequence();\n\n\tvar ver = readMPInt(der, 'version');\n\tassert.equal(ver[0], 0x0, 'unknown RSA private key version');\n\n\t// modulus then public exponent\n\tvar n = readMPInt(der, 'modulus');\n\tvar e = readMPInt(der, 'public exponent');\n\tvar d = readMPInt(der, 'private exponent');\n\tvar p = readMPInt(der, 'prime1');\n\tvar q = readMPInt(der, 'prime2');\n\tvar dmodp = readMPInt(der, 'exponent1');\n\tvar dmodq = readMPInt(der, 'exponent2');\n\tvar iqmp = readMPInt(der, 'iqmp');\n\n\t// now, make the key\n\tvar key = {\n\t\ttype: 'rsa',\n\t\tparts: [\n\t\t\t{ name: 'n', data: n },\n\t\t\t{ name: 'e', data: e },\n\t\t\t{ name: 'd', data: d },\n\t\t\t{ name: 'iqmp', data: iqmp },\n\t\t\t{ name: 'p', data: p },\n\t\t\t{ name: 'q', data: q },\n\t\t\t{ name: 'dmodp', data: dmodp },\n\t\t\t{ name: 'dmodq', data: dmodq }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction readPkcs8DSAPublic(der) {\n\tder.readSequence();\n\n\tvar p = readMPInt(der, 'p');\n\tvar q = readMPInt(der, 'q');\n\tvar g = readMPInt(der, 'g');\n\n\t// bit string sequence\n\tder.readSequence(asn1.Ber.BitString);\n\tder.readByte();\n\n\tvar y = readMPInt(der, 'y');\n\n\t// now, make the key\n\tvar key = {\n\t\ttype: 'dsa',\n\t\tparts: [\n\t\t\t{ name: 'p', data: p },\n\t\t\t{ name: 'q', data: q },\n\t\t\t{ name: 'g', data: g },\n\t\t\t{ name: 'y', data: y }\n\t\t]\n\t};\n\n\treturn (new Key(key));\n}\n\nfunction readPkcs8DSAPrivate(der) {\n\tder.readSequence();\n\n\tvar p = readMPInt(der, 'p');\n\tvar q = readMPInt(der, 'q');\n\tvar g = readMPInt(der, 'g');\n\n\tder.readSequence(asn1.Ber.OctetString);\n\tvar x = readMPInt(der, 'x');\n\n\t/* The pkcs#8 format does not include the public key */\n\tvar y = utils.calculateDSAPublic(g, p, x);\n\n\tvar key = {\n\t\ttype: 'dsa',\n\t\tparts: [\n\t\t\t{ name: 'p', data: p },\n\t\t\t{ name: 'q', data: q },\n\t\t\t{ name: 'g', data: g },\n\t\t\t{ name: 'y', data: y },\n\t\t\t{ name: 'x', data: x }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction readECDSACurve(der) {\n\tvar curveName, curveNames;\n\tvar j, c, cd;\n\n\tif (der.peek() === asn1.Ber.OID) {\n\t\tvar oid = der.readOID();\n\n\t\tcurveNames = Object.keys(algs.curves);\n\t\tfor (j = 0; j < curveNames.length; ++j) {\n\t\t\tc = curveNames[j];\n\t\t\tcd = algs.curves[c];\n\t\t\tif (cd.pkcs8oid === oid) {\n\t\t\t\tcurveName = c;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t} else {\n\t\t// ECParameters sequence\n\t\tder.readSequence();\n\t\tvar version = der.readString(asn1.Ber.Integer, true);\n\t\tassert.strictEqual(version[0], 1, 'ECDSA key not version 1');\n\n\t\tvar curve = {};\n\n\t\t// FieldID sequence\n\t\tder.readSequence();\n\t\tvar fieldTypeOid = der.readOID();\n\t\tassert.strictEqual(fieldTypeOid, '1.2.840.10045.1.1',\n\t\t    'ECDSA key is not from a prime-field');\n\t\tvar p = curve.p = utils.mpNormalize(\n\t\t    der.readString(asn1.Ber.Integer, true));\n\t\t/*\n\t\t * p always starts with a 1 bit, so count the zeros to get its\n\t\t * real size.\n\t\t */\n\t\tcurve.size = p.length * 8 - utils.countZeros(p);\n\n\t\t// Curve sequence\n\t\tder.readSequence();\n\t\tcurve.a = utils.mpNormalize(\n\t\t    der.readString(asn1.Ber.OctetString, true));\n\t\tcurve.b = utils.mpNormalize(\n\t\t    der.readString(asn1.Ber.OctetString, true));\n\t\tif (der.peek() === asn1.Ber.BitString)\n\t\t\tcurve.s = der.readString(asn1.Ber.BitString, true);\n\n\t\t// Combined Gx and Gy\n\t\tcurve.G = der.readString(asn1.Ber.OctetString, true);\n\t\tassert.strictEqual(curve.G[0], 0x4,\n\t\t    'uncompressed G is required');\n\n\t\tcurve.n = utils.mpNormalize(\n\t\t    der.readString(asn1.Ber.Integer, true));\n\t\tcurve.h = utils.mpNormalize(\n\t\t    der.readString(asn1.Ber.Integer, true));\n\t\tassert.strictEqual(curve.h[0], 0x1, 'a cofactor=1 curve is ' +\n\t\t    'required');\n\n\t\tcurveNames = Object.keys(algs.curves);\n\t\tvar ks = Object.keys(curve);\n\t\tfor (j = 0; j < curveNames.length; ++j) {\n\t\t\tc = curveNames[j];\n\t\t\tcd = algs.curves[c];\n\t\t\tvar equal = true;\n\t\t\tfor (var i = 0; i < ks.length; ++i) {\n\t\t\t\tvar k = ks[i];\n\t\t\t\tif (cd[k] === undefined)\n\t\t\t\t\tcontinue;\n\t\t\t\tif (typeof (cd[k]) === 'object' &&\n\t\t\t\t    cd[k].equals !== undefined) {\n\t\t\t\t\tif (!cd[k].equals(curve[k])) {\n\t\t\t\t\t\tequal = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else if (Buffer.isBuffer(cd[k])) {\n\t\t\t\t\tif (cd[k].toString('binary')\n\t\t\t\t\t    !== curve[k].toString('binary')) {\n\t\t\t\t\t\tequal = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (cd[k] !== curve[k]) {\n\t\t\t\t\t\tequal = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (equal) {\n\t\t\t\tcurveName = c;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn (curveName);\n}\n\nfunction readPkcs8ECDSAPrivate(der) {\n\tvar curveName = readECDSACurve(der);\n\tassert.string(curveName, 'a known elliptic curve');\n\n\tder.readSequence(asn1.Ber.OctetString);\n\tder.readSequence();\n\n\tvar version = readMPInt(der, 'version');\n\tassert.equal(version[0], 1, 'unknown version of ECDSA key');\n\n\tvar d = der.readString(asn1.Ber.OctetString, true);\n\tvar Q;\n\n\tif (der.peek() == 0xa0) {\n\t\tder.readSequence(0xa0);\n\t\tder._offset += der.length;\n\t}\n\tif (der.peek() == 0xa1) {\n\t\tder.readSequence(0xa1);\n\t\tQ = der.readString(asn1.Ber.BitString, true);\n\t\tQ = utils.ecNormalize(Q);\n\t}\n\n\tif (Q === undefined) {\n\t\tvar pub = utils.publicFromPrivateECDSA(curveName, d);\n\t\tQ = pub.part.Q.data;\n\t}\n\n\tvar key = {\n\t\ttype: 'ecdsa',\n\t\tparts: [\n\t\t\t{ name: 'curve', data: Buffer.from(curveName) },\n\t\t\t{ name: 'Q', data: Q },\n\t\t\t{ name: 'd', data: d }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction readPkcs8ECDSAPublic(der) {\n\tvar curveName = readECDSACurve(der);\n\tassert.string(curveName, 'a known elliptic curve');\n\n\tvar Q = der.readString(asn1.Ber.BitString, true);\n\tQ = utils.ecNormalize(Q);\n\n\tvar key = {\n\t\ttype: 'ecdsa',\n\t\tparts: [\n\t\t\t{ name: 'curve', data: Buffer.from(curveName) },\n\t\t\t{ name: 'Q', data: Q }\n\t\t]\n\t};\n\n\treturn (new Key(key));\n}\n\nfunction readPkcs8EdDSAPublic(der) {\n\tif (der.peek() === 0x00)\n\t\tder.readByte();\n\n\tvar A = utils.readBitString(der);\n\n\tvar key = {\n\t\ttype: 'ed25519',\n\t\tparts: [\n\t\t\t{ name: 'A', data: utils.zeroPadToLength(A, 32) }\n\t\t]\n\t};\n\n\treturn (new Key(key));\n}\n\nfunction readPkcs8X25519Public(der) {\n\tvar A = utils.readBitString(der);\n\n\tvar key = {\n\t\ttype: 'curve25519',\n\t\tparts: [\n\t\t\t{ name: 'A', data: utils.zeroPadToLength(A, 32) }\n\t\t]\n\t};\n\n\treturn (new Key(key));\n}\n\nfunction readPkcs8EdDSAPrivate(der) {\n\tif (der.peek() === 0x00)\n\t\tder.readByte();\n\n\tder.readSequence(asn1.Ber.OctetString);\n\tvar k = der.readString(asn1.Ber.OctetString, true);\n\tk = utils.zeroPadToLength(k, 32);\n\n\tvar A, tag;\n\twhile ((tag = der.peek()) !== null) {\n\t\tif (tag === (asn1.Ber.Context | 1)) {\n\t\t\tA = utils.readBitString(der, tag);\n\t\t} else {\n\t\t\tder.readSequence(tag);\n\t\t\tder._offset += der.length;\n\t\t}\n\t}\n\tif (A === undefined)\n\t\tA = utils.calculateED25519Public(k);\n\n\tvar key = {\n\t\ttype: 'ed25519',\n\t\tparts: [\n\t\t\t{ name: 'A', data: utils.zeroPadToLength(A, 32) },\n\t\t\t{ name: 'k', data: utils.zeroPadToLength(k, 32) }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction readPkcs8X25519Private(der) {\n\tif (der.peek() === 0x00)\n\t\tder.readByte();\n\n\tder.readSequence(asn1.Ber.OctetString);\n\tvar k = der.readString(asn1.Ber.OctetString, true);\n\tk = utils.zeroPadToLength(k, 32);\n\n\tvar A = utils.calculateX25519Public(k);\n\n\tvar key = {\n\t\ttype: 'curve25519',\n\t\tparts: [\n\t\t\t{ name: 'A', data: utils.zeroPadToLength(A, 32) },\n\t\t\t{ name: 'k', data: utils.zeroPadToLength(k, 32) }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction pkcs8ToBuffer(key) {\n\tvar der = new asn1.BerWriter();\n\twritePkcs8(der, key);\n\treturn (der.buffer);\n}\n\nfunction writePkcs8(der, key) {\n\tder.startSequence();\n\n\tif (PrivateKey.isPrivateKey(key)) {\n\t\tvar version = 0;\n\t\tif (key.type === 'ed25519')\n\t\t\tversion = 1;\n\t\tvar vbuf = Buffer.from([version]);\n\t\tder.writeBuffer(vbuf, asn1.Ber.Integer);\n\t}\n\n\tder.startSequence();\n\tswitch (key.type) {\n\tcase 'rsa':\n\t\tder.writeOID('1.2.840.113549.1.1.1');\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\twritePkcs8RSAPrivate(key, der);\n\t\telse\n\t\t\twritePkcs8RSAPublic(key, der);\n\t\tbreak;\n\tcase 'dsa':\n\t\tder.writeOID('1.2.840.10040.4.1');\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\twritePkcs8DSAPrivate(key, der);\n\t\telse\n\t\t\twritePkcs8DSAPublic(key, der);\n\t\tbreak;\n\tcase 'ecdsa':\n\t\tder.writeOID('1.2.840.10045.2.1');\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\twritePkcs8ECDSAPrivate(key, der);\n\t\telse\n\t\t\twritePkcs8ECDSAPublic(key, der);\n\t\tbreak;\n\tcase 'ed25519':\n\t\tder.writeOID('1.3.101.112');\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\twritePkcs8EdDSAPrivate(key, der);\n\t\telse\n\t\t\twritePkcs8EdDSAPublic(key, der);\n\t\tbreak;\n\tdefault:\n\t\tthrow (new Error('Unsupported key type: ' + key.type));\n\t}\n\n\tder.endSequence();\n}\n\nfunction writePkcs8RSAPrivate(key, der) {\n\tder.writeNull();\n\tder.endSequence();\n\n\tder.startSequence(asn1.Ber.OctetString);\n\tder.startSequence();\n\n\tvar version = Buffer.from([0]);\n\tder.writeBuffer(version, asn1.Ber.Integer);\n\n\tder.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.d.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n\tif (!key.part.dmodp || !key.part.dmodq)\n\t\tutils.addRSAMissing(key);\n\tder.writeBuffer(key.part.dmodp.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.dmodq.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.iqmp.data, asn1.Ber.Integer);\n\n\tder.endSequence();\n\tder.endSequence();\n}\n\nfunction writePkcs8RSAPublic(key, der) {\n\tder.writeNull();\n\tder.endSequence();\n\n\tder.startSequence(asn1.Ber.BitString);\n\tder.writeByte(0x00);\n\n\tder.startSequence();\n\tder.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n\tder.endSequence();\n\n\tder.endSequence();\n}\n\nfunction writePkcs8DSAPrivate(key, der) {\n\tder.startSequence();\n\tder.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n\tder.endSequence();\n\n\tder.endSequence();\n\n\tder.startSequence(asn1.Ber.OctetString);\n\tder.writeBuffer(key.part.x.data, asn1.Ber.Integer);\n\tder.endSequence();\n}\n\nfunction writePkcs8DSAPublic(key, der) {\n\tder.startSequence();\n\tder.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n\tder.endSequence();\n\tder.endSequence();\n\n\tder.startSequence(asn1.Ber.BitString);\n\tder.writeByte(0x00);\n\tder.writeBuffer(key.part.y.data, asn1.Ber.Integer);\n\tder.endSequence();\n}\n\nfunction writeECDSACurve(key, der) {\n\tvar curve = algs.curves[key.curve];\n\tif (curve.pkcs8oid) {\n\t\t/* This one has a name in pkcs#8, so just write the oid */\n\t\tder.writeOID(curve.pkcs8oid);\n\n\t} else {\n\t\t// ECParameters sequence\n\t\tder.startSequence();\n\n\t\tvar version = Buffer.from([1]);\n\t\tder.writeBuffer(version, asn1.Ber.Integer);\n\n\t\t// FieldID sequence\n\t\tder.startSequence();\n\t\tder.writeOID('1.2.840.10045.1.1'); // prime-field\n\t\tder.writeBuffer(curve.p, asn1.Ber.Integer);\n\t\tder.endSequence();\n\n\t\t// Curve sequence\n\t\tder.startSequence();\n\t\tvar a = curve.p;\n\t\tif (a[0] === 0x0)\n\t\t\ta = a.slice(1);\n\t\tder.writeBuffer(a, asn1.Ber.OctetString);\n\t\tder.writeBuffer(curve.b, asn1.Ber.OctetString);\n\t\tder.writeBuffer(curve.s, asn1.Ber.BitString);\n\t\tder.endSequence();\n\n\t\tder.writeBuffer(curve.G, asn1.Ber.OctetString);\n\t\tder.writeBuffer(curve.n, asn1.Ber.Integer);\n\t\tvar h = curve.h;\n\t\tif (!h) {\n\t\t\th = Buffer.from([1]);\n\t\t}\n\t\tder.writeBuffer(h, asn1.Ber.Integer);\n\n\t\t// ECParameters\n\t\tder.endSequence();\n\t}\n}\n\nfunction writePkcs8ECDSAPublic(key, der) {\n\twriteECDSACurve(key, der);\n\tder.endSequence();\n\n\tvar Q = utils.ecNormalize(key.part.Q.data, true);\n\tder.writeBuffer(Q, asn1.Ber.BitString);\n}\n\nfunction writePkcs8ECDSAPrivate(key, der) {\n\twriteECDSACurve(key, der);\n\tder.endSequence();\n\n\tder.startSequence(asn1.Ber.OctetString);\n\tder.startSequence();\n\n\tvar version = Buffer.from([1]);\n\tder.writeBuffer(version, asn1.Ber.Integer);\n\n\tder.writeBuffer(key.part.d.data, asn1.Ber.OctetString);\n\n\tder.startSequence(0xa1);\n\tvar Q = utils.ecNormalize(key.part.Q.data, true);\n\tder.writeBuffer(Q, asn1.Ber.BitString);\n\tder.endSequence();\n\n\tder.endSequence();\n\tder.endSequence();\n}\n\nfunction writePkcs8EdDSAPublic(key, der) {\n\tder.endSequence();\n\n\tutils.writeBitString(der, key.part.A.data);\n}\n\nfunction writePkcs8EdDSAPrivate(key, der) {\n\tder.endSequence();\n\n\tder.startSequence(asn1.Ber.OctetString);\n\tvar k = utils.mpNormalize(key.part.k.data);\n\t/* RFCs call for storing exactly 32 bytes, so strip any leading zeros */\n\twhile (k.length > 32 && k[0] === 0x00)\n\t\tk = k.slice(1);\n\tder.writeBuffer(k, asn1.Ber.OctetString);\n\tder.endSequence();\n\n\tutils.writeBitString(der, key.part.A.data, asn1.Ber.Context | 1);\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2033, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2038, "column": 0}, "map": {"version":3,"sources":["file:///Users/monz/Code/queue/frontend/node_modules/sshpk/lib/formats/pkcs1.js"],"sourcesContent":["// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\treadPkcs1: readPkcs1,\n\twrite: write,\n\twritePkcs1: writePkcs1\n};\n\nvar assert = require('assert-plus');\nvar asn1 = require('asn1');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('../algs');\nvar utils = require('../utils');\n\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar pem = require('./pem');\n\nvar pkcs8 = require('./pkcs8');\nvar readECDSACurve = pkcs8.readECDSACurve;\n\nfunction read(buf, options) {\n\treturn (pem.read(buf, options, 'pkcs1'));\n}\n\nfunction write(key, options) {\n\treturn (pem.write(key, options, 'pkcs1'));\n}\n\n/* Helper to read in a single mpint */\nfunction readMPInt(der, nm) {\n\tassert.strictEqual(der.peek(), asn1.Ber.Integer,\n\t    nm + ' is not an Integer');\n\treturn (utils.mpNormalize(der.readString(asn1.Ber.Integer, true)));\n}\n\nfunction readPkcs1(alg, type, der) {\n\tswitch (alg) {\n\tcase 'RSA':\n\t\tif (type === 'public')\n\t\t\treturn (readPkcs1RSAPublic(der));\n\t\telse if (type === 'private')\n\t\t\treturn (readPkcs1RSAPrivate(der));\n\t\tthrow (new Error('Unknown key type: ' + type));\n\tcase 'DSA':\n\t\tif (type === 'public')\n\t\t\treturn (readPkcs1DSAPublic(der));\n\t\telse if (type === 'private')\n\t\t\treturn (readPkcs1DSAPrivate(der));\n\t\tthrow (new Error('Unknown key type: ' + type));\n\tcase 'EC':\n\tcase 'ECDSA':\n\t\tif (type === 'private')\n\t\t\treturn (readPkcs1ECDSAPrivate(der));\n\t\telse if (type === 'public')\n\t\t\treturn (readPkcs1ECDSAPublic(der));\n\t\tthrow (new Error('Unknown key type: ' + type));\n\tcase 'EDDSA':\n\tcase 'EdDSA':\n\t\tif (type === 'private')\n\t\t\treturn (readPkcs1EdDSAPrivate(der));\n\t\tthrow (new Error(type + ' keys not supported with EdDSA'));\n\tdefault:\n\t\tthrow (new Error('Unknown key algo: ' + alg));\n\t}\n}\n\nfunction readPkcs1RSAPublic(der) {\n\t// modulus and exponent\n\tvar n = readMPInt(der, 'modulus');\n\tvar e = readMPInt(der, 'exponent');\n\n\t// now, make the key\n\tvar key = {\n\t\ttype: 'rsa',\n\t\tparts: [\n\t\t\t{ name: 'e', data: e },\n\t\t\t{ name: 'n', data: n }\n\t\t]\n\t};\n\n\treturn (new Key(key));\n}\n\nfunction readPkcs1RSAPrivate(der) {\n\tvar version = readMPInt(der, 'version');\n\tassert.strictEqual(version[0], 0);\n\n\t// modulus then public exponent\n\tvar n = readMPInt(der, 'modulus');\n\tvar e = readMPInt(der, 'public exponent');\n\tvar d = readMPInt(der, 'private exponent');\n\tvar p = readMPInt(der, 'prime1');\n\tvar q = readMPInt(der, 'prime2');\n\tvar dmodp = readMPInt(der, 'exponent1');\n\tvar dmodq = readMPInt(der, 'exponent2');\n\tvar iqmp = readMPInt(der, 'iqmp');\n\n\t// now, make the key\n\tvar key = {\n\t\ttype: 'rsa',\n\t\tparts: [\n\t\t\t{ name: 'n', data: n },\n\t\t\t{ name: 'e', data: e },\n\t\t\t{ name: 'd', data: d },\n\t\t\t{ name: 'iqmp', data: iqmp },\n\t\t\t{ name: 'p', data: p },\n\t\t\t{ name: 'q', data: q },\n\t\t\t{ name: 'dmodp', data: dmodp },\n\t\t\t{ name: 'dmodq', data: dmodq }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction readPkcs1DSAPrivate(der) {\n\tvar version = readMPInt(der, 'version');\n\tassert.strictEqual(version.readUInt8(0), 0);\n\n\tvar p = readMPInt(der, 'p');\n\tvar q = readMPInt(der, 'q');\n\tvar g = readMPInt(der, 'g');\n\tvar y = readMPInt(der, 'y');\n\tvar x = readMPInt(der, 'x');\n\n\t// now, make the key\n\tvar key = {\n\t\ttype: 'dsa',\n\t\tparts: [\n\t\t\t{ name: 'p', data: p },\n\t\t\t{ name: 'q', data: q },\n\t\t\t{ name: 'g', data: g },\n\t\t\t{ name: 'y', data: y },\n\t\t\t{ name: 'x', data: x }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction readPkcs1EdDSAPrivate(der) {\n\tvar version = readMPInt(der, 'version');\n\tassert.strictEqual(version.readUInt8(0), 1);\n\n\t// private key\n\tvar k = der.readString(asn1.Ber.OctetString, true);\n\n\tder.readSequence(0xa0);\n\tvar oid = der.readOID();\n\tassert.strictEqual(oid, '1.3.101.112', 'the ed25519 curve identifier');\n\n\tder.readSequence(0xa1);\n\tvar A = utils.readBitString(der);\n\n\tvar key = {\n\t\ttype: 'ed25519',\n\t\tparts: [\n\t\t\t{ name: 'A', data: utils.zeroPadToLength(A, 32) },\n\t\t\t{ name: 'k', data: k }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction readPkcs1DSAPublic(der) {\n\tvar y = readMPInt(der, 'y');\n\tvar p = readMPInt(der, 'p');\n\tvar q = readMPInt(der, 'q');\n\tvar g = readMPInt(der, 'g');\n\n\tvar key = {\n\t\ttype: 'dsa',\n\t\tparts: [\n\t\t\t{ name: 'y', data: y },\n\t\t\t{ name: 'p', data: p },\n\t\t\t{ name: 'q', data: q },\n\t\t\t{ name: 'g', data: g }\n\t\t]\n\t};\n\n\treturn (new Key(key));\n}\n\nfunction readPkcs1ECDSAPublic(der) {\n\tder.readSequence();\n\n\tvar oid = der.readOID();\n\tassert.strictEqual(oid, '1.2.840.10045.2.1', 'must be ecPublicKey');\n\n\tvar curveOid = der.readOID();\n\n\tvar curve;\n\tvar curves = Object.keys(algs.curves);\n\tfor (var j = 0; j < curves.length; ++j) {\n\t\tvar c = curves[j];\n\t\tvar cd = algs.curves[c];\n\t\tif (cd.pkcs8oid === curveOid) {\n\t\t\tcurve = c;\n\t\t\tbreak;\n\t\t}\n\t}\n\tassert.string(curve, 'a known ECDSA named curve');\n\n\tvar Q = der.readString(asn1.Ber.BitString, true);\n\tQ = utils.ecNormalize(Q);\n\n\tvar key = {\n\t\ttype: 'ecdsa',\n\t\tparts: [\n\t\t\t{ name: 'curve', data: Buffer.from(curve) },\n\t\t\t{ name: 'Q', data: Q }\n\t\t]\n\t};\n\n\treturn (new Key(key));\n}\n\nfunction readPkcs1ECDSAPrivate(der) {\n\tvar version = readMPInt(der, 'version');\n\tassert.strictEqual(version.readUInt8(0), 1);\n\n\t// private key\n\tvar d = der.readString(asn1.Ber.OctetString, true);\n\n\tder.readSequence(0xa0);\n\tvar curve = readECDSACurve(der);\n\tassert.string(curve, 'a known elliptic curve');\n\n\tder.readSequence(0xa1);\n\tvar Q = der.readString(asn1.Ber.BitString, true);\n\tQ = utils.ecNormalize(Q);\n\n\tvar key = {\n\t\ttype: 'ecdsa',\n\t\tparts: [\n\t\t\t{ name: 'curve', data: Buffer.from(curve) },\n\t\t\t{ name: 'Q', data: Q },\n\t\t\t{ name: 'd', data: d }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction writePkcs1(der, key) {\n\tder.startSequence();\n\n\tswitch (key.type) {\n\tcase 'rsa':\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\twritePkcs1RSAPrivate(der, key);\n\t\telse\n\t\t\twritePkcs1RSAPublic(der, key);\n\t\tbreak;\n\tcase 'dsa':\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\twritePkcs1DSAPrivate(der, key);\n\t\telse\n\t\t\twritePkcs1DSAPublic(der, key);\n\t\tbreak;\n\tcase 'ecdsa':\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\twritePkcs1ECDSAPrivate(der, key);\n\t\telse\n\t\t\twritePkcs1ECDSAPublic(der, key);\n\t\tbreak;\n\tcase 'ed25519':\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\twritePkcs1EdDSAPrivate(der, key);\n\t\telse\n\t\t\twritePkcs1EdDSAPublic(der, key);\n\t\tbreak;\n\tdefault:\n\t\tthrow (new Error('Unknown key algo: ' + key.type));\n\t}\n\n\tder.endSequence();\n}\n\nfunction writePkcs1RSAPublic(der, key) {\n\tder.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n}\n\nfunction writePkcs1RSAPrivate(der, key) {\n\tvar ver = Buffer.from([0]);\n\tder.writeBuffer(ver, asn1.Ber.Integer);\n\n\tder.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.d.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n\tif (!key.part.dmodp || !key.part.dmodq)\n\t\tutils.addRSAMissing(key);\n\tder.writeBuffer(key.part.dmodp.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.dmodq.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.iqmp.data, asn1.Ber.Integer);\n}\n\nfunction writePkcs1DSAPrivate(der, key) {\n\tvar ver = Buffer.from([0]);\n\tder.writeBuffer(ver, asn1.Ber.Integer);\n\n\tder.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.y.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.x.data, asn1.Ber.Integer);\n}\n\nfunction writePkcs1DSAPublic(der, key) {\n\tder.writeBuffer(key.part.y.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n}\n\nfunction writePkcs1ECDSAPublic(der, key) {\n\tder.startSequence();\n\n\tder.writeOID('1.2.840.10045.2.1'); /* ecPublicKey */\n\tvar curve = key.part.curve.data.toString();\n\tvar curveOid = algs.curves[curve].pkcs8oid;\n\tassert.string(curveOid, 'a known ECDSA named curve');\n\tder.writeOID(curveOid);\n\n\tder.endSequence();\n\n\tvar Q = utils.ecNormalize(key.part.Q.data, true);\n\tder.writeBuffer(Q, asn1.Ber.BitString);\n}\n\nfunction writePkcs1ECDSAPrivate(der, key) {\n\tvar ver = Buffer.from([1]);\n\tder.writeBuffer(ver, asn1.Ber.Integer);\n\n\tder.writeBuffer(key.part.d.data, asn1.Ber.OctetString);\n\n\tder.startSequence(0xa0);\n\tvar curve = key.part.curve.data.toString();\n\tvar curveOid = algs.curves[curve].pkcs8oid;\n\tassert.string(curveOid, 'a known ECDSA named curve');\n\tder.writeOID(curveOid);\n\tder.endSequence();\n\n\tder.startSequence(0xa1);\n\tvar Q = utils.ecNormalize(key.part.Q.data, true);\n\tder.writeBuffer(Q, asn1.Ber.BitString);\n\tder.endSequence();\n}\n\nfunction writePkcs1EdDSAPrivate(der, key) {\n\tvar ver = Buffer.from([1]);\n\tder.writeBuffer(ver, asn1.Ber.Integer);\n\n\tder.writeBuffer(key.part.k.data, asn1.Ber.OctetString);\n\n\tder.startSequence(0xa0);\n\tder.writeOID('1.3.101.112');\n\tder.endSequence();\n\n\tder.startSequence(0xa1);\n\tutils.writeBitString(der, key.part.A.data);\n\tder.endSequence();\n}\n\nfunction writePkcs1EdDSAPublic(der, key) {\n\tthrow (new Error('Public keys are not supported for EdDSA PKCS#1'));\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2416, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2421, "column": 0}, "map": {"version":3,"sources":["file:///Users/monz/Code/queue/frontend/node_modules/sshpk/lib/formats/rfc4253.js"],"sourcesContent":["// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n\tread: read.bind(undefined, false, undefined),\n\treadType: read.bind(undefined, false),\n\twrite: write,\n\t/* semi-private api, used by sshpk-agent */\n\treadPartial: read.bind(undefined, true),\n\n\t/* shared with ssh format */\n\treadInternal: read,\n\tkeyTypeToAlg: keyTypeToAlg,\n\talgToKeyType: algToKeyType\n};\n\nvar assert = require('assert-plus');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('../algs');\nvar utils = require('../utils');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar SSHBuffer = require('../ssh-buffer');\n\nfunction algToKeyType(alg) {\n\tassert.string(alg);\n\tif (alg === 'ssh-dss')\n\t\treturn ('dsa');\n\telse if (alg === 'ssh-rsa')\n\t\treturn ('rsa');\n\telse if (alg === 'ssh-ed25519')\n\t\treturn ('ed25519');\n\telse if (alg === 'ssh-curve25519')\n\t\treturn ('curve25519');\n\telse if (alg.match(/^ecdsa-sha2-/))\n\t\treturn ('ecdsa');\n\telse\n\t\tthrow (new Error('Unknown algorithm ' + alg));\n}\n\nfunction keyTypeToAlg(key) {\n\tassert.object(key);\n\tif (key.type === 'dsa')\n\t\treturn ('ssh-dss');\n\telse if (key.type === 'rsa')\n\t\treturn ('ssh-rsa');\n\telse if (key.type === 'ed25519')\n\t\treturn ('ssh-ed25519');\n\telse if (key.type === 'curve25519')\n\t\treturn ('ssh-curve25519');\n\telse if (key.type === 'ecdsa')\n\t\treturn ('ecdsa-sha2-' + key.part.curve.data.toString());\n\telse\n\t\tthrow (new Error('Unknown key type ' + key.type));\n}\n\nfunction read(partial, type, buf, options) {\n\tif (typeof (buf) === 'string')\n\t\tbuf = Buffer.from(buf);\n\tassert.buffer(buf, 'buf');\n\n\tvar key = {};\n\n\tvar parts = key.parts = [];\n\tvar sshbuf = new SSHBuffer({buffer: buf});\n\n\tvar alg = sshbuf.readString();\n\tassert.ok(!sshbuf.atEnd(), 'key must have at least one part');\n\n\tkey.type = algToKeyType(alg);\n\n\tvar partCount = algs.info[key.type].parts.length;\n\tif (type && type === 'private')\n\t\tpartCount = algs.privInfo[key.type].parts.length;\n\n\twhile (!sshbuf.atEnd() && parts.length < partCount)\n\t\tparts.push(sshbuf.readPart());\n\twhile (!partial && !sshbuf.atEnd())\n\t\tparts.push(sshbuf.readPart());\n\n\tassert.ok(parts.length >= 1,\n\t    'key must have at least one part');\n\tassert.ok(partial || sshbuf.atEnd(),\n\t    'leftover bytes at end of key');\n\n\tvar Constructor = Key;\n\tvar algInfo = algs.info[key.type];\n\tif (type === 'private' || algInfo.parts.length !== parts.length) {\n\t\talgInfo = algs.privInfo[key.type];\n\t\tConstructor = PrivateKey;\n\t}\n\tassert.strictEqual(algInfo.parts.length, parts.length);\n\n\tif (key.type === 'ecdsa') {\n\t\tvar res = /^ecdsa-sha2-(.+)$/.exec(alg);\n\t\tassert.ok(res !== null);\n\t\tassert.strictEqual(res[1], parts[0].data.toString());\n\t}\n\n\tvar normalized = true;\n\tfor (var i = 0; i < algInfo.parts.length; ++i) {\n\t\tvar p = parts[i];\n\t\tp.name = algInfo.parts[i];\n\t\t/*\n\t\t * OpenSSH stores ed25519 \"private\" keys as seed + public key\n\t\t * concat'd together (k followed by A). We want to keep them\n\t\t * separate for other formats that don't do this.\n\t\t */\n\t\tif (key.type === 'ed25519' && p.name === 'k')\n\t\t\tp.data = p.data.slice(0, 32);\n\n\t\tif (p.name !== 'curve' && algInfo.normalize !== false) {\n\t\t\tvar nd;\n\t\t\tif (key.type === 'ed25519') {\n\t\t\t\tnd = utils.zeroPadToLength(p.data, 32);\n\t\t\t} else {\n\t\t\t\tnd = utils.mpNormalize(p.data);\n\t\t\t}\n\t\t\tif (nd.toString('binary') !==\n\t\t\t    p.data.toString('binary')) {\n\t\t\t\tp.data = nd;\n\t\t\t\tnormalized = false;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (normalized)\n\t\tkey._rfc4253Cache = sshbuf.toBuffer();\n\n\tif (partial && typeof (partial) === 'object') {\n\t\tpartial.remainder = sshbuf.remainder();\n\t\tpartial.consumed = sshbuf._offset;\n\t}\n\n\treturn (new Constructor(key));\n}\n\nfunction write(key, options) {\n\tassert.object(key);\n\n\tvar alg = keyTypeToAlg(key);\n\tvar i;\n\n\tvar algInfo = algs.info[key.type];\n\tif (PrivateKey.isPrivateKey(key))\n\t\talgInfo = algs.privInfo[key.type];\n\tvar parts = algInfo.parts;\n\n\tvar buf = new SSHBuffer({});\n\n\tbuf.writeString(alg);\n\n\tfor (i = 0; i < parts.length; ++i) {\n\t\tvar data = key.part[parts[i]].data;\n\t\tif (algInfo.normalize !== false) {\n\t\t\tif (key.type === 'ed25519')\n\t\t\t\tdata = utils.zeroPadToLength(data, 32);\n\t\t\telse\n\t\t\t\tdata = utils.mpNormalize(data);\n\t\t}\n\t\tif (key.type === 'ed25519' && parts[i] === 'k')\n\t\t\tdata = Buffer.concat([data, key.part.A.data]);\n\t\tbuf.writeBuffer(data);\n\t}\n\n\treturn (buf.toBuffer());\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2537, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2542, "column": 0}, "map": {"version":3,"sources":["file:///Users/monz/Code/queue/frontend/node_modules/sshpk/lib/formats/ssh-private.js"],"sourcesContent":["// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\treadSSHPrivate: readSSHPrivate,\n\twrite: write\n};\n\nvar assert = require('assert-plus');\nvar asn1 = require('asn1');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('../algs');\nvar utils = require('../utils');\nvar crypto = require('crypto');\n\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar pem = require('./pem');\nvar rfc4253 = require('./rfc4253');\nvar SSHBuffer = require('../ssh-buffer');\nvar errors = require('../errors');\n\nvar bcrypt;\n\nfunction read(buf, options) {\n\treturn (pem.read(buf, options));\n}\n\nvar MAGIC = 'openssh-key-v1';\n\nfunction readSSHPrivate(type, buf, options) {\n\tbuf = new SSHBuffer({buffer: buf});\n\n\tvar magic = buf.readCString();\n\tassert.strictEqual(magic, MAGIC, 'bad magic string');\n\n\tvar cipher = buf.readString();\n\tvar kdf = buf.readString();\n\tvar kdfOpts = buf.readBuffer();\n\n\tvar nkeys = buf.readInt();\n\tif (nkeys !== 1) {\n\t\tthrow (new Error('OpenSSH-format key file contains ' +\n\t\t    'multiple keys: this is unsupported.'));\n\t}\n\n\tvar pubKey = buf.readBuffer();\n\n\tif (type === 'public') {\n\t\tassert.ok(buf.atEnd(), 'excess bytes left after key');\n\t\treturn (rfc4253.read(pubKey));\n\t}\n\n\tvar privKeyBlob = buf.readBuffer();\n\tassert.ok(buf.atEnd(), 'excess bytes left after key');\n\n\tvar kdfOptsBuf = new SSHBuffer({ buffer: kdfOpts });\n\tswitch (kdf) {\n\tcase 'none':\n\t\tif (cipher !== 'none') {\n\t\t\tthrow (new Error('OpenSSH-format key uses KDF \"none\" ' +\n\t\t\t     'but specifies a cipher other than \"none\"'));\n\t\t}\n\t\tbreak;\n\tcase 'bcrypt':\n\t\tvar salt = kdfOptsBuf.readBuffer();\n\t\tvar rounds = kdfOptsBuf.readInt();\n\t\tvar cinf = utils.opensshCipherInfo(cipher);\n\t\tif (bcrypt === undefined) {\n\t\t\tbcrypt = require('bcrypt-pbkdf');\n\t\t}\n\n\t\tif (typeof (options.passphrase) === 'string') {\n\t\t\toptions.passphrase = Buffer.from(options.passphrase,\n\t\t\t    'utf-8');\n\t\t}\n\t\tif (!Buffer.isBuffer(options.passphrase)) {\n\t\t\tthrow (new errors.KeyEncryptedError(\n\t\t\t    options.filename, 'OpenSSH'));\n\t\t}\n\n\t\tvar pass = new Uint8Array(options.passphrase);\n\t\tvar salti = new Uint8Array(salt);\n\t\t/* Use the pbkdf to derive both the key and the IV. */\n\t\tvar out = new Uint8Array(cinf.keySize + cinf.blockSize);\n\t\tvar res = bcrypt.pbkdf(pass, pass.length, salti, salti.length,\n\t\t    out, out.length, rounds);\n\t\tif (res !== 0) {\n\t\t\tthrow (new Error('bcrypt_pbkdf function returned ' +\n\t\t\t    'failure, parameters invalid'));\n\t\t}\n\t\tout = Buffer.from(out);\n\t\tvar ckey = out.slice(0, cinf.keySize);\n\t\tvar iv = out.slice(cinf.keySize, cinf.keySize + cinf.blockSize);\n\t\tvar cipherStream = crypto.createDecipheriv(cinf.opensslName,\n\t\t    ckey, iv);\n\t\tcipherStream.setAutoPadding(false);\n\t\tvar chunk, chunks = [];\n\t\tcipherStream.once('error', function (e) {\n\t\t\tif (e.toString().indexOf('bad decrypt') !== -1) {\n\t\t\t\tthrow (new Error('Incorrect passphrase ' +\n\t\t\t\t    'supplied, could not decrypt key'));\n\t\t\t}\n\t\t\tthrow (e);\n\t\t});\n\t\tcipherStream.write(privKeyBlob);\n\t\tcipherStream.end();\n\t\twhile ((chunk = cipherStream.read()) !== null)\n\t\t\tchunks.push(chunk);\n\t\tprivKeyBlob = Buffer.concat(chunks);\n\t\tbreak;\n\tdefault:\n\t\tthrow (new Error(\n\t\t    'OpenSSH-format key uses unknown KDF \"' + kdf + '\"'));\n\t}\n\n\tbuf = new SSHBuffer({buffer: privKeyBlob});\n\n\tvar checkInt1 = buf.readInt();\n\tvar checkInt2 = buf.readInt();\n\tif (checkInt1 !== checkInt2) {\n\t\tthrow (new Error('Incorrect passphrase supplied, could not ' +\n\t\t    'decrypt key'));\n\t}\n\n\tvar ret = {};\n\tvar key = rfc4253.readInternal(ret, 'private', buf.remainder());\n\n\tbuf.skip(ret.consumed);\n\n\tvar comment = buf.readString();\n\tkey.comment = comment;\n\n\treturn (key);\n}\n\nfunction write(key, options) {\n\tvar pubKey;\n\tif (PrivateKey.isPrivateKey(key))\n\t\tpubKey = key.toPublic();\n\telse\n\t\tpubKey = key;\n\n\tvar cipher = 'none';\n\tvar kdf = 'none';\n\tvar kdfopts = Buffer.alloc(0);\n\tvar cinf = { blockSize: 8 };\n\tvar passphrase;\n\tif (options !== undefined) {\n\t\tpassphrase = options.passphrase;\n\t\tif (typeof (passphrase) === 'string')\n\t\t\tpassphrase = Buffer.from(passphrase, 'utf-8');\n\t\tif (passphrase !== undefined) {\n\t\t\tassert.buffer(passphrase, 'options.passphrase');\n\t\t\tassert.optionalString(options.cipher, 'options.cipher');\n\t\t\tcipher = options.cipher;\n\t\t\tif (cipher === undefined)\n\t\t\t\tcipher = 'aes128-ctr';\n\t\t\tcinf = utils.opensshCipherInfo(cipher);\n\t\t\tkdf = 'bcrypt';\n\t\t}\n\t}\n\n\tvar privBuf;\n\tif (PrivateKey.isPrivateKey(key)) {\n\t\tprivBuf = new SSHBuffer({});\n\t\tvar checkInt = crypto.randomBytes(4).readUInt32BE(0);\n\t\tprivBuf.writeInt(checkInt);\n\t\tprivBuf.writeInt(checkInt);\n\t\tprivBuf.write(key.toBuffer('rfc4253'));\n\t\tprivBuf.writeString(key.comment || '');\n\n\t\tvar n = 1;\n\t\twhile (privBuf._offset % cinf.blockSize !== 0)\n\t\t\tprivBuf.writeChar(n++);\n\t\tprivBuf = privBuf.toBuffer();\n\t}\n\n\tswitch (kdf) {\n\tcase 'none':\n\t\tbreak;\n\tcase 'bcrypt':\n\t\tvar salt = crypto.randomBytes(16);\n\t\tvar rounds = 16;\n\t\tvar kdfssh = new SSHBuffer({});\n\t\tkdfssh.writeBuffer(salt);\n\t\tkdfssh.writeInt(rounds);\n\t\tkdfopts = kdfssh.toBuffer();\n\n\t\tif (bcrypt === undefined) {\n\t\t\tbcrypt = require('bcrypt-pbkdf');\n\t\t}\n\t\tvar pass = new Uint8Array(passphrase);\n\t\tvar salti = new Uint8Array(salt);\n\t\t/* Use the pbkdf to derive both the key and the IV. */\n\t\tvar out = new Uint8Array(cinf.keySize + cinf.blockSize);\n\t\tvar res = bcrypt.pbkdf(pass, pass.length, salti, salti.length,\n\t\t    out, out.length, rounds);\n\t\tif (res !== 0) {\n\t\t\tthrow (new Error('bcrypt_pbkdf function returned ' +\n\t\t\t    'failure, parameters invalid'));\n\t\t}\n\t\tout = Buffer.from(out);\n\t\tvar ckey = out.slice(0, cinf.keySize);\n\t\tvar iv = out.slice(cinf.keySize, cinf.keySize + cinf.blockSize);\n\n\t\tvar cipherStream = crypto.createCipheriv(cinf.opensslName,\n\t\t    ckey, iv);\n\t\tcipherStream.setAutoPadding(false);\n\t\tvar chunk, chunks = [];\n\t\tcipherStream.once('error', function (e) {\n\t\t\tthrow (e);\n\t\t});\n\t\tcipherStream.write(privBuf);\n\t\tcipherStream.end();\n\t\twhile ((chunk = cipherStream.read()) !== null)\n\t\t\tchunks.push(chunk);\n\t\tprivBuf = Buffer.concat(chunks);\n\t\tbreak;\n\tdefault:\n\t\tthrow (new Error('Unsupported kdf ' + kdf));\n\t}\n\n\tvar buf = new SSHBuffer({});\n\n\tbuf.writeCString(MAGIC);\n\tbuf.writeString(cipher);\t/* cipher */\n\tbuf.writeString(kdf);\t\t/* kdf */\n\tbuf.writeBuffer(kdfopts);\t/* kdfoptions */\n\n\tbuf.writeInt(1);\t\t/* nkeys */\n\tbuf.writeBuffer(pubKey.toBuffer('rfc4253'));\n\n\tif (privBuf)\n\t\tbuf.writeBuffer(privBuf);\n\n\tbuf = buf.toBuffer();\n\n\tvar header;\n\tif (PrivateKey.isPrivateKey(key))\n\t\theader = 'OPENSSH PRIVATE KEY';\n\telse\n\t\theader = 'OPENSSH PUBLIC KEY';\n\n\tvar tmp = buf.toString('base64');\n\tvar len = tmp.length + (tmp.length / 70) +\n\t    18 + 16 + header.length*2 + 10;\n\tbuf = Buffer.alloc(len);\n\tvar o = 0;\n\to += buf.write('-----BEGIN ' + header + '-----\\n', o);\n\tfor (var i = 0; i < tmp.length; ) {\n\t\tvar limit = i + 70;\n\t\tif (limit > tmp.length)\n\t\t\tlimit = tmp.length;\n\t\to += buf.write(tmp.slice(i, limit), o);\n\t\tbuf[o++] = 10;\n\t\ti = limit;\n\t}\n\to += buf.write('-----END ' + header + '-----\\n', o);\n\n\treturn (buf.slice(0, o));\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2748, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2753, "column": 0}, "map": {"version":3,"sources":["file:///Users/monz/Code/queue/frontend/node_modules/sshpk/lib/formats/pem.js"],"sourcesContent":["// Copyright 2018 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\twrite: write\n};\n\nvar assert = require('assert-plus');\nvar asn1 = require('asn1');\nvar crypto = require('crypto');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('../algs');\nvar utils = require('../utils');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\n\nvar pkcs1 = require('./pkcs1');\nvar pkcs8 = require('./pkcs8');\nvar sshpriv = require('./ssh-private');\nvar rfc4253 = require('./rfc4253');\n\nvar errors = require('../errors');\n\nvar OID_PBES2 = '1.2.840.113549.1.5.13';\nvar OID_PBKDF2 = '1.2.840.113549.1.5.12';\n\nvar OID_TO_CIPHER = {\n\t'1.2.840.113549.3.7': '3des-cbc',\n\t'2.16.840.1.101.3.4.1.2': 'aes128-cbc',\n\t'2.16.840.1.101.3.4.1.42': 'aes256-cbc'\n};\nvar CIPHER_TO_OID = {};\nObject.keys(OID_TO_CIPHER).forEach(function (k) {\n\tCIPHER_TO_OID[OID_TO_CIPHER[k]] = k;\n});\n\nvar OID_TO_HASH = {\n\t'1.2.840.113549.2.7': 'sha1',\n\t'1.2.840.113549.2.9': 'sha256',\n\t'1.2.840.113549.2.11': 'sha512'\n};\nvar HASH_TO_OID = {};\nObject.keys(OID_TO_HASH).forEach(function (k) {\n\tHASH_TO_OID[OID_TO_HASH[k]] = k;\n});\n\n/*\n * For reading we support both PKCS#1 and PKCS#8. If we find a private key,\n * we just take the public component of it and use that.\n */\nfunction read(buf, options, forceType) {\n\tvar input = buf;\n\tif (typeof (buf) !== 'string') {\n\t\tassert.buffer(buf, 'buf');\n\t\tbuf = buf.toString('ascii');\n\t}\n\n\tvar lines = buf.trim().split(/[\\r\\n]+/g);\n\n\tvar m;\n\tvar si = -1;\n\twhile (!m && si < lines.length) {\n\t\tm = lines[++si].match(/*JSSTYLED*/\n\t\t    /[-]+[ ]*BEGIN ([A-Z0-9][A-Za-z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);\n\t}\n\tassert.ok(m, 'invalid PEM header');\n\n\tvar m2;\n\tvar ei = lines.length;\n\twhile (!m2 && ei > 0) {\n\t\tm2 = lines[--ei].match(/*JSSTYLED*/\n\t\t    /[-]+[ ]*END ([A-Z0-9][A-Za-z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);\n\t}\n\tassert.ok(m2, 'invalid PEM footer');\n\n\t/* Begin and end banners must match key type */\n\tassert.equal(m[2], m2[2]);\n\tvar type = m[2].toLowerCase();\n\n\tvar alg;\n\tif (m[1]) {\n\t\t/* They also must match algorithms, if given */\n\t\tassert.equal(m[1], m2[1], 'PEM header and footer mismatch');\n\t\talg = m[1].trim();\n\t}\n\n\tlines = lines.slice(si, ei + 1);\n\n\tvar headers = {};\n\twhile (true) {\n\t\tlines = lines.slice(1);\n\t\tm = lines[0].match(/*JSSTYLED*/\n\t\t    /^([A-Za-z0-9-]+): (.+)$/);\n\t\tif (!m)\n\t\t\tbreak;\n\t\theaders[m[1].toLowerCase()] = m[2];\n\t}\n\n\t/* Chop off the first and last lines */\n\tlines = lines.slice(0, -1).join('');\n\tbuf = Buffer.from(lines, 'base64');\n\n\tvar cipher, key, iv;\n\tif (headers['proc-type']) {\n\t\tvar parts = headers['proc-type'].split(',');\n\t\tif (parts[0] === '4' && parts[1] === 'ENCRYPTED') {\n\t\t\tif (typeof (options.passphrase) === 'string') {\n\t\t\t\toptions.passphrase = Buffer.from(\n\t\t\t\t    options.passphrase, 'utf-8');\n\t\t\t}\n\t\t\tif (!Buffer.isBuffer(options.passphrase)) {\n\t\t\t\tthrow (new errors.KeyEncryptedError(\n\t\t\t\t    options.filename, 'PEM'));\n\t\t\t} else {\n\t\t\t\tparts = headers['dek-info'].split(',');\n\t\t\t\tassert.ok(parts.length === 2);\n\t\t\t\tcipher = parts[0].toLowerCase();\n\t\t\t\tiv = Buffer.from(parts[1], 'hex');\n\t\t\t\tkey = utils.opensslKeyDeriv(cipher, iv,\n\t\t\t\t    options.passphrase, 1).key;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (alg && alg.toLowerCase() === 'encrypted') {\n\t\tvar eder = new asn1.BerReader(buf);\n\t\tvar pbesEnd;\n\t\teder.readSequence();\n\n\t\teder.readSequence();\n\t\tpbesEnd = eder.offset + eder.length;\n\n\t\tvar method = eder.readOID();\n\t\tif (method !== OID_PBES2) {\n\t\t\tthrow (new Error('Unsupported PEM/PKCS8 encryption ' +\n\t\t\t    'scheme: ' + method));\n\t\t}\n\n\t\teder.readSequence();\t/* PBES2-params */\n\n\t\teder.readSequence();\t/* keyDerivationFunc */\n\t\tvar kdfEnd = eder.offset + eder.length;\n\t\tvar kdfOid = eder.readOID();\n\t\tif (kdfOid !== OID_PBKDF2)\n\t\t\tthrow (new Error('Unsupported PBES2 KDF: ' + kdfOid));\n\t\teder.readSequence();\n\t\tvar salt = eder.readString(asn1.Ber.OctetString, true);\n\t\tvar iterations = eder.readInt();\n\t\tvar hashAlg = 'sha1';\n\t\tif (eder.offset < kdfEnd) {\n\t\t\teder.readSequence();\n\t\t\tvar hashAlgOid = eder.readOID();\n\t\t\thashAlg = OID_TO_HASH[hashAlgOid];\n\t\t\tif (hashAlg === undefined) {\n\t\t\t\tthrow (new Error('Unsupported PBKDF2 hash: ' +\n\t\t\t\t    hashAlgOid));\n\t\t\t}\n\t\t}\n\t\teder._offset = kdfEnd;\n\n\t\teder.readSequence();\t/* encryptionScheme */\n\t\tvar cipherOid = eder.readOID();\n\t\tcipher = OID_TO_CIPHER[cipherOid];\n\t\tif (cipher === undefined) {\n\t\t\tthrow (new Error('Unsupported PBES2 cipher: ' +\n\t\t\t    cipherOid));\n\t\t}\n\t\tiv = eder.readString(asn1.Ber.OctetString, true);\n\n\t\teder._offset = pbesEnd;\n\t\tbuf = eder.readString(asn1.Ber.OctetString, true);\n\n\t\tif (typeof (options.passphrase) === 'string') {\n\t\t\toptions.passphrase = Buffer.from(\n\t\t\t    options.passphrase, 'utf-8');\n\t\t}\n\t\tif (!Buffer.isBuffer(options.passphrase)) {\n\t\t\tthrow (new errors.KeyEncryptedError(\n\t\t\t    options.filename, 'PEM'));\n\t\t}\n\n\t\tvar cinfo = utils.opensshCipherInfo(cipher);\n\n\t\tcipher = cinfo.opensslName;\n\t\tkey = utils.pbkdf2(hashAlg, salt, iterations, cinfo.keySize,\n\t\t    options.passphrase);\n\t\talg = undefined;\n\t}\n\n\tif (cipher && key && iv) {\n\t\tvar cipherStream = crypto.createDecipheriv(cipher, key, iv);\n\t\tvar chunk, chunks = [];\n\t\tcipherStream.once('error', function (e) {\n\t\t\tif (e.toString().indexOf('bad decrypt') !== -1) {\n\t\t\t\tthrow (new Error('Incorrect passphrase ' +\n\t\t\t\t    'supplied, could not decrypt key'));\n\t\t\t}\n\t\t\tthrow (e);\n\t\t});\n\t\tcipherStream.write(buf);\n\t\tcipherStream.end();\n\t\twhile ((chunk = cipherStream.read()) !== null)\n\t\t\tchunks.push(chunk);\n\t\tbuf = Buffer.concat(chunks);\n\t}\n\n\t/* The new OpenSSH internal format abuses PEM headers */\n\tif (alg && alg.toLowerCase() === 'openssh')\n\t\treturn (sshpriv.readSSHPrivate(type, buf, options));\n\tif (alg && alg.toLowerCase() === 'ssh2')\n\t\treturn (rfc4253.readType(type, buf, options));\n\n\tvar der = new asn1.BerReader(buf);\n\tder.originalInput = input;\n\n\t/*\n\t * All of the PEM file types start with a sequence tag, so chop it\n\t * off here\n\t */\n\tder.readSequence();\n\n\t/* PKCS#1 type keys name an algorithm in the banner explicitly */\n\tif (alg) {\n\t\tif (forceType)\n\t\t\tassert.strictEqual(forceType, 'pkcs1');\n\t\treturn (pkcs1.readPkcs1(alg, type, der));\n\t} else {\n\t\tif (forceType)\n\t\t\tassert.strictEqual(forceType, 'pkcs8');\n\t\treturn (pkcs8.readPkcs8(alg, type, der));\n\t}\n}\n\nfunction write(key, options, type) {\n\tassert.object(key);\n\n\tvar alg = {\n\t    'ecdsa': 'EC',\n\t    'rsa': 'RSA',\n\t    'dsa': 'DSA',\n\t    'ed25519': 'EdDSA'\n\t}[key.type];\n\tvar header;\n\n\tvar der = new asn1.BerWriter();\n\n\tif (PrivateKey.isPrivateKey(key)) {\n\t\tif (type && type === 'pkcs8') {\n\t\t\theader = 'PRIVATE KEY';\n\t\t\tpkcs8.writePkcs8(der, key);\n\t\t} else {\n\t\t\tif (type)\n\t\t\t\tassert.strictEqual(type, 'pkcs1');\n\t\t\theader = alg + ' PRIVATE KEY';\n\t\t\tpkcs1.writePkcs1(der, key);\n\t\t}\n\n\t} else if (Key.isKey(key)) {\n\t\tif (type && type === 'pkcs1') {\n\t\t\theader = alg + ' PUBLIC KEY';\n\t\t\tpkcs1.writePkcs1(der, key);\n\t\t} else {\n\t\t\tif (type)\n\t\t\t\tassert.strictEqual(type, 'pkcs8');\n\t\t\theader = 'PUBLIC KEY';\n\t\t\tpkcs8.writePkcs8(der, key);\n\t\t}\n\n\t} else {\n\t\tthrow (new Error('key is not a Key or PrivateKey'));\n\t}\n\n\tvar tmp = der.buffer.toString('base64');\n\tvar len = tmp.length + (tmp.length / 64) +\n\t    18 + 16 + header.length*2 + 10;\n\tvar buf = Buffer.alloc(len);\n\tvar o = 0;\n\to += buf.write('-----BEGIN ' + header + '-----\\n', o);\n\tfor (var i = 0; i < tmp.length; ) {\n\t\tvar limit = i + 64;\n\t\tif (limit > tmp.length)\n\t\t\tlimit = tmp.length;\n\t\to += buf.write(tmp.slice(i, limit), o);\n\t\tbuf[o++] = 10;\n\t\ti = limit;\n\t}\n\to += buf.write('-----END ' + header + '-----\\n', o);\n\n\treturn (buf.slice(0, o));\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2972, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2977, "column": 0}, "map": {"version":3,"sources":["file:///Users/monz/Code/queue/frontend/node_modules/sshpk/lib/formats/ssh.js"],"sourcesContent":["// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\twrite: write\n};\n\nvar assert = require('assert-plus');\nvar Buffer = require('safer-buffer').Buffer;\nvar rfc4253 = require('./rfc4253');\nvar utils = require('../utils');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\n\nvar sshpriv = require('./ssh-private');\n\n/*JSSTYLED*/\nvar SSHKEY_RE = /^([a-z0-9-]+)[ \\t]+([a-zA-Z0-9+\\/]+[=]*)([ \\t]+([^ \\t][^\\n]*[\\n]*)?)?$/;\n/*JSSTYLED*/\nvar SSHKEY_RE2 = /^([a-z0-9-]+)[ \\t\\n]+([a-zA-Z0-9+\\/][a-zA-Z0-9+\\/ \\t\\n=]*)([^a-zA-Z0-9+\\/ \\t\\n=].*)?$/;\n\nfunction read(buf, options) {\n\tif (typeof (buf) !== 'string') {\n\t\tassert.buffer(buf, 'buf');\n\t\tbuf = buf.toString('ascii');\n\t}\n\n\tvar trimmed = buf.trim().replace(/[\\\\\\r]/g, '');\n\tvar m = trimmed.match(SSHKEY_RE);\n\tif (!m)\n\t\tm = trimmed.match(SSHKEY_RE2);\n\tassert.ok(m, 'key must match regex');\n\n\tvar type = rfc4253.algToKeyType(m[1]);\n\tvar kbuf = Buffer.from(m[2], 'base64');\n\n\t/*\n\t * This is a bit tricky. If we managed to parse the key and locate the\n\t * key comment with the regex, then do a non-partial read and assert\n\t * that we have consumed all bytes. If we couldn't locate the key\n\t * comment, though, there may be whitespace shenanigans going on that\n\t * have conjoined the comment to the rest of the key. We do a partial\n\t * read in this case to try to make the best out of a sorry situation.\n\t */\n\tvar key;\n\tvar ret = {};\n\tif (m[4]) {\n\t\ttry {\n\t\t\tkey = rfc4253.read(kbuf);\n\n\t\t} catch (e) {\n\t\t\tm = trimmed.match(SSHKEY_RE2);\n\t\t\tassert.ok(m, 'key must match regex');\n\t\t\tkbuf = Buffer.from(m[2], 'base64');\n\t\t\tkey = rfc4253.readInternal(ret, 'public', kbuf);\n\t\t}\n\t} else {\n\t\tkey = rfc4253.readInternal(ret, 'public', kbuf);\n\t}\n\n\tassert.strictEqual(type, key.type);\n\n\tif (m[4] && m[4].length > 0) {\n\t\tkey.comment = m[4];\n\n\t} else if (ret.consumed) {\n\t\t/*\n\t\t * Now the magic: trying to recover the key comment when it's\n\t\t * gotten conjoined to the key or otherwise shenanigan'd.\n\t\t *\n\t\t * Work out how much base64 we used, then drop all non-base64\n\t\t * chars from the beginning up to this point in the the string.\n\t\t * Then offset in this and try to make up for missing = chars.\n\t\t */\n\t\tvar data = m[2] + (m[3] ? m[3] : '');\n\t\tvar realOffset = Math.ceil(ret.consumed / 3) * 4;\n\t\tdata = data.slice(0, realOffset - 2). /*JSSTYLED*/\n\t\t    replace(/[^a-zA-Z0-9+\\/=]/g, '') +\n\t\t    data.slice(realOffset - 2);\n\n\t\tvar padding = ret.consumed % 3;\n\t\tif (padding > 0 &&\n\t\t    data.slice(realOffset - 1, realOffset) !== '=')\n\t\t\trealOffset--;\n\t\twhile (data.slice(realOffset, realOffset + 1) === '=')\n\t\t\trealOffset++;\n\n\t\t/* Finally, grab what we think is the comment & clean it up. */\n\t\tvar trailer = data.slice(realOffset);\n\t\ttrailer = trailer.replace(/[\\r\\n]/g, ' ').\n\t\t    replace(/^\\s+/, '');\n\t\tif (trailer.match(/^[a-zA-Z0-9]/))\n\t\t\tkey.comment = trailer;\n\t}\n\n\treturn (key);\n}\n\nfunction write(key, options) {\n\tassert.object(key);\n\tif (!Key.isKey(key))\n\t\tthrow (new Error('Must be a public key'));\n\n\tvar parts = [];\n\tvar alg = rfc4253.keyTypeToAlg(key);\n\tparts.push(alg);\n\n\tvar buf = rfc4253.write(key);\n\tparts.push(buf.toString('base64'));\n\n\tif (key.comment)\n\t\tparts.push(key.comment);\n\n\treturn (Buffer.from(parts.join(' ')));\n}\n"],"names":[],"mappings":"AAAA,8BAA8B;AAE9B,OAAO,OAAO,GAAG;IAChB,MAAM;IACN,OAAO;AACR;AAEA,IAAI;AACJ,IAAI,SAAS,+FAAwB,MAAM;AAC3C,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AAEJ,IAAI;AAEJ,UAAU,GACV,IAAI,YAAY;AAChB,UAAU,GACV,IAAI,aAAa;AAEjB,SAAS,KAAK,GAAG,EAAE,OAAO;IACzB,IAAI,OAAQ,QAAS,UAAU;QAC9B,OAAO,MAAM,CAAC,KAAK;QACnB,MAAM,IAAI,QAAQ,CAAC;IACpB;IAEA,IAAI,UAAU,IAAI,IAAI,GAAG,OAAO,CAAC,WAAW;IAC5C,IAAI,IAAI,QAAQ,KAAK,CAAC;IACtB,IAAI,CAAC,GACJ,IAAI,QAAQ,KAAK,CAAC;IACnB,OAAO,EAAE,CAAC,GAAG;IAEb,IAAI,OAAO,QAAQ,YAAY,CAAC,CAAC,CAAC,EAAE;IACpC,IAAI,OAAO,OAAO,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE;IAE7B;;;;;;;EAOC,GACD,IAAI;IACJ,IAAI,MAAM,CAAC;IACX,IAAI,CAAC,CAAC,EAAE,EAAE;QACT,IAAI;YACH,MAAM,QAAQ,IAAI,CAAC;QAEpB,EAAE,OAAO,GAAG;YACX,IAAI,QAAQ,KAAK,CAAC;YAClB,OAAO,EAAE,CAAC,GAAG;YACb,OAAO,OAAO,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE;YACzB,MAAM,QAAQ,YAAY,CAAC,KAAK,UAAU;QAC3C;IACD,OAAO;QACN,MAAM,QAAQ,YAAY,CAAC,KAAK,UAAU;IAC3C;IAEA,OAAO,WAAW,CAAC,MAAM,IAAI,IAAI;IAEjC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,CAAC,MAAM,GAAG,GAAG;QAC5B,IAAI,OAAO,GAAG,CAAC,CAAC,EAAE;IAEnB,OAAO,IAAI,IAAI,QAAQ,EAAE;QACxB;;;;;;;GAOC,GACD,IAAI,OAAO,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE;QACnC,IAAI,aAAa,KAAK,IAAI,CAAC,IAAI,QAAQ,GAAG,KAAK;QAC/C,OAAO,KAAK,KAAK,CAAC,GAAG,aAAa,GAAI,UAAU,GAC5C,OAAO,CAAC,qBAAqB,MAC7B,KAAK,KAAK,CAAC,aAAa;QAE5B,IAAI,UAAU,IAAI,QAAQ,GAAG;QAC7B,IAAI,UAAU,KACV,KAAK,KAAK,CAAC,aAAa,GAAG,gBAAgB,KAC9C;QACD,MAAO,KAAK,KAAK,CAAC,YAAY,aAAa,OAAO,IACjD;QAED,6DAA6D,GAC7D,IAAI,UAAU,KAAK,KAAK,CAAC;QACzB,UAAU,QAAQ,OAAO,CAAC,WAAW,KACjC,OAAO,CAAC,QAAQ;QACpB,IAAI,QAAQ,KAAK,CAAC,iBACjB,IAAI,OAAO,GAAG;IAChB;IAEA,OAAQ;AACT;AAEA,SAAS,MAAM,GAAG,EAAE,OAAO;IAC1B,OAAO,MAAM,CAAC;IACd,IAAI,CAAC,IAAI,KAAK,CAAC,MACd,MAAO,IAAI,MAAM;IAElB,IAAI,QAAQ,EAAE;IACd,IAAI,MAAM,QAAQ,YAAY,CAAC;IAC/B,MAAM,IAAI,CAAC;IAEX,IAAI,MAAM,QAAQ,KAAK,CAAC;IACxB,MAAM,IAAI,CAAC,IAAI,QAAQ,CAAC;IAExB,IAAI,IAAI,OAAO,EACd,MAAM,IAAI,CAAC,IAAI,OAAO;IAEvB,OAAQ,OAAO,IAAI,CAAC,MAAM,IAAI,CAAC;AAChC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3057, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3062, "column": 0}, "map": {"version":3,"sources":["file:///Users/monz/Code/queue/frontend/node_modules/sshpk/lib/formats/dnssec.js"],"sourcesContent":["// Copyright 2017 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\twrite: write\n};\n\nvar assert = require('assert-plus');\nvar Buffer = require('safer-buffer').Buffer;\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar utils = require('../utils');\nvar SSHBuffer = require('../ssh-buffer');\nvar Dhe = require('../dhe');\n\nvar supportedAlgos = {\n\t'rsa-sha1' : 5,\n\t'rsa-sha256' : 8,\n\t'rsa-sha512' : 10,\n\t'ecdsa-p256-sha256' : 13,\n\t'ecdsa-p384-sha384' : 14\n\t/*\n\t * ed25519 is hypothetically supported with id 15\n\t * but the common tools available don't appear to be\n\t * capable of generating/using ed25519 keys\n\t */\n};\n\nvar supportedAlgosById = {};\nObject.keys(supportedAlgos).forEach(function (k) {\n\tsupportedAlgosById[supportedAlgos[k]] = k.toUpperCase();\n});\n\nfunction read(buf, options) {\n\tif (typeof (buf) !== 'string') {\n\t\tassert.buffer(buf, 'buf');\n\t\tbuf = buf.toString('ascii');\n\t}\n\tvar lines = buf.split('\\n');\n\tif (lines[0].match(/^Private-key-format\\: v1/)) {\n\t\tvar algElems = lines[1].split(' ');\n\t\tvar algoNum = parseInt(algElems[1], 10);\n\t\tvar algoName = algElems[2];\n\t\tif (!supportedAlgosById[algoNum])\n\t\t\tthrow (new Error('Unsupported algorithm: ' + algoName));\n\t\treturn (readDNSSECPrivateKey(algoNum, lines.slice(2)));\n\t}\n\n\t// skip any comment-lines\n\tvar line = 0;\n\t/* JSSTYLED */\n\twhile (lines[line].match(/^\\;/))\n\t\tline++;\n\t// we should now have *one single* line left with our KEY on it.\n\tif ((lines[line].match(/\\. IN KEY /) ||\n\t    lines[line].match(/\\. IN DNSKEY /)) && lines[line+1].length === 0) {\n\t\treturn (readRFC3110(lines[line]));\n\t}\n\tthrow (new Error('Cannot parse dnssec key'));\n}\n\nfunction readRFC3110(keyString) {\n\tvar elems = keyString.split(' ');\n\t//unused var flags = parseInt(elems[3], 10);\n\t//unused var protocol = parseInt(elems[4], 10);\n\tvar algorithm = parseInt(elems[5], 10);\n\tif (!supportedAlgosById[algorithm])\n\t\tthrow (new Error('Unsupported algorithm: ' + algorithm));\n\tvar base64key = elems.slice(6, elems.length).join();\n\tvar keyBuffer = Buffer.from(base64key, 'base64');\n\tif (supportedAlgosById[algorithm].match(/^RSA-/)) {\n\t\t// join the rest of the body into a single base64-blob\n\t\tvar publicExponentLen = keyBuffer.readUInt8(0);\n\t\tif (publicExponentLen != 3 && publicExponentLen != 1)\n\t\t\tthrow (new Error('Cannot parse dnssec key: ' +\n\t\t\t    'unsupported exponent length'));\n\n\t\tvar publicExponent = keyBuffer.slice(1, publicExponentLen+1);\n\t\tpublicExponent = utils.mpNormalize(publicExponent);\n\t\tvar modulus = keyBuffer.slice(1+publicExponentLen);\n\t\tmodulus = utils.mpNormalize(modulus);\n\t\t// now, make the key\n\t\tvar rsaKey = {\n\t\t\ttype: 'rsa',\n\t\t\tparts: []\n\t\t};\n\t\trsaKey.parts.push({ name: 'e', data: publicExponent});\n\t\trsaKey.parts.push({ name: 'n', data: modulus});\n\t\treturn (new Key(rsaKey));\n\t}\n\tif (supportedAlgosById[algorithm] === 'ECDSA-P384-SHA384' ||\n\t    supportedAlgosById[algorithm] === 'ECDSA-P256-SHA256') {\n\t\tvar curve = 'nistp384';\n\t\tvar size = 384;\n\t\tif (supportedAlgosById[algorithm].match(/^ECDSA-P256-SHA256/)) {\n\t\t\tcurve = 'nistp256';\n\t\t\tsize = 256;\n\t\t}\n\n\t\tvar ecdsaKey = {\n\t\t\ttype: 'ecdsa',\n\t\t\tcurve: curve,\n\t\t\tsize: size,\n\t\t\tparts: [\n\t\t\t\t{name: 'curve', data: Buffer.from(curve) },\n\t\t\t\t{name: 'Q', data: utils.ecNormalize(keyBuffer) }\n\t\t\t]\n\t\t};\n\t\treturn (new Key(ecdsaKey));\n\t}\n\tthrow (new Error('Unsupported algorithm: ' +\n\t    supportedAlgosById[algorithm]));\n}\n\nfunction elementToBuf(e) {\n\treturn (Buffer.from(e.split(' ')[1], 'base64'));\n}\n\nfunction readDNSSECRSAPrivateKey(elements) {\n\tvar rsaParams = {};\n\telements.forEach(function (element) {\n\t\tif (element.split(' ')[0] === 'Modulus:')\n\t\t\trsaParams['n'] = elementToBuf(element);\n\t\telse if (element.split(' ')[0] === 'PublicExponent:')\n\t\t\trsaParams['e'] = elementToBuf(element);\n\t\telse if (element.split(' ')[0] === 'PrivateExponent:')\n\t\t\trsaParams['d'] = elementToBuf(element);\n\t\telse if (element.split(' ')[0] === 'Prime1:')\n\t\t\trsaParams['p'] = elementToBuf(element);\n\t\telse if (element.split(' ')[0] === 'Prime2:')\n\t\t\trsaParams['q'] = elementToBuf(element);\n\t\telse if (element.split(' ')[0] === 'Exponent1:')\n\t\t\trsaParams['dmodp'] = elementToBuf(element);\n\t\telse if (element.split(' ')[0] === 'Exponent2:')\n\t\t\trsaParams['dmodq'] = elementToBuf(element);\n\t\telse if (element.split(' ')[0] === 'Coefficient:')\n\t\t\trsaParams['iqmp'] = elementToBuf(element);\n\t});\n\t// now, make the key\n\tvar key = {\n\t\ttype: 'rsa',\n\t\tparts: [\n\t\t\t{ name: 'e', data: utils.mpNormalize(rsaParams['e'])},\n\t\t\t{ name: 'n', data: utils.mpNormalize(rsaParams['n'])},\n\t\t\t{ name: 'd', data: utils.mpNormalize(rsaParams['d'])},\n\t\t\t{ name: 'p', data: utils.mpNormalize(rsaParams['p'])},\n\t\t\t{ name: 'q', data: utils.mpNormalize(rsaParams['q'])},\n\t\t\t{ name: 'dmodp',\n\t\t\t    data: utils.mpNormalize(rsaParams['dmodp'])},\n\t\t\t{ name: 'dmodq',\n\t\t\t    data: utils.mpNormalize(rsaParams['dmodq'])},\n\t\t\t{ name: 'iqmp',\n\t\t\t    data: utils.mpNormalize(rsaParams['iqmp'])}\n\t\t]\n\t};\n\treturn (new PrivateKey(key));\n}\n\nfunction readDNSSECPrivateKey(alg, elements) {\n\tif (supportedAlgosById[alg].match(/^RSA-/)) {\n\t\treturn (readDNSSECRSAPrivateKey(elements));\n\t}\n\tif (supportedAlgosById[alg] === 'ECDSA-P384-SHA384' ||\n\t    supportedAlgosById[alg] === 'ECDSA-P256-SHA256') {\n\t\tvar d = Buffer.from(elements[0].split(' ')[1], 'base64');\n\t\tvar curve = 'nistp384';\n\t\tvar size = 384;\n\t\tif (supportedAlgosById[alg] === 'ECDSA-P256-SHA256') {\n\t\t\tcurve = 'nistp256';\n\t\t\tsize = 256;\n\t\t}\n\t\t// DNSSEC generates the public-key on the fly (go calculate it)\n\t\tvar publicKey = utils.publicFromPrivateECDSA(curve, d);\n\t\tvar Q = publicKey.part['Q'].data;\n\t\tvar ecdsaKey = {\n\t\t\ttype: 'ecdsa',\n\t\t\tcurve: curve,\n\t\t\tsize: size,\n\t\t\tparts: [\n\t\t\t\t{name: 'curve', data: Buffer.from(curve) },\n\t\t\t\t{name: 'd', data: d },\n\t\t\t\t{name: 'Q', data: Q }\n\t\t\t]\n\t\t};\n\t\treturn (new PrivateKey(ecdsaKey));\n\t}\n\tthrow (new Error('Unsupported algorithm: ' + supportedAlgosById[alg]));\n}\n\nfunction dnssecTimestamp(date) {\n\tvar year = date.getFullYear() + ''; //stringify\n\tvar month = (date.getMonth() + 1);\n\tvar timestampStr = year + month + date.getUTCDate();\n\ttimestampStr += '' + date.getUTCHours() + date.getUTCMinutes();\n\ttimestampStr += date.getUTCSeconds();\n\treturn (timestampStr);\n}\n\nfunction rsaAlgFromOptions(opts) {\n\tif (!opts || !opts.hashAlgo || opts.hashAlgo === 'sha1')\n\t\treturn ('5 (RSASHA1)');\n\telse if (opts.hashAlgo === 'sha256')\n\t\treturn ('8 (RSASHA256)');\n\telse if (opts.hashAlgo === 'sha512')\n\t\treturn ('10 (RSASHA512)');\n\telse\n\t\tthrow (new Error('Unknown or unsupported hash: ' +\n\t\t    opts.hashAlgo));\n}\n\nfunction writeRSA(key, options) {\n\t// if we're missing parts, add them.\n\tif (!key.part.dmodp || !key.part.dmodq) {\n\t\tutils.addRSAMissing(key);\n\t}\n\n\tvar out = '';\n\tout += 'Private-key-format: v1.3\\n';\n\tout += 'Algorithm: ' + rsaAlgFromOptions(options) + '\\n';\n\tvar n = utils.mpDenormalize(key.part['n'].data);\n\tout += 'Modulus: ' + n.toString('base64') + '\\n';\n\tvar e = utils.mpDenormalize(key.part['e'].data);\n\tout += 'PublicExponent: ' + e.toString('base64') + '\\n';\n\tvar d = utils.mpDenormalize(key.part['d'].data);\n\tout += 'PrivateExponent: ' + d.toString('base64') + '\\n';\n\tvar p = utils.mpDenormalize(key.part['p'].data);\n\tout += 'Prime1: ' + p.toString('base64') + '\\n';\n\tvar q = utils.mpDenormalize(key.part['q'].data);\n\tout += 'Prime2: ' + q.toString('base64') + '\\n';\n\tvar dmodp = utils.mpDenormalize(key.part['dmodp'].data);\n\tout += 'Exponent1: ' + dmodp.toString('base64') + '\\n';\n\tvar dmodq = utils.mpDenormalize(key.part['dmodq'].data);\n\tout += 'Exponent2: ' + dmodq.toString('base64') + '\\n';\n\tvar iqmp = utils.mpDenormalize(key.part['iqmp'].data);\n\tout += 'Coefficient: ' + iqmp.toString('base64') + '\\n';\n\t// Assume that we're valid as-of now\n\tvar timestamp = new Date();\n\tout += 'Created: ' + dnssecTimestamp(timestamp) + '\\n';\n\tout += 'Publish: ' + dnssecTimestamp(timestamp) + '\\n';\n\tout += 'Activate: ' + dnssecTimestamp(timestamp) + '\\n';\n\treturn (Buffer.from(out, 'ascii'));\n}\n\nfunction writeECDSA(key, options) {\n\tvar out = '';\n\tout += 'Private-key-format: v1.3\\n';\n\n\tif (key.curve === 'nistp256') {\n\t\tout += 'Algorithm: 13 (ECDSAP256SHA256)\\n';\n\t} else if (key.curve === 'nistp384') {\n\t\tout += 'Algorithm: 14 (ECDSAP384SHA384)\\n';\n\t} else {\n\t\tthrow (new Error('Unsupported curve'));\n\t}\n\tvar base64Key = key.part['d'].data.toString('base64');\n\tout += 'PrivateKey: ' + base64Key + '\\n';\n\n\t// Assume that we're valid as-of now\n\tvar timestamp = new Date();\n\tout += 'Created: ' + dnssecTimestamp(timestamp) + '\\n';\n\tout += 'Publish: ' + dnssecTimestamp(timestamp) + '\\n';\n\tout += 'Activate: ' + dnssecTimestamp(timestamp) + '\\n';\n\n\treturn (Buffer.from(out, 'ascii'));\n}\n\nfunction write(key, options) {\n\tif (PrivateKey.isPrivateKey(key)) {\n\t\tif (key.type === 'rsa') {\n\t\t\treturn (writeRSA(key, options));\n\t\t} else if (key.type === 'ecdsa') {\n\t\t\treturn (writeECDSA(key, options));\n\t\t} else {\n\t\t\tthrow (new Error('Unsupported algorithm: ' + key.type));\n\t\t}\n\t} else if (Key.isKey(key)) {\n\t\t/*\n\t\t * RFC3110 requires a keyname, and a keytype, which we\n\t\t * don't really have a mechanism for specifying such\n\t\t * additional metadata.\n\t\t */\n\t\tthrow (new Error('Format \"dnssec\" only supports ' +\n\t\t    'writing private keys'));\n\t} else {\n\t\tthrow (new Error('key is not a Key or PrivateKey'));\n\t}\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3340, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3345, "column": 0}, "map": {"version":3,"sources":["file:///Users/monz/Code/queue/frontend/node_modules/sshpk/lib/formats/putty.js"],"sourcesContent":["// Copyright 2018 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\twrite: write\n};\n\nvar assert = require('assert-plus');\nvar Buffer = require('safer-buffer').Buffer;\nvar rfc4253 = require('./rfc4253');\nvar Key = require('../key');\nvar SSHBuffer = require('../ssh-buffer');\nvar crypto = require('crypto');\nvar PrivateKey = require('../private-key');\n\nvar errors = require('../errors');\n\n// https://tartarus.org/~simon/putty-prerel-snapshots/htmldoc/AppendixC.html\nfunction read(buf, options) {\n\tvar lines = buf.toString('ascii').split(/[\\r\\n]+/);\n\tvar found = false;\n\tvar parts;\n\tvar si = 0;\n\tvar formatVersion;\n\twhile (si < lines.length) {\n\t\tparts = splitHeader(lines[si++]);\n\t\tif (parts) {\n\t\t\tformatVersion = {\n\t\t\t\t'putty-user-key-file-2': 2,\n\t\t\t\t'putty-user-key-file-3': 3\n\t\t\t}[parts[0].toLowerCase()];\n\t\t\tif (formatVersion) {\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tif (!found) {\n\t\tthrow (new Error('No PuTTY format first line found'));\n\t}\n\tvar alg = parts[1];\n\n\tparts = splitHeader(lines[si++]);\n\tassert.equal(parts[0].toLowerCase(), 'encryption');\n\tvar encryption = parts[1];\n\n\tparts = splitHeader(lines[si++]);\n\tassert.equal(parts[0].toLowerCase(), 'comment');\n\tvar comment = parts[1];\n\n\tparts = splitHeader(lines[si++]);\n\tassert.equal(parts[0].toLowerCase(), 'public-lines');\n\tvar publicLines = parseInt(parts[1], 10);\n\tif (!isFinite(publicLines) || publicLines < 0 ||\n\t    publicLines > lines.length) {\n\t\tthrow (new Error('Invalid public-lines count'));\n\t}\n\n\tvar publicBuf = Buffer.from(\n\t    lines.slice(si, si + publicLines).join(''), 'base64');\n\tvar keyType = rfc4253.algToKeyType(alg);\n\tvar key = rfc4253.read(publicBuf);\n\tif (key.type !== keyType) {\n\t\tthrow (new Error('Outer key algorithm mismatch'));\n\t}\n\n\tsi += publicLines;\n\tif (lines[si]) {\n\t\tparts = splitHeader(lines[si++]);\n\t\tassert.equal(parts[0].toLowerCase(), 'private-lines');\n\t\tvar privateLines = parseInt(parts[1], 10);\n\t\tif (!isFinite(privateLines) || privateLines < 0 ||\n\t\t    privateLines > lines.length) {\n\t\t\tthrow (new Error('Invalid private-lines count'));\n\t\t}\n\n\t\tvar privateBuf = Buffer.from(\n\t\t\tlines.slice(si, si + privateLines).join(''), 'base64');\n\n\t\tif (encryption !== 'none' && formatVersion === 3) {\n\t\t\tthrow new Error('Encrypted keys arenot supported for' +\n\t\t\t' PuTTY format version 3');\n\t\t}\n\n\t\tif (encryption === 'aes256-cbc') {\n\t\t\tif (!options.passphrase) {\n\t\t\t\tthrow (new errors.KeyEncryptedError(\n\t\t\t\t\toptions.filename, 'PEM'));\n\t\t\t}\n\n\t\t\tvar iv = Buffer.alloc(16, 0);\n\t\t\tvar decipher = crypto.createDecipheriv(\n\t\t\t\t'aes-256-cbc',\n\t\t\t\tderivePPK2EncryptionKey(options.passphrase),\n\t\t\t\tiv);\n\t\t\tdecipher.setAutoPadding(false);\n\t\t\tprivateBuf = Buffer.concat([\n\t\t\t\tdecipher.update(privateBuf), decipher.final()]);\n\t\t}\n\n\t\tkey = new PrivateKey(key);\n\t\tif (key.type !== keyType) {\n\t\t\tthrow (new Error('Outer key algorithm mismatch'));\n\t\t}\n\n\t\tvar sshbuf = new SSHBuffer({buffer: privateBuf});\n\t\tvar privateKeyParts;\n\t\tif (alg === 'ssh-dss') {\n\t\t\tprivateKeyParts = [ {\n\t\t\t\tname: 'x',\n\t\t\t\tdata: sshbuf.readBuffer()\n\t\t\t}];\n\t\t} else if (alg === 'ssh-rsa') {\n\t\t\tprivateKeyParts = [\n\t\t\t\t{ name: 'd', data: sshbuf.readBuffer() },\n\t\t\t\t{ name: 'p', data: sshbuf.readBuffer() },\n\t\t\t\t{ name: 'q', data: sshbuf.readBuffer() },\n\t\t\t\t{ name: 'iqmp', data: sshbuf.readBuffer() }\n\t\t\t];\n\t\t} else if (alg.match(/^ecdsa-sha2-nistp/)) {\n\t\t\tprivateKeyParts = [ {\n\t\t\t\tname: 'd', data: sshbuf.readBuffer()\n\t\t\t} ];\n\t\t} else if (alg === 'ssh-ed25519') {\n\t\t\tprivateKeyParts = [ {\n\t\t\t\tname: 'k', data: sshbuf.readBuffer()\n\t\t\t} ];\n\t\t} else {\n\t\t\tthrow new Error('Unsupported PPK key type: ' + alg);\n\t\t}\n\n\t\tkey = new PrivateKey({\n\t\t\ttype: key.type,\n\t\t\tparts: key.parts.concat(privateKeyParts)\n\t\t});\n\t}\n\n\tkey.comment = comment;\n\treturn (key);\n}\n\nfunction derivePPK2EncryptionKey(passphrase) {\n\tvar hash1 = crypto.createHash('sha1').update(Buffer.concat([\n\t\tBuffer.from([0, 0, 0, 0]),\n\t\tBuffer.from(passphrase)\n\t])).digest();\n\tvar hash2 = crypto.createHash('sha1').update(Buffer.concat([\n\t\tBuffer.from([0, 0, 0, 1]),\n\t\tBuffer.from(passphrase)\n\t])).digest();\n\treturn (Buffer.concat([hash1, hash2]).slice(0, 32));\n}\n\nfunction splitHeader(line) {\n\tvar idx = line.indexOf(':');\n\tif (idx === -1)\n\t\treturn (null);\n\tvar header = line.slice(0, idx);\n\t++idx;\n\twhile (line[idx] === ' ')\n\t\t++idx;\n\tvar rest = line.slice(idx);\n\treturn ([header, rest]);\n}\n\nfunction write(key, options) {\n\tassert.object(key);\n\tif (!Key.isKey(key))\n\t\tthrow (new Error('Must be a public key'));\n\n\tvar alg = rfc4253.keyTypeToAlg(key);\n\tvar buf = rfc4253.write(key);\n\tvar comment = key.comment || '';\n\n\tvar b64 = buf.toString('base64');\n\tvar lines = wrap(b64, 64);\n\n\tlines.unshift('Public-Lines: ' + lines.length);\n\tlines.unshift('Comment: ' + comment);\n\tlines.unshift('Encryption: none');\n\tlines.unshift('PuTTY-User-Key-File-2: ' + alg);\n\n\treturn (Buffer.from(lines.join('\\n') + '\\n'));\n}\n\nfunction wrap(txt, len) {\n\tvar lines = [];\n\tvar pos = 0;\n\twhile (pos < txt.length) {\n\t\tlines.push(txt.slice(pos, pos + 64));\n\t\tpos += 64;\n\t}\n\treturn (lines);\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3542, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3547, "column": 0}, "map": {"version":3,"sources":["file:///Users/monz/Code/queue/frontend/node_modules/sshpk/lib/formats/auto.js"],"sourcesContent":["// Copyright 2018 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\twrite: write\n};\n\nvar assert = require('assert-plus');\nvar Buffer = require('safer-buffer').Buffer;\nvar utils = require('../utils');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\n\nvar pem = require('./pem');\nvar ssh = require('./ssh');\nvar rfc4253 = require('./rfc4253');\nvar dnssec = require('./dnssec');\nvar putty = require('./putty');\n\nvar DNSSEC_PRIVKEY_HEADER_PREFIX = 'Private-key-format: v1';\n\nfunction read(buf, options) {\n\tif (typeof (buf) === 'string') {\n\t\tif (buf.trim().match(/^[-]+[ ]*BEGIN/))\n\t\t\treturn (pem.read(buf, options));\n\t\tif (buf.match(/^\\s*ssh-[a-z]/))\n\t\t\treturn (ssh.read(buf, options));\n\t\tif (buf.match(/^\\s*ecdsa-/))\n\t\t\treturn (ssh.read(buf, options));\n\t\tif (buf.match(/^putty-user-key-file-2:/i))\n\t\t\treturn (putty.read(buf, options));\n\t\tif (findDNSSECHeader(buf))\n\t\t\treturn (dnssec.read(buf, options));\n\t\tbuf = Buffer.from(buf, 'binary');\n\t} else {\n\t\tassert.buffer(buf);\n\t\tif (findPEMHeader(buf))\n\t\t\treturn (pem.read(buf, options));\n\t\tif (findSSHHeader(buf))\n\t\t\treturn (ssh.read(buf, options));\n\t\tif (findPuTTYHeader(buf))\n\t\t\treturn (putty.read(buf, options));\n\t\tif (findDNSSECHeader(buf))\n\t\t\treturn (dnssec.read(buf, options));\n\t}\n\tif (buf.readUInt32BE(0) < buf.length)\n\t\treturn (rfc4253.read(buf, options));\n\tthrow (new Error('Failed to auto-detect format of key'));\n}\n\nfunction findPuTTYHeader(buf) {\n\tvar offset = 0;\n\twhile (offset < buf.length &&\n\t    (buf[offset] === 32 || buf[offset] === 10 || buf[offset] === 9))\n\t\t++offset;\n\tif (offset + 22 <= buf.length &&\n\t    buf.slice(offset, offset + 22).toString('ascii').toLowerCase() ===\n\t    'putty-user-key-file-2:')\n\t\treturn (true);\n\treturn (false);\n}\n\nfunction findSSHHeader(buf) {\n\tvar offset = 0;\n\twhile (offset < buf.length &&\n\t    (buf[offset] === 32 || buf[offset] === 10 || buf[offset] === 9))\n\t\t++offset;\n\tif (offset + 4 <= buf.length &&\n\t    buf.slice(offset, offset + 4).toString('ascii') === 'ssh-')\n\t\treturn (true);\n\tif (offset + 6 <= buf.length &&\n\t    buf.slice(offset, offset + 6).toString('ascii') === 'ecdsa-')\n\t\treturn (true);\n\treturn (false);\n}\n\nfunction findPEMHeader(buf) {\n\tvar offset = 0;\n\twhile (offset < buf.length &&\n\t    (buf[offset] === 32 || buf[offset] === 10))\n\t\t++offset;\n\tif (buf[offset] !== 45)\n\t\treturn (false);\n\twhile (offset < buf.length &&\n\t    (buf[offset] === 45))\n\t\t++offset;\n\twhile (offset < buf.length &&\n\t    (buf[offset] === 32))\n\t\t++offset;\n\tif (offset + 5 > buf.length ||\n\t    buf.slice(offset, offset + 5).toString('ascii') !== 'BEGIN')\n\t\treturn (false);\n\treturn (true);\n}\n\nfunction findDNSSECHeader(buf) {\n\t// private case first\n\tif (buf.length <= DNSSEC_PRIVKEY_HEADER_PREFIX.length)\n\t\treturn (false);\n\tvar headerCheck = buf.slice(0, DNSSEC_PRIVKEY_HEADER_PREFIX.length);\n\tif (headerCheck.toString('ascii') === DNSSEC_PRIVKEY_HEADER_PREFIX)\n\t\treturn (true);\n\n\t// public-key RFC3110 ?\n\t// 'domain.com. IN KEY ...' or 'domain.com. IN DNSKEY ...'\n\t// skip any comment-lines\n\tif (typeof (buf) !== 'string') {\n\t\tbuf = buf.toString('ascii');\n\t}\n\tvar lines = buf.split('\\n');\n\tvar line = 0;\n\t/* JSSTYLED */\n\twhile (lines[line].match(/^\\;/))\n\t\tline++;\n\tif (lines[line].toString('ascii').match(/\\. IN KEY /))\n\t\treturn (true);\n\tif (lines[line].toString('ascii').match(/\\. IN DNSKEY /))\n\t\treturn (true);\n\treturn (false);\n}\n\nfunction write(key, options) {\n\tthrow (new Error('\"auto\" format cannot be used for writing'));\n}\n"],"names":[],"mappings":"AAAA,8BAA8B;AAE9B,OAAO,OAAO,GAAG;IAChB,MAAM;IACN,OAAO;AACR;AAEA,IAAI;AACJ,IAAI,SAAS,+FAAwB,MAAM;AAC3C,IAAI;AACJ,IAAI;AACJ,IAAI;AAEJ,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AAEJ,IAAI,+BAA+B;AAEnC,SAAS,KAAK,GAAG,EAAE,OAAO;IACzB,IAAI,OAAQ,QAAS,UAAU;QAC9B,IAAI,IAAI,IAAI,GAAG,KAAK,CAAC,mBACpB,OAAQ,IAAI,IAAI,CAAC,KAAK;QACvB,IAAI,IAAI,KAAK,CAAC,kBACb,OAAQ,IAAI,IAAI,CAAC,KAAK;QACvB,IAAI,IAAI,KAAK,CAAC,eACb,OAAQ,IAAI,IAAI,CAAC,KAAK;QACvB,IAAI,IAAI,KAAK,CAAC,6BACb,OAAQ,MAAM,IAAI,CAAC,KAAK;QACzB,IAAI,iBAAiB,MACpB,OAAQ,OAAO,IAAI,CAAC,KAAK;QAC1B,MAAM,OAAO,IAAI,CAAC,KAAK;IACxB,OAAO;QACN,OAAO,MAAM,CAAC;QACd,IAAI,cAAc,MACjB,OAAQ,IAAI,IAAI,CAAC,KAAK;QACvB,IAAI,cAAc,MACjB,OAAQ,IAAI,IAAI,CAAC,KAAK;QACvB,IAAI,gBAAgB,MACnB,OAAQ,MAAM,IAAI,CAAC,KAAK;QACzB,IAAI,iBAAiB,MACpB,OAAQ,OAAO,IAAI,CAAC,KAAK;IAC3B;IACA,IAAI,IAAI,YAAY,CAAC,KAAK,IAAI,MAAM,EACnC,OAAQ,QAAQ,IAAI,CAAC,KAAK;IAC3B,MAAO,IAAI,MAAM;AAClB;AAEA,SAAS,gBAAgB,GAAG;IAC3B,IAAI,SAAS;IACb,MAAO,SAAS,IAAI,MAAM,IACtB,CAAC,GAAG,CAAC,OAAO,KAAK,MAAM,GAAG,CAAC,OAAO,KAAK,MAAM,GAAG,CAAC,OAAO,KAAK,CAAC,EACjE,EAAE;IACH,IAAI,SAAS,MAAM,IAAI,MAAM,IACzB,IAAI,KAAK,CAAC,QAAQ,SAAS,IAAI,QAAQ,CAAC,SAAS,WAAW,OAC5D,0BACH,OAAQ;IACT,OAAQ;AACT;AAEA,SAAS,cAAc,GAAG;IACzB,IAAI,SAAS;IACb,MAAO,SAAS,IAAI,MAAM,IACtB,CAAC,GAAG,CAAC,OAAO,KAAK,MAAM,GAAG,CAAC,OAAO,KAAK,MAAM,GAAG,CAAC,OAAO,KAAK,CAAC,EACjE,EAAE;IACH,IAAI,SAAS,KAAK,IAAI,MAAM,IACxB,IAAI,KAAK,CAAC,QAAQ,SAAS,GAAG,QAAQ,CAAC,aAAa,QACvD,OAAQ;IACT,IAAI,SAAS,KAAK,IAAI,MAAM,IACxB,IAAI,KAAK,CAAC,QAAQ,SAAS,GAAG,QAAQ,CAAC,aAAa,UACvD,OAAQ;IACT,OAAQ;AACT;AAEA,SAAS,cAAc,GAAG;IACzB,IAAI,SAAS;IACb,MAAO,SAAS,IAAI,MAAM,IACtB,CAAC,GAAG,CAAC,OAAO,KAAK,MAAM,GAAG,CAAC,OAAO,KAAK,EAAE,EAC5C,EAAE;IACH,IAAI,GAAG,CAAC,OAAO,KAAK,IACnB,OAAQ;IACT,MAAO,SAAS,IAAI,MAAM,IACrB,GAAG,CAAC,OAAO,KAAK,GACpB,EAAE;IACH,MAAO,SAAS,IAAI,MAAM,IACrB,GAAG,CAAC,OAAO,KAAK,GACpB,EAAE;IACH,IAAI,SAAS,IAAI,IAAI,MAAM,IACvB,IAAI,KAAK,CAAC,QAAQ,SAAS,GAAG,QAAQ,CAAC,aAAa,SACvD,OAAQ;IACT,OAAQ;AACT;AAEA,SAAS,iBAAiB,GAAG;IAC5B,qBAAqB;IACrB,IAAI,IAAI,MAAM,IAAI,6BAA6B,MAAM,EACpD,OAAQ;IACT,IAAI,cAAc,IAAI,KAAK,CAAC,GAAG,6BAA6B,MAAM;IAClE,IAAI,YAAY,QAAQ,CAAC,aAAa,8BACrC,OAAQ;IAET,uBAAuB;IACvB,0DAA0D;IAC1D,yBAAyB;IACzB,IAAI,OAAQ,QAAS,UAAU;QAC9B,MAAM,IAAI,QAAQ,CAAC;IACpB;IACA,IAAI,QAAQ,IAAI,KAAK,CAAC;IACtB,IAAI,OAAO;IACX,YAAY,GACZ,MAAO,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,OACxB;IACD,IAAI,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,KAAK,CAAC,eACvC,OAAQ;IACT,IAAI,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,KAAK,CAAC,kBACvC,OAAQ;IACT,OAAQ;AACT;AAEA,SAAS,MAAM,GAAG,EAAE,OAAO;IAC1B,MAAO,IAAI,MAAM;AAClB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3624, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3629, "column": 0}, "map": {"version":3,"sources":["file:///Users/monz/Code/queue/frontend/node_modules/sshpk/lib/private-key.js"],"sourcesContent":["// Copyright 2017 Joyent, Inc.\n\nmodule.exports = PrivateKey;\n\nvar assert = require('assert-plus');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('./algs');\nvar crypto = require('crypto');\nvar Fingerprint = require('./fingerprint');\nvar Signature = require('./signature');\nvar errs = require('./errors');\nvar util = require('util');\nvar utils = require('./utils');\nvar dhe = require('./dhe');\nvar generateECDSA = dhe.generateECDSA;\nvar generateED25519 = dhe.generateED25519;\nvar edCompat = require('./ed-compat');\nvar nacl = require('tweetnacl');\n\nvar Key = require('./key');\n\nvar InvalidAlgorithmError = errs.InvalidAlgorithmError;\nvar KeyParseError = errs.KeyParseError;\nvar KeyEncryptedError = errs.KeyEncryptedError;\n\nvar formats = {};\nformats['auto'] = require('./formats/auto');\nformats['pem'] = require('./formats/pem');\nformats['pkcs1'] = require('./formats/pkcs1');\nformats['pkcs8'] = require('./formats/pkcs8');\nformats['rfc4253'] = require('./formats/rfc4253');\nformats['ssh-private'] = require('./formats/ssh-private');\nformats['openssh'] = formats['ssh-private'];\nformats['ssh'] = formats['ssh-private'];\nformats['dnssec'] = require('./formats/dnssec');\nformats['putty'] = require('./formats/putty');\n\nfunction PrivateKey(opts) {\n\tassert.object(opts, 'options');\n\tKey.call(this, opts);\n\n\tthis._pubCache = undefined;\n}\nutil.inherits(PrivateKey, Key);\n\nPrivateKey.formats = formats;\n\nPrivateKey.prototype.toBuffer = function (format, options) {\n\tif (format === undefined)\n\t\tformat = 'pkcs1';\n\tassert.string(format, 'format');\n\tassert.object(formats[format], 'formats[format]');\n\tassert.optionalObject(options, 'options');\n\n\treturn (formats[format].write(this, options));\n};\n\nPrivateKey.prototype.hash = function (algo, type) {\n\treturn (this.toPublic().hash(algo, type));\n};\n\nPrivateKey.prototype.fingerprint = function (algo, type) {\n\treturn (this.toPublic().fingerprint(algo, type));\n};\n\nPrivateKey.prototype.toPublic = function () {\n\tif (this._pubCache)\n\t\treturn (this._pubCache);\n\n\tvar algInfo = algs.info[this.type];\n\tvar pubParts = [];\n\tfor (var i = 0; i < algInfo.parts.length; ++i) {\n\t\tvar p = algInfo.parts[i];\n\t\tpubParts.push(this.part[p]);\n\t}\n\n\tthis._pubCache = new Key({\n\t\ttype: this.type,\n\t\tsource: this,\n\t\tparts: pubParts\n\t});\n\tif (this.comment)\n\t\tthis._pubCache.comment = this.comment;\n\treturn (this._pubCache);\n};\n\nPrivateKey.prototype.derive = function (newType) {\n\tassert.string(newType, 'type');\n\tvar priv, pub, pair;\n\n\tif (this.type === 'ed25519' && newType === 'curve25519') {\n\t\tpriv = this.part.k.data;\n\t\tif (priv[0] === 0x00)\n\t\t\tpriv = priv.slice(1);\n\n\t\tpair = nacl.box.keyPair.fromSecretKey(new Uint8Array(priv));\n\t\tpub = Buffer.from(pair.publicKey);\n\n\t\treturn (new PrivateKey({\n\t\t\ttype: 'curve25519',\n\t\t\tparts: [\n\t\t\t\t{ name: 'A', data: utils.mpNormalize(pub) },\n\t\t\t\t{ name: 'k', data: utils.mpNormalize(priv) }\n\t\t\t]\n\t\t}));\n\t} else if (this.type === 'curve25519' && newType === 'ed25519') {\n\t\tpriv = this.part.k.data;\n\t\tif (priv[0] === 0x00)\n\t\t\tpriv = priv.slice(1);\n\n\t\tpair = nacl.sign.keyPair.fromSeed(new Uint8Array(priv));\n\t\tpub = Buffer.from(pair.publicKey);\n\n\t\treturn (new PrivateKey({\n\t\t\ttype: 'ed25519',\n\t\t\tparts: [\n\t\t\t\t{ name: 'A', data: utils.mpNormalize(pub) },\n\t\t\t\t{ name: 'k', data: utils.mpNormalize(priv) }\n\t\t\t]\n\t\t}));\n\t}\n\tthrow (new Error('Key derivation not supported from ' + this.type +\n\t    ' to ' + newType));\n};\n\nPrivateKey.prototype.createVerify = function (hashAlgo) {\n\treturn (this.toPublic().createVerify(hashAlgo));\n};\n\nPrivateKey.prototype.createSign = function (hashAlgo) {\n\tif (hashAlgo === undefined)\n\t\thashAlgo = this.defaultHashAlgorithm();\n\tassert.string(hashAlgo, 'hash algorithm');\n\n\t/* ED25519 is not supported by OpenSSL, use a javascript impl. */\n\tif (this.type === 'ed25519' && edCompat !== undefined)\n\t\treturn (new edCompat.Signer(this, hashAlgo));\n\tif (this.type === 'curve25519')\n\t\tthrow (new Error('Curve25519 keys are not suitable for ' +\n\t\t    'signing or verification'));\n\n\tvar v, nm, err;\n\ttry {\n\t\tnm = hashAlgo.toUpperCase();\n\t\tv = crypto.createSign(nm);\n\t} catch (e) {\n\t\terr = e;\n\t}\n\tif (v === undefined || (err instanceof Error &&\n\t    err.message.match(/Unknown message digest/))) {\n\t\tnm = 'RSA-';\n\t\tnm += hashAlgo.toUpperCase();\n\t\tv = crypto.createSign(nm);\n\t}\n\tassert.ok(v, 'failed to create verifier');\n\tvar oldSign = v.sign.bind(v);\n\tvar key = this.toBuffer('pkcs1');\n\tvar type = this.type;\n\tvar curve = this.curve;\n\tv.sign = function () {\n\t\tvar sig = oldSign(key);\n\t\tif (typeof (sig) === 'string')\n\t\t\tsig = Buffer.from(sig, 'binary');\n\t\tsig = Signature.parse(sig, type, 'asn1');\n\t\tsig.hashAlgorithm = hashAlgo;\n\t\tsig.curve = curve;\n\t\treturn (sig);\n\t};\n\treturn (v);\n};\n\nPrivateKey.parse = function (data, format, options) {\n\tif (typeof (data) !== 'string')\n\t\tassert.buffer(data, 'data');\n\tif (format === undefined)\n\t\tformat = 'auto';\n\tassert.string(format, 'format');\n\tif (typeof (options) === 'string')\n\t\toptions = { filename: options };\n\tassert.optionalObject(options, 'options');\n\tif (options === undefined)\n\t\toptions = {};\n\tassert.optionalString(options.filename, 'options.filename');\n\tif (options.filename === undefined)\n\t\toptions.filename = '(unnamed)';\n\n\tassert.object(formats[format], 'formats[format]');\n\n\ttry {\n\t\tvar k = formats[format].read(data, options);\n\t\tassert.ok(k instanceof PrivateKey, 'key is not a private key');\n\t\tif (!k.comment)\n\t\t\tk.comment = options.filename;\n\t\treturn (k);\n\t} catch (e) {\n\t\tif (e.name === 'KeyEncryptedError')\n\t\t\tthrow (e);\n\t\tthrow (new KeyParseError(options.filename, format, e));\n\t}\n};\n\nPrivateKey.isPrivateKey = function (obj, ver) {\n\treturn (utils.isCompatible(obj, PrivateKey, ver));\n};\n\nPrivateKey.generate = function (type, options) {\n\tif (options === undefined)\n\t\toptions = {};\n\tassert.object(options, 'options');\n\n\tswitch (type) {\n\tcase 'ecdsa':\n\t\tif (options.curve === undefined)\n\t\t\toptions.curve = 'nistp256';\n\t\tassert.string(options.curve, 'options.curve');\n\t\treturn (generateECDSA(options.curve));\n\tcase 'ed25519':\n\t\treturn (generateED25519());\n\tdefault:\n\t\tthrow (new Error('Key generation not supported with key ' +\n\t\t    'type \"' + type + '\"'));\n\t}\n};\n\n/*\n * API versions for PrivateKey:\n * [1,0] -- initial ver\n * [1,1] -- added auto, pkcs[18], openssh/ssh-private formats\n * [1,2] -- added defaultHashAlgorithm\n * [1,3] -- added derive, ed, createDH\n * [1,4] -- first tagged version\n * [1,5] -- changed ed25519 part names and format\n * [1,6] -- type arguments for hash() and fingerprint()\n */\nPrivateKey.prototype._sshpkApiVersion = [1, 6];\n\nPrivateKey._oldVersionDetect = function (obj) {\n\tassert.func(obj.toPublic);\n\tassert.func(obj.createSign);\n\tif (obj.derive)\n\t\treturn ([1, 3]);\n\tif (obj.defaultHashAlgorithm)\n\t\treturn ([1, 2]);\n\tif (obj.formats['auto'])\n\t\treturn ([1, 1]);\n\treturn ([1, 0]);\n};\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3845, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3850, "column": 0}, "map": {"version":3,"sources":["file:///Users/monz/Code/queue/frontend/node_modules/sshpk/lib/identity.js"],"sourcesContent":["// Copyright 2017 Joyent, Inc.\n\nmodule.exports = Identity;\n\nvar assert = require('assert-plus');\nvar algs = require('./algs');\nvar crypto = require('crypto');\nvar Fingerprint = require('./fingerprint');\nvar Signature = require('./signature');\nvar errs = require('./errors');\nvar util = require('util');\nvar utils = require('./utils');\nvar asn1 = require('asn1');\nvar Buffer = require('safer-buffer').Buffer;\n\n/*JSSTYLED*/\nvar DNS_NAME_RE = /^([*]|[a-z0-9][a-z0-9\\-]{0,62})(?:\\.([*]|[a-z0-9][a-z0-9\\-]{0,62}))*$/i;\n\nvar oids = {};\noids.cn = '2.5.4.3';\noids.o = '2.5.4.10';\noids.ou = '2.5.4.11';\noids.l = '2.5.4.7';\noids.s = '2.5.4.8';\noids.c = '2.5.4.6';\noids.sn = '2.5.4.4';\noids.postalCode = '2.5.4.17';\noids.serialNumber = '2.5.4.5';\noids.street = '2.5.4.9';\noids.x500UniqueIdentifier = '2.5.4.45';\noids.role = '2.5.4.72';\noids.telephoneNumber = '2.5.4.20';\noids.description = '2.5.4.13';\noids.dc = '0.9.2342.19200300.100.1.25';\noids.uid = '0.9.2342.19200300.100.1.1';\noids.mail = '0.9.2342.19200300.100.1.3';\noids.title = '2.5.4.12';\noids.gn = '2.5.4.42';\noids.initials = '2.5.4.43';\noids.pseudonym = '2.5.4.65';\noids.emailAddress = '1.2.840.113549.1.9.1';\n\nvar unoids = {};\nObject.keys(oids).forEach(function (k) {\n\tunoids[oids[k]] = k;\n});\n\nfunction Identity(opts) {\n\tvar self = this;\n\tassert.object(opts, 'options');\n\tassert.arrayOfObject(opts.components, 'options.components');\n\tthis.components = opts.components;\n\tthis.componentLookup = {};\n\tthis.components.forEach(function (c) {\n\t\tif (c.name && !c.oid)\n\t\t\tc.oid = oids[c.name];\n\t\tif (c.oid && !c.name)\n\t\t\tc.name = unoids[c.oid];\n\t\tif (self.componentLookup[c.name] === undefined)\n\t\t\tself.componentLookup[c.name] = [];\n\t\tself.componentLookup[c.name].push(c);\n\t});\n\tif (this.componentLookup.cn && this.componentLookup.cn.length > 0) {\n\t\tthis.cn = this.componentLookup.cn[0].value;\n\t}\n\tassert.optionalString(opts.type, 'options.type');\n\tif (opts.type === undefined) {\n\t\tif (this.components.length === 1 &&\n\t\t    this.componentLookup.cn &&\n\t\t    this.componentLookup.cn.length === 1 &&\n\t\t    this.componentLookup.cn[0].value.match(DNS_NAME_RE)) {\n\t\t\tthis.type = 'host';\n\t\t\tthis.hostname = this.componentLookup.cn[0].value;\n\n\t\t} else if (this.componentLookup.dc &&\n\t\t    this.components.length === this.componentLookup.dc.length) {\n\t\t\tthis.type = 'host';\n\t\t\tthis.hostname = this.componentLookup.dc.map(\n\t\t\t    function (c) {\n\t\t\t\treturn (c.value);\n\t\t\t}).join('.');\n\n\t\t} else if (this.componentLookup.uid &&\n\t\t    this.components.length ===\n\t\t    this.componentLookup.uid.length) {\n\t\t\tthis.type = 'user';\n\t\t\tthis.uid = this.componentLookup.uid[0].value;\n\n\t\t} else if (this.componentLookup.cn &&\n\t\t    this.componentLookup.cn.length === 1 &&\n\t\t    this.componentLookup.cn[0].value.match(DNS_NAME_RE)) {\n\t\t\tthis.type = 'host';\n\t\t\tthis.hostname = this.componentLookup.cn[0].value;\n\n\t\t} else if (this.componentLookup.uid &&\n\t\t    this.componentLookup.uid.length === 1) {\n\t\t\tthis.type = 'user';\n\t\t\tthis.uid = this.componentLookup.uid[0].value;\n\n\t\t} else if (this.componentLookup.mail &&\n\t\t    this.componentLookup.mail.length === 1) {\n\t\t\tthis.type = 'email';\n\t\t\tthis.email = this.componentLookup.mail[0].value;\n\n\t\t} else if (this.componentLookup.cn &&\n\t\t    this.componentLookup.cn.length === 1) {\n\t\t\tthis.type = 'user';\n\t\t\tthis.uid = this.componentLookup.cn[0].value;\n\n\t\t} else {\n\t\t\tthis.type = 'unknown';\n\t\t}\n\t} else {\n\t\tthis.type = opts.type;\n\t\tif (this.type === 'host')\n\t\t\tthis.hostname = opts.hostname;\n\t\telse if (this.type === 'user')\n\t\t\tthis.uid = opts.uid;\n\t\telse if (this.type === 'email')\n\t\t\tthis.email = opts.email;\n\t\telse\n\t\t\tthrow (new Error('Unknown type ' + this.type));\n\t}\n}\n\nIdentity.prototype.toString = function () {\n\treturn (this.components.map(function (c) {\n\t\tvar n = c.name.toUpperCase();\n\t\t/*JSSTYLED*/\n\t\tn = n.replace(/=/g, '\\\\=');\n\t\tvar v = c.value;\n\t\t/*JSSTYLED*/\n\t\tv = v.replace(/,/g, '\\\\,');\n\t\treturn (n + '=' + v);\n\t}).join(', '));\n};\n\nIdentity.prototype.get = function (name, asArray) {\n\tassert.string(name, 'name');\n\tvar arr = this.componentLookup[name];\n\tif (arr === undefined || arr.length === 0)\n\t\treturn (undefined);\n\tif (!asArray && arr.length > 1)\n\t\tthrow (new Error('Multiple values for attribute ' + name));\n\tif (!asArray)\n\t\treturn (arr[0].value);\n\treturn (arr.map(function (c) {\n\t\treturn (c.value);\n\t}));\n};\n\nIdentity.prototype.toArray = function (idx) {\n\treturn (this.components.map(function (c) {\n\t\treturn ({\n\t\t\tname: c.name,\n\t\t\tvalue: c.value\n\t\t});\n\t}));\n};\n\n/*\n * These are from X.680 -- PrintableString allowed chars are in section 37.4\n * table 8. Spec for IA5Strings is \"1,6 + SPACE + DEL\" where 1 refers to\n * ISO IR #001 (standard ASCII control characters) and 6 refers to ISO IR #006\n * (the basic ASCII character set).\n */\n/* JSSTYLED */\nvar NOT_PRINTABLE = /[^a-zA-Z0-9 '(),+.\\/:=?-]/;\n/* JSSTYLED */\nvar NOT_IA5 = /[^\\x00-\\x7f]/;\n\nIdentity.prototype.toAsn1 = function (der, tag) {\n\tder.startSequence(tag);\n\tthis.components.forEach(function (c) {\n\t\tder.startSequence(asn1.Ber.Constructor | asn1.Ber.Set);\n\t\tder.startSequence();\n\t\tder.writeOID(c.oid);\n\t\t/*\n\t\t * If we fit in a PrintableString, use that. Otherwise use an\n\t\t * IA5String or UTF8String.\n\t\t *\n\t\t * If this identity was parsed from a DN, use the ASN.1 types\n\t\t * from the original representation (otherwise this might not\n\t\t * be a full match for the original in some validators).\n\t\t */\n\t\tif (c.asn1type === asn1.Ber.Utf8String ||\n\t\t    c.value.match(NOT_IA5)) {\n\t\t\tvar v = Buffer.from(c.value, 'utf8');\n\t\t\tder.writeBuffer(v, asn1.Ber.Utf8String);\n\n\t\t} else if (c.asn1type === asn1.Ber.IA5String ||\n\t\t    c.value.match(NOT_PRINTABLE)) {\n\t\t\tder.writeString(c.value, asn1.Ber.IA5String);\n\n\t\t} else {\n\t\t\tvar type = asn1.Ber.PrintableString;\n\t\t\tif (c.asn1type !== undefined)\n\t\t\t\ttype = c.asn1type;\n\t\t\tder.writeString(c.value, type);\n\t\t}\n\t\tder.endSequence();\n\t\tder.endSequence();\n\t});\n\tder.endSequence();\n};\n\nfunction globMatch(a, b) {\n\tif (a === '**' || b === '**')\n\t\treturn (true);\n\tvar aParts = a.split('.');\n\tvar bParts = b.split('.');\n\tif (aParts.length !== bParts.length)\n\t\treturn (false);\n\tfor (var i = 0; i < aParts.length; ++i) {\n\t\tif (aParts[i] === '*' || bParts[i] === '*')\n\t\t\tcontinue;\n\t\tif (aParts[i] !== bParts[i])\n\t\t\treturn (false);\n\t}\n\treturn (true);\n}\n\nIdentity.prototype.equals = function (other) {\n\tif (!Identity.isIdentity(other, [1, 0]))\n\t\treturn (false);\n\tif (other.components.length !== this.components.length)\n\t\treturn (false);\n\tfor (var i = 0; i < this.components.length; ++i) {\n\t\tif (this.components[i].oid !== other.components[i].oid)\n\t\t\treturn (false);\n\t\tif (!globMatch(this.components[i].value,\n\t\t    other.components[i].value)) {\n\t\t\treturn (false);\n\t\t}\n\t}\n\treturn (true);\n};\n\nIdentity.forHost = function (hostname) {\n\tassert.string(hostname, 'hostname');\n\treturn (new Identity({\n\t\ttype: 'host',\n\t\thostname: hostname,\n\t\tcomponents: [ { name: 'cn', value: hostname } ]\n\t}));\n};\n\nIdentity.forUser = function (uid) {\n\tassert.string(uid, 'uid');\n\treturn (new Identity({\n\t\ttype: 'user',\n\t\tuid: uid,\n\t\tcomponents: [ { name: 'uid', value: uid } ]\n\t}));\n};\n\nIdentity.forEmail = function (email) {\n\tassert.string(email, 'email');\n\treturn (new Identity({\n\t\ttype: 'email',\n\t\temail: email,\n\t\tcomponents: [ { name: 'mail', value: email } ]\n\t}));\n};\n\nIdentity.parseDN = function (dn) {\n\tassert.string(dn, 'dn');\n\tvar parts = [''];\n\tvar idx = 0;\n\tvar rem = dn;\n\twhile (rem.length > 0) {\n\t\tvar m;\n\t\t/*JSSTYLED*/\n\t\tif ((m = /^,/.exec(rem)) !== null) {\n\t\t\tparts[++idx] = '';\n\t\t\trem = rem.slice(m[0].length);\n\t\t/*JSSTYLED*/\n\t\t} else if ((m = /^\\\\,/.exec(rem)) !== null) {\n\t\t\tparts[idx] += ',';\n\t\t\trem = rem.slice(m[0].length);\n\t\t/*JSSTYLED*/\n\t\t} else if ((m = /^\\\\./.exec(rem)) !== null) {\n\t\t\tparts[idx] += m[0];\n\t\t\trem = rem.slice(m[0].length);\n\t\t/*JSSTYLED*/\n\t\t} else if ((m = /^[^\\\\,]+/.exec(rem)) !== null) {\n\t\t\tparts[idx] += m[0];\n\t\t\trem = rem.slice(m[0].length);\n\t\t} else {\n\t\t\tthrow (new Error('Failed to parse DN'));\n\t\t}\n\t}\n\tvar cmps = parts.map(function (c) {\n\t\tc = c.trim();\n\t\tvar eqPos = c.indexOf('=');\n\t\twhile (eqPos > 0 && c.charAt(eqPos - 1) === '\\\\')\n\t\t\teqPos = c.indexOf('=', eqPos + 1);\n\t\tif (eqPos === -1) {\n\t\t\tthrow (new Error('Failed to parse DN'));\n\t\t}\n\t\t/*JSSTYLED*/\n\t\tvar name = c.slice(0, eqPos).toLowerCase().replace(/\\\\=/g, '=');\n\t\tvar value = c.slice(eqPos + 1);\n\t\treturn ({ name: name, value: value });\n\t});\n\treturn (new Identity({ components: cmps }));\n};\n\nIdentity.fromArray = function (components) {\n\tassert.arrayOfObject(components, 'components');\n\tcomponents.forEach(function (cmp) {\n\t\tassert.object(cmp, 'component');\n\t\tassert.string(cmp.name, 'component.name');\n\t\tif (!Buffer.isBuffer(cmp.value) &&\n\t\t    !(typeof (cmp.value) === 'string')) {\n\t\t\tthrow (new Error('Invalid component value'));\n\t\t}\n\t});\n\treturn (new Identity({ components: components }));\n};\n\nIdentity.parseAsn1 = function (der, top) {\n\tvar components = [];\n\tder.readSequence(top);\n\tvar end = der.offset + der.length;\n\twhile (der.offset < end) {\n\t\tder.readSequence(asn1.Ber.Constructor | asn1.Ber.Set);\n\t\tvar after = der.offset + der.length;\n\t\tder.readSequence();\n\t\tvar oid = der.readOID();\n\t\tvar type = der.peek();\n\t\tvar value;\n\t\tswitch (type) {\n\t\tcase asn1.Ber.PrintableString:\n\t\tcase asn1.Ber.IA5String:\n\t\tcase asn1.Ber.OctetString:\n\t\tcase asn1.Ber.T61String:\n\t\t\tvalue = der.readString(type);\n\t\t\tbreak;\n\t\tcase asn1.Ber.Utf8String:\n\t\t\tvalue = der.readString(type, true);\n\t\t\tvalue = value.toString('utf8');\n\t\t\tbreak;\n\t\tcase asn1.Ber.CharacterString:\n\t\tcase asn1.Ber.BMPString:\n\t\t\tvalue = der.readString(type, true);\n\t\t\tvalue = value.toString('utf16le');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow (new Error('Unknown asn1 type ' + type));\n\t\t}\n\t\tcomponents.push({ oid: oid, asn1type: type, value: value });\n\t\tder._offset = after;\n\t}\n\tder._offset = end;\n\treturn (new Identity({\n\t\tcomponents: components\n\t}));\n};\n\nIdentity.isIdentity = function (obj, ver) {\n\treturn (utils.isCompatible(obj, Identity, ver));\n};\n\n/*\n * API versions for Identity:\n * [1,0] -- initial ver\n */\nIdentity.prototype._sshpkApiVersion = [1, 0];\n\nIdentity._oldVersionDetect = function (obj) {\n\treturn ([1, 0]);\n};\n"],"names":[],"mappings":"AAAA,8BAA8B;AAE9B,OAAO,OAAO,GAAG;AAEjB,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI,SAAS,+FAAwB,MAAM;AAE3C,UAAU,GACV,IAAI,cAAc;AAElB,IAAI,OAAO,CAAC;AACZ,KAAK,EAAE,GAAG;AACV,KAAK,CAAC,GAAG;AACT,KAAK,EAAE,GAAG;AACV,KAAK,CAAC,GAAG;AACT,KAAK,CAAC,GAAG;AACT,KAAK,CAAC,GAAG;AACT,KAAK,EAAE,GAAG;AACV,KAAK,UAAU,GAAG;AAClB,KAAK,YAAY,GAAG;AACpB,KAAK,MAAM,GAAG;AACd,KAAK,oBAAoB,GAAG;AAC5B,KAAK,IAAI,GAAG;AACZ,KAAK,eAAe,GAAG;AACvB,KAAK,WAAW,GAAG;AACnB,KAAK,EAAE,GAAG;AACV,KAAK,GAAG,GAAG;AACX,KAAK,IAAI,GAAG;AACZ,KAAK,KAAK,GAAG;AACb,KAAK,EAAE,GAAG;AACV,KAAK,QAAQ,GAAG;AAChB,KAAK,SAAS,GAAG;AACjB,KAAK,YAAY,GAAG;AAEpB,IAAI,SAAS,CAAC;AACd,OAAO,IAAI,CAAC,MAAM,OAAO,CAAC,SAAU,CAAC;IACpC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG;AACnB;AAEA,SAAS,SAAS,IAAI;IACrB,IAAI,OAAO,IAAI;IACf,OAAO,MAAM,CAAC,MAAM;IACpB,OAAO,aAAa,CAAC,KAAK,UAAU,EAAE;IACtC,IAAI,CAAC,UAAU,GAAG,KAAK,UAAU;IACjC,IAAI,CAAC,eAAe,GAAG,CAAC;IACxB,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,SAAU,CAAC;QAClC,IAAI,EAAE,IAAI,IAAI,CAAC,EAAE,GAAG,EACnB,EAAE,GAAG,GAAG,IAAI,CAAC,EAAE,IAAI,CAAC;QACrB,IAAI,EAAE,GAAG,IAAI,CAAC,EAAE,IAAI,EACnB,EAAE,IAAI,GAAG,MAAM,CAAC,EAAE,GAAG,CAAC;QACvB,IAAI,KAAK,eAAe,CAAC,EAAE,IAAI,CAAC,KAAK,WACpC,KAAK,eAAe,CAAC,EAAE,IAAI,CAAC,GAAG,EAAE;QAClC,KAAK,eAAe,CAAC,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC;IACnC;IACA,IAAI,IAAI,CAAC,eAAe,CAAC,EAAE,IAAI,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,MAAM,GAAG,GAAG;QAClE,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK;IAC3C;IACA,OAAO,cAAc,CAAC,KAAK,IAAI,EAAE;IACjC,IAAI,KAAK,IAAI,KAAK,WAAW;QAC5B,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,KAAK,KAC3B,IAAI,CAAC,eAAe,CAAC,EAAE,IACvB,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,MAAM,KAAK,KACnC,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,cAAc;YACxD,IAAI,CAAC,IAAI,GAAG;YACZ,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK;QAEjD,OAAO,IAAI,IAAI,CAAC,eAAe,CAAC,EAAE,IAC9B,IAAI,CAAC,UAAU,CAAC,MAAM,KAAK,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,MAAM,EAAE;YAC9D,IAAI,CAAC,IAAI,GAAG;YACZ,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,GAAG,CACvC,SAAU,CAAC;gBACd,OAAQ,EAAE,KAAK;YAChB,GAAG,IAAI,CAAC;QAET,OAAO,IAAI,IAAI,CAAC,eAAe,CAAC,GAAG,IAC/B,IAAI,CAAC,UAAU,CAAC,MAAM,KACtB,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,MAAM,EAAE;YACpC,IAAI,CAAC,IAAI,GAAG;YACZ,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,EAAE,CAAC,KAAK;QAE7C,OAAO,IAAI,IAAI,CAAC,eAAe,CAAC,EAAE,IAC9B,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,MAAM,KAAK,KACnC,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,cAAc;YACxD,IAAI,CAAC,IAAI,GAAG;YACZ,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK;QAEjD,OAAO,IAAI,IAAI,CAAC,eAAe,CAAC,GAAG,IAC/B,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,MAAM,KAAK,GAAG;YAC1C,IAAI,CAAC,IAAI,GAAG;YACZ,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,EAAE,CAAC,KAAK;QAE7C,OAAO,IAAI,IAAI,CAAC,eAAe,CAAC,IAAI,IAChC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,KAAK,GAAG;YAC3C,IAAI,CAAC,IAAI,GAAG;YACZ,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK;QAEhD,OAAO,IAAI,IAAI,CAAC,eAAe,CAAC,EAAE,IAC9B,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,MAAM,KAAK,GAAG;YACzC,IAAI,CAAC,IAAI,GAAG;YACZ,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK;QAE5C,OAAO;YACN,IAAI,CAAC,IAAI,GAAG;QACb;IACD,OAAO;QACN,IAAI,CAAC,IAAI,GAAG,KAAK,IAAI;QACrB,IAAI,IAAI,CAAC,IAAI,KAAK,QACjB,IAAI,CAAC,QAAQ,GAAG,KAAK,QAAQ;aACzB,IAAI,IAAI,CAAC,IAAI,KAAK,QACtB,IAAI,CAAC,GAAG,GAAG,KAAK,GAAG;aACf,IAAI,IAAI,CAAC,IAAI,KAAK,SACtB,IAAI,CAAC,KAAK,GAAG,KAAK,KAAK;aAEvB,MAAO,IAAI,MAAM,kBAAkB,IAAI,CAAC,IAAI;IAC9C;AACD;AAEA,SAAS,SAAS,CAAC,QAAQ,GAAG;IAC7B,OAAQ,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,SAAU,CAAC;QACtC,IAAI,IAAI,EAAE,IAAI,CAAC,WAAW;QAC1B,UAAU,GACV,IAAI,EAAE,OAAO,CAAC,MAAM;QACpB,IAAI,IAAI,EAAE,KAAK;QACf,UAAU,GACV,IAAI,EAAE,OAAO,CAAC,MAAM;QACpB,OAAQ,IAAI,MAAM;IACnB,GAAG,IAAI,CAAC;AACT;AAEA,SAAS,SAAS,CAAC,GAAG,GAAG,SAAU,IAAI,EAAE,OAAO;IAC/C,OAAO,MAAM,CAAC,MAAM;IACpB,IAAI,MAAM,IAAI,CAAC,eAAe,CAAC,KAAK;IACpC,IAAI,QAAQ,aAAa,IAAI,MAAM,KAAK,GACvC,OAAQ;IACT,IAAI,CAAC,WAAW,IAAI,MAAM,GAAG,GAC5B,MAAO,IAAI,MAAM,mCAAmC;IACrD,IAAI,CAAC,SACJ,OAAQ,GAAG,CAAC,EAAE,CAAC,KAAK;IACrB,OAAQ,IAAI,GAAG,CAAC,SAAU,CAAC;QAC1B,OAAQ,EAAE,KAAK;IAChB;AACD;AAEA,SAAS,SAAS,CAAC,OAAO,GAAG,SAAU,GAAG;IACzC,OAAQ,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,SAAU,CAAC;QACtC,OAAQ;YACP,MAAM,EAAE,IAAI;YACZ,OAAO,EAAE,KAAK;QACf;IACD;AACD;AAEA;;;;;CAKC,GACD,YAAY,GACZ,IAAI,gBAAgB;AACpB,YAAY,GACZ,IAAI,UAAU;AAEd,SAAS,SAAS,CAAC,MAAM,GAAG,SAAU,GAAG,EAAE,GAAG;IAC7C,IAAI,aAAa,CAAC;IAClB,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,SAAU,CAAC;QAClC,IAAI,aAAa,CAAC,KAAK,GAAG,CAAC,WAAW,GAAG,KAAK,GAAG,CAAC,GAAG;QACrD,IAAI,aAAa;QACjB,IAAI,QAAQ,CAAC,EAAE,GAAG;QAClB;;;;;;;GAOC,GACD,IAAI,EAAE,QAAQ,KAAK,KAAK,GAAG,CAAC,UAAU,IAClC,EAAE,KAAK,CAAC,KAAK,CAAC,UAAU;YAC3B,IAAI,IAAI,OAAO,IAAI,CAAC,EAAE,KAAK,EAAE;YAC7B,IAAI,WAAW,CAAC,GAAG,KAAK,GAAG,CAAC,UAAU;QAEvC,OAAO,IAAI,EAAE,QAAQ,KAAK,KAAK,GAAG,CAAC,SAAS,IACxC,EAAE,KAAK,CAAC,KAAK,CAAC,gBAAgB;YACjC,IAAI,WAAW,CAAC,EAAE,KAAK,EAAE,KAAK,GAAG,CAAC,SAAS;QAE5C,OAAO;YACN,IAAI,OAAO,KAAK,GAAG,CAAC,eAAe;YACnC,IAAI,EAAE,QAAQ,KAAK,WAClB,OAAO,EAAE,QAAQ;YAClB,IAAI,WAAW,CAAC,EAAE,KAAK,EAAE;QAC1B;QACA,IAAI,WAAW;QACf,IAAI,WAAW;IAChB;IACA,IAAI,WAAW;AAChB;AAEA,SAAS,UAAU,CAAC,EAAE,CAAC;IACtB,IAAI,MAAM,QAAQ,MAAM,MACvB,OAAQ;IACT,IAAI,SAAS,EAAE,KAAK,CAAC;IACrB,IAAI,SAAS,EAAE,KAAK,CAAC;IACrB,IAAI,OAAO,MAAM,KAAK,OAAO,MAAM,EAClC,OAAQ;IACT,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,MAAM,EAAE,EAAE,EAAG;QACvC,IAAI,MAAM,CAAC,EAAE,KAAK,OAAO,MAAM,CAAC,EAAE,KAAK,KACtC;QACD,IAAI,MAAM,CAAC,EAAE,KAAK,MAAM,CAAC,EAAE,EAC1B,OAAQ;IACV;IACA,OAAQ;AACT;AAEA,SAAS,SAAS,CAAC,MAAM,GAAG,SAAU,KAAK;IAC1C,IAAI,CAAC,SAAS,UAAU,CAAC,OAAO;QAAC;QAAG;KAAE,GACrC,OAAQ;IACT,IAAI,MAAM,UAAU,CAAC,MAAM,KAAK,IAAI,CAAC,UAAU,CAAC,MAAM,EACrD,OAAQ;IACT,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,EAAE,EAAG;QAChD,IAAI,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,GAAG,KAAK,MAAM,UAAU,CAAC,EAAE,CAAC,GAAG,EACrD,OAAQ;QACT,IAAI,CAAC,UAAU,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,KAAK,EACnC,MAAM,UAAU,CAAC,EAAE,CAAC,KAAK,GAAG;YAC/B,OAAQ;QACT;IACD;IACA,OAAQ;AACT;AAEA,SAAS,OAAO,GAAG,SAAU,QAAQ;IACpC,OAAO,MAAM,CAAC,UAAU;IACxB,OAAQ,IAAI,SAAS;QACpB,MAAM;QACN,UAAU;QACV,YAAY;YAAE;gBAAE,MAAM;gBAAM,OAAO;YAAS;SAAG;IAChD;AACD;AAEA,SAAS,OAAO,GAAG,SAAU,GAAG;IAC/B,OAAO,MAAM,CAAC,KAAK;IACnB,OAAQ,IAAI,SAAS;QACpB,MAAM;QACN,KAAK;QACL,YAAY;YAAE;gBAAE,MAAM;gBAAO,OAAO;YAAI;SAAG;IAC5C;AACD;AAEA,SAAS,QAAQ,GAAG,SAAU,KAAK;IAClC,OAAO,MAAM,CAAC,OAAO;IACrB,OAAQ,IAAI,SAAS;QACpB,MAAM;QACN,OAAO;QACP,YAAY;YAAE;gBAAE,MAAM;gBAAQ,OAAO;YAAM;SAAG;IAC/C;AACD;AAEA,SAAS,OAAO,GAAG,SAAU,EAAE;IAC9B,OAAO,MAAM,CAAC,IAAI;IAClB,IAAI,QAAQ;QAAC;KAAG;IAChB,IAAI,MAAM;IACV,IAAI,MAAM;IACV,MAAO,IAAI,MAAM,GAAG,EAAG;QACtB,IAAI;QACJ,UAAU,GACV,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,MAAM,MAAM;YAClC,KAAK,CAAC,EAAE,IAAI,GAAG;YACf,MAAM,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM;QAC5B,UAAU,GACV,OAAO,IAAI,CAAC,IAAI,OAAO,IAAI,CAAC,IAAI,MAAM,MAAM;YAC3C,KAAK,CAAC,IAAI,IAAI;YACd,MAAM,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM;QAC5B,UAAU,GACV,OAAO,IAAI,CAAC,IAAI,OAAO,IAAI,CAAC,IAAI,MAAM,MAAM;YAC3C,KAAK,CAAC,IAAI,IAAI,CAAC,CAAC,EAAE;YAClB,MAAM,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM;QAC5B,UAAU,GACV,OAAO,IAAI,CAAC,IAAI,WAAW,IAAI,CAAC,IAAI,MAAM,MAAM;YAC/C,KAAK,CAAC,IAAI,IAAI,CAAC,CAAC,EAAE;YAClB,MAAM,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM;QAC5B,OAAO;YACN,MAAO,IAAI,MAAM;QAClB;IACD;IACA,IAAI,OAAO,MAAM,GAAG,CAAC,SAAU,CAAC;QAC/B,IAAI,EAAE,IAAI;QACV,IAAI,QAAQ,EAAE,OAAO,CAAC;QACtB,MAAO,QAAQ,KAAK,EAAE,MAAM,CAAC,QAAQ,OAAO,KAC3C,QAAQ,EAAE,OAAO,CAAC,KAAK,QAAQ;QAChC,IAAI,UAAU,CAAC,GAAG;YACjB,MAAO,IAAI,MAAM;QAClB;QACA,UAAU,GACV,IAAI,OAAO,EAAE,KAAK,CAAC,GAAG,OAAO,WAAW,GAAG,OAAO,CAAC,QAAQ;QAC3D,IAAI,QAAQ,EAAE,KAAK,CAAC,QAAQ;QAC5B,OAAQ;YAAE,MAAM;YAAM,OAAO;QAAM;IACpC;IACA,OAAQ,IAAI,SAAS;QAAE,YAAY;IAAK;AACzC;AAEA,SAAS,SAAS,GAAG,SAAU,UAAU;IACxC,OAAO,aAAa,CAAC,YAAY;IACjC,WAAW,OAAO,CAAC,SAAU,GAAG;QAC/B,OAAO,MAAM,CAAC,KAAK;QACnB,OAAO,MAAM,CAAC,IAAI,IAAI,EAAE;QACxB,IAAI,CAAC,OAAO,QAAQ,CAAC,IAAI,KAAK,KAC1B,CAAC,CAAC,OAAQ,IAAI,KAAK,KAAM,QAAQ,GAAG;YACvC,MAAO,IAAI,MAAM;QAClB;IACD;IACA,OAAQ,IAAI,SAAS;QAAE,YAAY;IAAW;AAC/C;AAEA,SAAS,SAAS,GAAG,SAAU,GAAG,EAAE,GAAG;IACtC,IAAI,aAAa,EAAE;IACnB,IAAI,YAAY,CAAC;IACjB,IAAI,MAAM,IAAI,MAAM,GAAG,IAAI,MAAM;IACjC,MAAO,IAAI,MAAM,GAAG,IAAK;QACxB,IAAI,YAAY,CAAC,KAAK,GAAG,CAAC,WAAW,GAAG,KAAK,GAAG,CAAC,GAAG;QACpD,IAAI,QAAQ,IAAI,MAAM,GAAG,IAAI,MAAM;QACnC,IAAI,YAAY;QAChB,IAAI,MAAM,IAAI,OAAO;QACrB,IAAI,OAAO,IAAI,IAAI;QACnB,IAAI;QACJ,OAAQ;YACR,KAAK,KAAK,GAAG,CAAC,eAAe;YAC7B,KAAK,KAAK,GAAG,CAAC,SAAS;YACvB,KAAK,KAAK,GAAG,CAAC,WAAW;YACzB,KAAK,KAAK,GAAG,CAAC,SAAS;gBACtB,QAAQ,IAAI,UAAU,CAAC;gBACvB;YACD,KAAK,KAAK,GAAG,CAAC,UAAU;gBACvB,QAAQ,IAAI,UAAU,CAAC,MAAM;gBAC7B,QAAQ,MAAM,QAAQ,CAAC;gBACvB;YACD,KAAK,KAAK,GAAG,CAAC,eAAe;YAC7B,KAAK,KAAK,GAAG,CAAC,SAAS;gBACtB,QAAQ,IAAI,UAAU,CAAC,MAAM;gBAC7B,QAAQ,MAAM,QAAQ,CAAC;gBACvB;YACD;gBACC,MAAO,IAAI,MAAM,uBAAuB;QACzC;QACA,WAAW,IAAI,CAAC;YAAE,KAAK;YAAK,UAAU;YAAM,OAAO;QAAM;QACzD,IAAI,OAAO,GAAG;IACf;IACA,IAAI,OAAO,GAAG;IACd,OAAQ,IAAI,SAAS;QACpB,YAAY;IACb;AACD;AAEA,SAAS,UAAU,GAAG,SAAU,GAAG,EAAE,GAAG;IACvC,OAAQ,MAAM,YAAY,CAAC,KAAK,UAAU;AAC3C;AAEA;;;CAGC,GACD,SAAS,SAAS,CAAC,gBAAgB,GAAG;IAAC;IAAG;CAAE;AAE5C,SAAS,iBAAiB,GAAG,SAAU,GAAG;IACzC,OAAQ;QAAC;QAAG;KAAE;AACf","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4181, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4186, "column": 0}, "map": {"version":3,"sources":["file:///Users/monz/Code/queue/frontend/node_modules/sshpk/lib/formats/openssh-cert.js"],"sourcesContent":["// Copyright 2017 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\tverify: verify,\n\tsign: sign,\n\tsignAsync: signAsync,\n\twrite: write,\n\n\t/* Internal private API */\n\tfromBuffer: fromBuffer,\n\ttoBuffer: toBuffer\n};\n\nvar assert = require('assert-plus');\nvar SSHBuffer = require('../ssh-buffer');\nvar crypto = require('crypto');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('../algs');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar Identity = require('../identity');\nvar rfc4253 = require('./rfc4253');\nvar Signature = require('../signature');\nvar utils = require('../utils');\nvar Certificate = require('../certificate');\n\nfunction verify(cert, key) {\n\t/*\n\t * We always give an issuerKey, so if our verify() is being called then\n\t * there was no signature. Return false.\n\t */\n\treturn (false);\n}\n\nvar TYPES = {\n\t'user': 1,\n\t'host': 2\n};\nObject.keys(TYPES).forEach(function (k) { TYPES[TYPES[k]] = k; });\n\nvar ECDSA_ALGO = /^ecdsa-sha2-([^@-]+)-cert-v01@openssh.com$/;\n\nfunction read(buf, options) {\n\tif (Buffer.isBuffer(buf))\n\t\tbuf = buf.toString('ascii');\n\tvar parts = buf.trim().split(/[ \\t\\n]+/g);\n\tif (parts.length < 2 || parts.length > 3)\n\t\tthrow (new Error('Not a valid SSH certificate line'));\n\n\tvar algo = parts[0];\n\tvar data = parts[1];\n\n\tdata = Buffer.from(data, 'base64');\n\treturn (fromBuffer(data, algo));\n}\n\nfunction fromBuffer(data, algo, partial) {\n\tvar sshbuf = new SSHBuffer({ buffer: data });\n\tvar innerAlgo = sshbuf.readString();\n\tif (algo !== undefined && innerAlgo !== algo)\n\t\tthrow (new Error('SSH certificate algorithm mismatch'));\n\tif (algo === undefined)\n\t\talgo = innerAlgo;\n\n\tvar cert = {};\n\tcert.signatures = {};\n\tcert.signatures.openssh = {};\n\n\tcert.signatures.openssh.nonce = sshbuf.readBuffer();\n\n\tvar key = {};\n\tvar parts = (key.parts = []);\n\tkey.type = getAlg(algo);\n\n\tvar partCount = algs.info[key.type].parts.length;\n\twhile (parts.length < partCount)\n\t\tparts.push(sshbuf.readPart());\n\tassert.ok(parts.length >= 1, 'key must have at least one part');\n\n\tvar algInfo = algs.info[key.type];\n\tif (key.type === 'ecdsa') {\n\t\tvar res = ECDSA_ALGO.exec(algo);\n\t\tassert.ok(res !== null);\n\t\tassert.strictEqual(res[1], parts[0].data.toString());\n\t}\n\n\tfor (var i = 0; i < algInfo.parts.length; ++i) {\n\t\tparts[i].name = algInfo.parts[i];\n\t\tif (parts[i].name !== 'curve' &&\n\t\t    algInfo.normalize !== false) {\n\t\t\tvar p = parts[i];\n\t\t\tp.data = utils.mpNormalize(p.data);\n\t\t}\n\t}\n\n\tcert.subjectKey = new Key(key);\n\n\tcert.serial = sshbuf.readInt64();\n\n\tvar type = TYPES[sshbuf.readInt()];\n\tassert.string(type, 'valid cert type');\n\n\tcert.signatures.openssh.keyId = sshbuf.readString();\n\n\tvar principals = [];\n\tvar pbuf = sshbuf.readBuffer();\n\tvar psshbuf = new SSHBuffer({ buffer: pbuf });\n\twhile (!psshbuf.atEnd())\n\t\tprincipals.push(psshbuf.readString());\n\tif (principals.length === 0)\n\t\tprincipals = ['*'];\n\n\tcert.subjects = principals.map(function (pr) {\n\t\tif (type === 'user')\n\t\t\treturn (Identity.forUser(pr));\n\t\telse if (type === 'host')\n\t\t\treturn (Identity.forHost(pr));\n\t\tthrow (new Error('Unknown identity type ' + type));\n\t});\n\n\tcert.validFrom = int64ToDate(sshbuf.readInt64());\n\tcert.validUntil = int64ToDate(sshbuf.readInt64());\n\n\tvar exts = [];\n\tvar extbuf = new SSHBuffer({ buffer: sshbuf.readBuffer() });\n\tvar ext;\n\twhile (!extbuf.atEnd()) {\n\t\text = { critical: true };\n\t\text.name = extbuf.readString();\n\t\text.data = extbuf.readBuffer();\n\t\texts.push(ext);\n\t}\n\textbuf = new SSHBuffer({ buffer: sshbuf.readBuffer() });\n\twhile (!extbuf.atEnd()) {\n\t\text = { critical: false };\n\t\text.name = extbuf.readString();\n\t\text.data = extbuf.readBuffer();\n\t\texts.push(ext);\n\t}\n\tcert.signatures.openssh.exts = exts;\n\n\t/* reserved */\n\tsshbuf.readBuffer();\n\n\tvar signingKeyBuf = sshbuf.readBuffer();\n\tcert.issuerKey = rfc4253.read(signingKeyBuf);\n\n\t/*\n\t * OpenSSH certs don't give the identity of the issuer, just their\n\t * public key. So, we use an Identity that matches anything. The\n\t * isSignedBy() function will later tell you if the key matches.\n\t */\n\tcert.issuer = Identity.forHost('**');\n\n\tvar sigBuf = sshbuf.readBuffer();\n\tcert.signatures.openssh.signature =\n\t    Signature.parse(sigBuf, cert.issuerKey.type, 'ssh');\n\n\tif (partial !== undefined) {\n\t\tpartial.remainder = sshbuf.remainder();\n\t\tpartial.consumed = sshbuf._offset;\n\t}\n\n\treturn (new Certificate(cert));\n}\n\nfunction int64ToDate(buf) {\n\tvar i = buf.readUInt32BE(0) * 4294967296;\n\ti += buf.readUInt32BE(4);\n\tvar d = new Date();\n\td.setTime(i * 1000);\n\td.sourceInt64 = buf;\n\treturn (d);\n}\n\nfunction dateToInt64(date) {\n\tif (date.sourceInt64 !== undefined)\n\t\treturn (date.sourceInt64);\n\tvar i = Math.round(date.getTime() / 1000);\n\tvar upper = Math.floor(i / 4294967296);\n\tvar lower = Math.floor(i % 4294967296);\n\tvar buf = Buffer.alloc(8);\n\tbuf.writeUInt32BE(upper, 0);\n\tbuf.writeUInt32BE(lower, 4);\n\treturn (buf);\n}\n\nfunction sign(cert, key) {\n\tif (cert.signatures.openssh === undefined)\n\t\tcert.signatures.openssh = {};\n\ttry {\n\t\tvar blob = toBuffer(cert, true);\n\t} catch (e) {\n\t\tdelete (cert.signatures.openssh);\n\t\treturn (false);\n\t}\n\tvar sig = cert.signatures.openssh;\n\tvar hashAlgo = undefined;\n\tif (key.type === 'rsa' || key.type === 'dsa')\n\t\thashAlgo = 'sha1';\n\tvar signer = key.createSign(hashAlgo);\n\tsigner.write(blob);\n\tsig.signature = signer.sign();\n\treturn (true);\n}\n\nfunction signAsync(cert, signer, done) {\n\tif (cert.signatures.openssh === undefined)\n\t\tcert.signatures.openssh = {};\n\ttry {\n\t\tvar blob = toBuffer(cert, true);\n\t} catch (e) {\n\t\tdelete (cert.signatures.openssh);\n\t\tdone(e);\n\t\treturn;\n\t}\n\tvar sig = cert.signatures.openssh;\n\n\tsigner(blob, function (err, signature) {\n\t\tif (err) {\n\t\t\tdone(err);\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\t/*\n\t\t\t * This will throw if the signature isn't of a\n\t\t\t * type/algo that can be used for SSH.\n\t\t\t */\n\t\t\tsignature.toBuffer('ssh');\n\t\t} catch (e) {\n\t\t\tdone(e);\n\t\t\treturn;\n\t\t}\n\t\tsig.signature = signature;\n\t\tdone();\n\t});\n}\n\nfunction write(cert, options) {\n\tif (options === undefined)\n\t\toptions = {};\n\n\tvar blob = toBuffer(cert);\n\tvar out = getCertType(cert.subjectKey) + ' ' + blob.toString('base64');\n\tif (options.comment)\n\t\tout = out + ' ' + options.comment;\n\treturn (out);\n}\n\n\nfunction toBuffer(cert, noSig) {\n\tassert.object(cert.signatures.openssh, 'signature for openssh format');\n\tvar sig = cert.signatures.openssh;\n\n\tif (sig.nonce === undefined)\n\t\tsig.nonce = crypto.randomBytes(16);\n\tvar buf = new SSHBuffer({});\n\tbuf.writeString(getCertType(cert.subjectKey));\n\tbuf.writeBuffer(sig.nonce);\n\n\tvar key = cert.subjectKey;\n\tvar algInfo = algs.info[key.type];\n\talgInfo.parts.forEach(function (part) {\n\t\tbuf.writePart(key.part[part]);\n\t});\n\n\tbuf.writeInt64(cert.serial);\n\n\tvar type = cert.subjects[0].type;\n\tassert.notStrictEqual(type, 'unknown');\n\tcert.subjects.forEach(function (id) {\n\t\tassert.strictEqual(id.type, type);\n\t});\n\ttype = TYPES[type];\n\tbuf.writeInt(type);\n\n\tif (sig.keyId === undefined) {\n\t\tsig.keyId = cert.subjects[0].type + '_' +\n\t\t    (cert.subjects[0].uid || cert.subjects[0].hostname);\n\t}\n\tbuf.writeString(sig.keyId);\n\n\tvar sub = new SSHBuffer({});\n\tcert.subjects.forEach(function (id) {\n\t\tif (type === TYPES.host)\n\t\t\tsub.writeString(id.hostname);\n\t\telse if (type === TYPES.user)\n\t\t\tsub.writeString(id.uid);\n\t});\n\tbuf.writeBuffer(sub.toBuffer());\n\n\tbuf.writeInt64(dateToInt64(cert.validFrom));\n\tbuf.writeInt64(dateToInt64(cert.validUntil));\n\n\tvar exts = sig.exts;\n\tif (exts === undefined)\n\t\texts = [];\n\n\tvar extbuf = new SSHBuffer({});\n\texts.forEach(function (ext) {\n\t\tif (ext.critical !== true)\n\t\t\treturn;\n\t\textbuf.writeString(ext.name);\n\t\textbuf.writeBuffer(ext.data);\n\t});\n\tbuf.writeBuffer(extbuf.toBuffer());\n\n\textbuf = new SSHBuffer({});\n\texts.forEach(function (ext) {\n\t\tif (ext.critical === true)\n\t\t\treturn;\n\t\textbuf.writeString(ext.name);\n\t\textbuf.writeBuffer(ext.data);\n\t});\n\tbuf.writeBuffer(extbuf.toBuffer());\n\n\t/* reserved */\n\tbuf.writeBuffer(Buffer.alloc(0));\n\n\tsub = rfc4253.write(cert.issuerKey);\n\tbuf.writeBuffer(sub);\n\n\tif (!noSig)\n\t\tbuf.writeBuffer(sig.signature.toBuffer('ssh'));\n\n\treturn (buf.toBuffer());\n}\n\nfunction getAlg(certType) {\n\tif (certType === 'ssh-rsa-cert-v01@openssh.com')\n\t\treturn ('rsa');\n\tif (certType === 'ssh-dss-cert-v01@openssh.com')\n\t\treturn ('dsa');\n\tif (certType.match(ECDSA_ALGO))\n\t\treturn ('ecdsa');\n\tif (certType === 'ssh-ed25519-cert-v01@openssh.com')\n\t\treturn ('ed25519');\n\tthrow (new Error('Unsupported cert type ' + certType));\n}\n\nfunction getCertType(key) {\n\tif (key.type === 'rsa')\n\t\treturn ('ssh-rsa-cert-v01@openssh.com');\n\tif (key.type === 'dsa')\n\t\treturn ('ssh-dss-cert-v01@openssh.com');\n\tif (key.type === 'ecdsa')\n\t\treturn ('ecdsa-sha2-' + key.curve + '-cert-v01@openssh.com');\n\tif (key.type === 'ed25519')\n\t\treturn ('ssh-ed25519-cert-v01@openssh.com');\n\tthrow (new Error('Unsupported key type ' + key.type));\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4460, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4465, "column": 0}, "map": {"version":3,"sources":["file:///Users/monz/Code/queue/frontend/node_modules/sshpk/lib/formats/x509.js"],"sourcesContent":["// Copyright 2017 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\tverify: verify,\n\tsign: sign,\n\tsignAsync: signAsync,\n\twrite: write\n};\n\nvar assert = require('assert-plus');\nvar asn1 = require('asn1');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('../algs');\nvar utils = require('../utils');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar pem = require('./pem');\nvar Identity = require('../identity');\nvar Signature = require('../signature');\nvar Certificate = require('../certificate');\nvar pkcs8 = require('./pkcs8');\n\n/*\n * This file is based on RFC5280 (X.509).\n */\n\n/* Helper to read in a single mpint */\nfunction readMPInt(der, nm) {\n\tassert.strictEqual(der.peek(), asn1.Ber.Integer,\n\t    nm + ' is not an Integer');\n\treturn (utils.mpNormalize(der.readString(asn1.Ber.Integer, true)));\n}\n\nfunction verify(cert, key) {\n\tvar sig = cert.signatures.x509;\n\tassert.object(sig, 'x509 signature');\n\n\tvar algParts = sig.algo.split('-');\n\tif (algParts[0] !== key.type)\n\t\treturn (false);\n\n\tvar blob = sig.cache;\n\tif (blob === undefined) {\n\t\tvar der = new asn1.BerWriter();\n\t\twriteTBSCert(cert, der);\n\t\tblob = der.buffer;\n\t}\n\n\tvar verifier = key.createVerify(algParts[1]);\n\tverifier.write(blob);\n\treturn (verifier.verify(sig.signature));\n}\n\nfunction Local(i) {\n\treturn (asn1.Ber.Context | asn1.Ber.Constructor | i);\n}\n\nfunction Context(i) {\n\treturn (asn1.Ber.Context | i);\n}\n\nvar SIGN_ALGS = {\n\t'rsa-md5': '1.2.840.113549.1.1.4',\n\t'rsa-sha1': '1.2.840.113549.1.1.5',\n\t'rsa-sha256': '1.2.840.113549.1.1.11',\n\t'rsa-sha384': '1.2.840.113549.1.1.12',\n\t'rsa-sha512': '1.2.840.113549.1.1.13',\n\t'dsa-sha1': '1.2.840.10040.4.3',\n\t'dsa-sha256': '2.16.840.1.101.3.4.3.2',\n\t'ecdsa-sha1': '1.2.840.10045.4.1',\n\t'ecdsa-sha256': '1.2.840.10045.4.3.2',\n\t'ecdsa-sha384': '1.2.840.10045.4.3.3',\n\t'ecdsa-sha512': '1.2.840.10045.4.3.4',\n\t'ed25519-sha512': '1.3.101.112'\n};\nObject.keys(SIGN_ALGS).forEach(function (k) {\n\tSIGN_ALGS[SIGN_ALGS[k]] = k;\n});\nSIGN_ALGS['1.3.14.3.2.3'] = 'rsa-md5';\nSIGN_ALGS['1.3.14.3.2.29'] = 'rsa-sha1';\n\nvar EXTS = {\n\t'issuerKeyId': '2.5.29.35',\n\t'altName': '2.5.29.17',\n\t'basicConstraints': '2.5.29.19',\n\t'keyUsage': '2.5.29.15',\n\t'extKeyUsage': '2.5.29.37'\n};\n\nfunction read(buf, options) {\n\tif (typeof (buf) === 'string') {\n\t\tbuf = Buffer.from(buf, 'binary');\n\t}\n\tassert.buffer(buf, 'buf');\n\n\tvar der = new asn1.BerReader(buf);\n\n\tder.readSequence();\n\tif (Math.abs(der.length - der.remain) > 1) {\n\t\tthrow (new Error('DER sequence does not contain whole byte ' +\n\t\t    'stream'));\n\t}\n\n\tvar tbsStart = der.offset;\n\tder.readSequence();\n\tvar sigOffset = der.offset + der.length;\n\tvar tbsEnd = sigOffset;\n\n\tif (der.peek() === Local(0)) {\n\t\tder.readSequence(Local(0));\n\t\tvar version = der.readInt();\n\t\tassert.ok(version <= 3,\n\t\t    'only x.509 versions up to v3 supported');\n\t}\n\n\tvar cert = {};\n\tcert.signatures = {};\n\tvar sig = (cert.signatures.x509 = {});\n\tsig.extras = {};\n\n\tcert.serial = readMPInt(der, 'serial');\n\n\tder.readSequence();\n\tvar after = der.offset + der.length;\n\tvar certAlgOid = der.readOID();\n\tvar certAlg = SIGN_ALGS[certAlgOid];\n\tif (certAlg === undefined)\n\t\tthrow (new Error('unknown signature algorithm ' + certAlgOid));\n\n\tder._offset = after;\n\tcert.issuer = Identity.parseAsn1(der);\n\n\tder.readSequence();\n\tcert.validFrom = readDate(der);\n\tcert.validUntil = readDate(der);\n\n\tcert.subjects = [Identity.parseAsn1(der)];\n\n\tder.readSequence();\n\tafter = der.offset + der.length;\n\tcert.subjectKey = pkcs8.readPkcs8(undefined, 'public', der);\n\tder._offset = after;\n\n\t/* issuerUniqueID */\n\tif (der.peek() === Local(1)) {\n\t\tder.readSequence(Local(1));\n\t\tsig.extras.issuerUniqueID =\n\t\t    buf.slice(der.offset, der.offset + der.length);\n\t\tder._offset += der.length;\n\t}\n\n\t/* subjectUniqueID */\n\tif (der.peek() === Local(2)) {\n\t\tder.readSequence(Local(2));\n\t\tsig.extras.subjectUniqueID =\n\t\t    buf.slice(der.offset, der.offset + der.length);\n\t\tder._offset += der.length;\n\t}\n\n\t/* extensions */\n\tif (der.peek() === Local(3)) {\n\t\tder.readSequence(Local(3));\n\t\tvar extEnd = der.offset + der.length;\n\t\tder.readSequence();\n\n\t\twhile (der.offset < extEnd)\n\t\t\treadExtension(cert, buf, der);\n\n\t\tassert.strictEqual(der.offset, extEnd);\n\t}\n\n\tassert.strictEqual(der.offset, sigOffset);\n\n\tder.readSequence();\n\tafter = der.offset + der.length;\n\tvar sigAlgOid = der.readOID();\n\tvar sigAlg = SIGN_ALGS[sigAlgOid];\n\tif (sigAlg === undefined)\n\t\tthrow (new Error('unknown signature algorithm ' + sigAlgOid));\n\tder._offset = after;\n\n\tvar sigData = der.readString(asn1.Ber.BitString, true);\n\tif (sigData[0] === 0)\n\t\tsigData = sigData.slice(1);\n\tvar algParts = sigAlg.split('-');\n\n\tsig.signature = Signature.parse(sigData, algParts[0], 'asn1');\n\tsig.signature.hashAlgorithm = algParts[1];\n\tsig.algo = sigAlg;\n\tsig.cache = buf.slice(tbsStart, tbsEnd);\n\n\treturn (new Certificate(cert));\n}\n\nfunction readDate(der) {\n\tif (der.peek() === asn1.Ber.UTCTime) {\n\t\treturn (utcTimeToDate(der.readString(asn1.Ber.UTCTime)));\n\t} else if (der.peek() === asn1.Ber.GeneralizedTime) {\n\t\treturn (gTimeToDate(der.readString(asn1.Ber.GeneralizedTime)));\n\t} else {\n\t\tthrow (new Error('Unsupported date format'));\n\t}\n}\n\nfunction writeDate(der, date) {\n\tif (date.getUTCFullYear() >= 2050 || date.getUTCFullYear() < 1950) {\n\t\tder.writeString(dateToGTime(date), asn1.Ber.GeneralizedTime);\n\t} else {\n\t\tder.writeString(dateToUTCTime(date), asn1.Ber.UTCTime);\n\t}\n}\n\n/* RFC5280, section 4.2.1.6 (GeneralName type) */\nvar ALTNAME = {\n\tOtherName: Local(0),\n\tRFC822Name: Context(1),\n\tDNSName: Context(2),\n\tX400Address: Local(3),\n\tDirectoryName: Local(4),\n\tEDIPartyName: Local(5),\n\tURI: Context(6),\n\tIPAddress: Context(7),\n\tOID: Context(8)\n};\n\n/* RFC5280, section 4.2.1.12 (KeyPurposeId) */\nvar EXTPURPOSE = {\n\t'serverAuth': '1.3.6.1.5.5.7.3.1',\n\t'clientAuth': '1.3.6.1.5.5.7.3.2',\n\t'codeSigning': '1.3.6.1.5.5.7.3.3',\n\n\t/* See https://github.com/joyent/oid-docs/blob/master/root.md */\n\t'joyentDocker': '1.3.6.1.4.1.38678.1.4.1',\n\t'joyentCmon': '1.3.6.1.4.1.38678.1.4.2'\n};\nvar EXTPURPOSE_REV = {};\nObject.keys(EXTPURPOSE).forEach(function (k) {\n\tEXTPURPOSE_REV[EXTPURPOSE[k]] = k;\n});\n\nvar KEYUSEBITS = [\n\t'signature', 'identity', 'keyEncryption',\n\t'encryption', 'keyAgreement', 'ca', 'crl'\n];\n\nfunction readExtension(cert, buf, der) {\n\tder.readSequence();\n\tvar after = der.offset + der.length;\n\tvar extId = der.readOID();\n\tvar id;\n\tvar sig = cert.signatures.x509;\n\tif (!sig.extras.exts)\n\t\tsig.extras.exts = [];\n\n\tvar critical;\n\tif (der.peek() === asn1.Ber.Boolean)\n\t\tcritical = der.readBoolean();\n\n\tswitch (extId) {\n\tcase (EXTS.basicConstraints):\n\t\tder.readSequence(asn1.Ber.OctetString);\n\t\tder.readSequence();\n\t\tvar bcEnd = der.offset + der.length;\n\t\tvar ca = false;\n\t\tif (der.peek() === asn1.Ber.Boolean)\n\t\t\tca = der.readBoolean();\n\t\tif (cert.purposes === undefined)\n\t\t\tcert.purposes = [];\n\t\tif (ca === true)\n\t\t\tcert.purposes.push('ca');\n\t\tvar bc = { oid: extId, critical: critical };\n\t\tif (der.offset < bcEnd && der.peek() === asn1.Ber.Integer)\n\t\t\tbc.pathLen = der.readInt();\n\t\tsig.extras.exts.push(bc);\n\t\tbreak;\n\tcase (EXTS.extKeyUsage):\n\t\tder.readSequence(asn1.Ber.OctetString);\n\t\tder.readSequence();\n\t\tif (cert.purposes === undefined)\n\t\t\tcert.purposes = [];\n\t\tvar ekEnd = der.offset + der.length;\n\t\twhile (der.offset < ekEnd) {\n\t\t\tvar oid = der.readOID();\n\t\t\tcert.purposes.push(EXTPURPOSE_REV[oid] || oid);\n\t\t}\n\t\t/*\n\t\t * This is a bit of a hack: in the case where we have a cert\n\t\t * that's only allowed to do serverAuth or clientAuth (and not\n\t\t * the other), we want to make sure all our Subjects are of\n\t\t * the right type. But we already parsed our Subjects and\n\t\t * decided if they were hosts or users earlier (since it appears\n\t\t * first in the cert).\n\t\t *\n\t\t * So we go through and mutate them into the right kind here if\n\t\t * it doesn't match. This might not be hugely beneficial, as it\n\t\t * seems that single-purpose certs are not often seen in the\n\t\t * wild.\n\t\t */\n\t\tif (cert.purposes.indexOf('serverAuth') !== -1 &&\n\t\t    cert.purposes.indexOf('clientAuth') === -1) {\n\t\t\tcert.subjects.forEach(function (ide) {\n\t\t\t\tif (ide.type !== 'host') {\n\t\t\t\t\tide.type = 'host';\n\t\t\t\t\tide.hostname = ide.uid ||\n\t\t\t\t\t    ide.email ||\n\t\t\t\t\t    ide.components[0].value;\n\t\t\t\t}\n\t\t\t});\n\t\t} else if (cert.purposes.indexOf('clientAuth') !== -1 &&\n\t\t    cert.purposes.indexOf('serverAuth') === -1) {\n\t\t\tcert.subjects.forEach(function (ide) {\n\t\t\t\tif (ide.type !== 'user') {\n\t\t\t\t\tide.type = 'user';\n\t\t\t\t\tide.uid = ide.hostname ||\n\t\t\t\t\t    ide.email ||\n\t\t\t\t\t    ide.components[0].value;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tsig.extras.exts.push({ oid: extId, critical: critical });\n\t\tbreak;\n\tcase (EXTS.keyUsage):\n\t\tder.readSequence(asn1.Ber.OctetString);\n\t\tvar bits = der.readString(asn1.Ber.BitString, true);\n\t\tvar setBits = readBitField(bits, KEYUSEBITS);\n\t\tsetBits.forEach(function (bit) {\n\t\t\tif (cert.purposes === undefined)\n\t\t\t\tcert.purposes = [];\n\t\t\tif (cert.purposes.indexOf(bit) === -1)\n\t\t\t\tcert.purposes.push(bit);\n\t\t});\n\t\tsig.extras.exts.push({ oid: extId, critical: critical,\n\t\t    bits: bits });\n\t\tbreak;\n\tcase (EXTS.altName):\n\t\tder.readSequence(asn1.Ber.OctetString);\n\t\tder.readSequence();\n\t\tvar aeEnd = der.offset + der.length;\n\t\twhile (der.offset < aeEnd) {\n\t\t\tswitch (der.peek()) {\n\t\t\tcase ALTNAME.OtherName:\n\t\t\tcase ALTNAME.EDIPartyName:\n\t\t\t\tder.readSequence();\n\t\t\t\tder._offset += der.length;\n\t\t\t\tbreak;\n\t\t\tcase ALTNAME.OID:\n\t\t\t\tder.readOID(ALTNAME.OID);\n\t\t\t\tbreak;\n\t\t\tcase ALTNAME.RFC822Name:\n\t\t\t\t/* RFC822 specifies email addresses */\n\t\t\t\tvar email = der.readString(ALTNAME.RFC822Name);\n\t\t\t\tid = Identity.forEmail(email);\n\t\t\t\tif (!cert.subjects[0].equals(id))\n\t\t\t\t\tcert.subjects.push(id);\n\t\t\t\tbreak;\n\t\t\tcase ALTNAME.DirectoryName:\n\t\t\t\tder.readSequence(ALTNAME.DirectoryName);\n\t\t\t\tid = Identity.parseAsn1(der);\n\t\t\t\tif (!cert.subjects[0].equals(id))\n\t\t\t\t\tcert.subjects.push(id);\n\t\t\t\tbreak;\n\t\t\tcase ALTNAME.DNSName:\n\t\t\t\tvar host = der.readString(\n\t\t\t\t    ALTNAME.DNSName);\n\t\t\t\tid = Identity.forHost(host);\n\t\t\t\tif (!cert.subjects[0].equals(id))\n\t\t\t\t\tcert.subjects.push(id);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tder.readString(der.peek());\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tsig.extras.exts.push({ oid: extId, critical: critical });\n\t\tbreak;\n\tdefault:\n\t\tsig.extras.exts.push({\n\t\t\toid: extId,\n\t\t\tcritical: critical,\n\t\t\tdata: der.readString(asn1.Ber.OctetString, true)\n\t\t});\n\t\tbreak;\n\t}\n\n\tder._offset = after;\n}\n\nvar UTCTIME_RE =\n    /^([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})?Z$/;\nfunction utcTimeToDate(t) {\n\tvar m = t.match(UTCTIME_RE);\n\tassert.ok(m, 'timestamps must be in UTC');\n\tvar d = new Date();\n\n\tvar thisYear = d.getUTCFullYear();\n\tvar century = Math.floor(thisYear / 100) * 100;\n\n\tvar year = parseInt(m[1], 10);\n\tif (thisYear % 100 < 50 && year >= 60)\n\t\tyear += (century - 1);\n\telse\n\t\tyear += century;\n\td.setUTCFullYear(year, parseInt(m[2], 10) - 1, parseInt(m[3], 10));\n\td.setUTCHours(parseInt(m[4], 10), parseInt(m[5], 10));\n\tif (m[6] && m[6].length > 0)\n\t\td.setUTCSeconds(parseInt(m[6], 10));\n\treturn (d);\n}\n\nvar GTIME_RE =\n    /^([0-9]{4})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})?Z$/;\nfunction gTimeToDate(t) {\n\tvar m = t.match(GTIME_RE);\n\tassert.ok(m);\n\tvar d = new Date();\n\n\td.setUTCFullYear(parseInt(m[1], 10), parseInt(m[2], 10) - 1,\n\t    parseInt(m[3], 10));\n\td.setUTCHours(parseInt(m[4], 10), parseInt(m[5], 10));\n\tif (m[6] && m[6].length > 0)\n\t\td.setUTCSeconds(parseInt(m[6], 10));\n\treturn (d);\n}\n\nfunction zeroPad(n, m) {\n\tif (m === undefined)\n\t\tm = 2;\n\tvar s = '' + n;\n\twhile (s.length < m)\n\t\ts = '0' + s;\n\treturn (s);\n}\n\nfunction dateToUTCTime(d) {\n\tvar s = '';\n\ts += zeroPad(d.getUTCFullYear() % 100);\n\ts += zeroPad(d.getUTCMonth() + 1);\n\ts += zeroPad(d.getUTCDate());\n\ts += zeroPad(d.getUTCHours());\n\ts += zeroPad(d.getUTCMinutes());\n\ts += zeroPad(d.getUTCSeconds());\n\ts += 'Z';\n\treturn (s);\n}\n\nfunction dateToGTime(d) {\n\tvar s = '';\n\ts += zeroPad(d.getUTCFullYear(), 4);\n\ts += zeroPad(d.getUTCMonth() + 1);\n\ts += zeroPad(d.getUTCDate());\n\ts += zeroPad(d.getUTCHours());\n\ts += zeroPad(d.getUTCMinutes());\n\ts += zeroPad(d.getUTCSeconds());\n\ts += 'Z';\n\treturn (s);\n}\n\nfunction sign(cert, key) {\n\tif (cert.signatures.x509 === undefined)\n\t\tcert.signatures.x509 = {};\n\tvar sig = cert.signatures.x509;\n\n\tsig.algo = key.type + '-' + key.defaultHashAlgorithm();\n\tif (SIGN_ALGS[sig.algo] === undefined)\n\t\treturn (false);\n\n\tvar der = new asn1.BerWriter();\n\twriteTBSCert(cert, der);\n\tvar blob = der.buffer;\n\tsig.cache = blob;\n\n\tvar signer = key.createSign();\n\tsigner.write(blob);\n\tcert.signatures.x509.signature = signer.sign();\n\n\treturn (true);\n}\n\nfunction signAsync(cert, signer, done) {\n\tif (cert.signatures.x509 === undefined)\n\t\tcert.signatures.x509 = {};\n\tvar sig = cert.signatures.x509;\n\n\tvar der = new asn1.BerWriter();\n\twriteTBSCert(cert, der);\n\tvar blob = der.buffer;\n\tsig.cache = blob;\n\n\tsigner(blob, function (err, signature) {\n\t\tif (err) {\n\t\t\tdone(err);\n\t\t\treturn;\n\t\t}\n\t\tsig.algo = signature.type + '-' + signature.hashAlgorithm;\n\t\tif (SIGN_ALGS[sig.algo] === undefined) {\n\t\t\tdone(new Error('Invalid signing algorithm \"' +\n\t\t\t    sig.algo + '\"'));\n\t\t\treturn;\n\t\t}\n\t\tsig.signature = signature;\n\t\tdone();\n\t});\n}\n\nfunction write(cert, options) {\n\tvar sig = cert.signatures.x509;\n\tassert.object(sig, 'x509 signature');\n\n\tvar der = new asn1.BerWriter();\n\tder.startSequence();\n\tif (sig.cache) {\n\t\tder._ensure(sig.cache.length);\n\t\tsig.cache.copy(der._buf, der._offset);\n\t\tder._offset += sig.cache.length;\n\t} else {\n\t\twriteTBSCert(cert, der);\n\t}\n\n\tder.startSequence();\n\tder.writeOID(SIGN_ALGS[sig.algo]);\n\tif (sig.algo.match(/^rsa-/))\n\t\tder.writeNull();\n\tder.endSequence();\n\n\tvar sigData = sig.signature.toBuffer('asn1');\n\tvar data = Buffer.alloc(sigData.length + 1);\n\tdata[0] = 0;\n\tsigData.copy(data, 1);\n\tder.writeBuffer(data, asn1.Ber.BitString);\n\tder.endSequence();\n\n\treturn (der.buffer);\n}\n\nfunction writeTBSCert(cert, der) {\n\tvar sig = cert.signatures.x509;\n\tassert.object(sig, 'x509 signature');\n\n\tder.startSequence();\n\n\tder.startSequence(Local(0));\n\tder.writeInt(2);\n\tder.endSequence();\n\n\tder.writeBuffer(utils.mpNormalize(cert.serial), asn1.Ber.Integer);\n\n\tder.startSequence();\n\tder.writeOID(SIGN_ALGS[sig.algo]);\n\tif (sig.algo.match(/^rsa-/))\n\t\tder.writeNull();\n\tder.endSequence();\n\n\tcert.issuer.toAsn1(der);\n\n\tder.startSequence();\n\twriteDate(der, cert.validFrom);\n\twriteDate(der, cert.validUntil);\n\tder.endSequence();\n\n\tvar subject = cert.subjects[0];\n\tvar altNames = cert.subjects.slice(1);\n\tsubject.toAsn1(der);\n\n\tpkcs8.writePkcs8(der, cert.subjectKey);\n\n\tif (sig.extras && sig.extras.issuerUniqueID) {\n\t\tder.writeBuffer(sig.extras.issuerUniqueID, Local(1));\n\t}\n\n\tif (sig.extras && sig.extras.subjectUniqueID) {\n\t\tder.writeBuffer(sig.extras.subjectUniqueID, Local(2));\n\t}\n\n\tif (altNames.length > 0 || subject.type === 'host' ||\n\t    (cert.purposes !== undefined && cert.purposes.length > 0) ||\n\t    (sig.extras && sig.extras.exts)) {\n\t\tder.startSequence(Local(3));\n\t\tder.startSequence();\n\n\t\tvar exts = [];\n\t\tif (cert.purposes !== undefined && cert.purposes.length > 0) {\n\t\t\texts.push({\n\t\t\t\toid: EXTS.basicConstraints,\n\t\t\t\tcritical: true\n\t\t\t});\n\t\t\texts.push({\n\t\t\t\toid: EXTS.keyUsage,\n\t\t\t\tcritical: true\n\t\t\t});\n\t\t\texts.push({\n\t\t\t\toid: EXTS.extKeyUsage,\n\t\t\t\tcritical: true\n\t\t\t});\n\t\t}\n\t\texts.push({ oid: EXTS.altName });\n\t\tif (sig.extras && sig.extras.exts)\n\t\t\texts = sig.extras.exts;\n\n\t\tfor (var i = 0; i < exts.length; ++i) {\n\t\t\tder.startSequence();\n\t\t\tder.writeOID(exts[i].oid);\n\n\t\t\tif (exts[i].critical !== undefined)\n\t\t\t\tder.writeBoolean(exts[i].critical);\n\n\t\t\tif (exts[i].oid === EXTS.altName) {\n\t\t\t\tder.startSequence(asn1.Ber.OctetString);\n\t\t\t\tder.startSequence();\n\t\t\t\tif (subject.type === 'host') {\n\t\t\t\t\tder.writeString(subject.hostname,\n\t\t\t\t\t    Context(2));\n\t\t\t\t}\n\t\t\t\tfor (var j = 0; j < altNames.length; ++j) {\n\t\t\t\t\tif (altNames[j].type === 'host') {\n\t\t\t\t\t\tder.writeString(\n\t\t\t\t\t\t    altNames[j].hostname,\n\t\t\t\t\t\t    ALTNAME.DNSName);\n\t\t\t\t\t} else if (altNames[j].type ===\n\t\t\t\t\t    'email') {\n\t\t\t\t\t\tder.writeString(\n\t\t\t\t\t\t    altNames[j].email,\n\t\t\t\t\t\t    ALTNAME.RFC822Name);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * Encode anything else as a\n\t\t\t\t\t\t * DN style name for now.\n\t\t\t\t\t\t */\n\t\t\t\t\t\tder.startSequence(\n\t\t\t\t\t\t    ALTNAME.DirectoryName);\n\t\t\t\t\t\taltNames[j].toAsn1(der);\n\t\t\t\t\t\tder.endSequence();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tder.endSequence();\n\t\t\t\tder.endSequence();\n\t\t\t} else if (exts[i].oid === EXTS.basicConstraints) {\n\t\t\t\tder.startSequence(asn1.Ber.OctetString);\n\t\t\t\tder.startSequence();\n\t\t\t\tvar ca = (cert.purposes.indexOf('ca') !== -1);\n\t\t\t\tvar pathLen = exts[i].pathLen;\n\t\t\t\tder.writeBoolean(ca);\n\t\t\t\tif (pathLen !== undefined)\n\t\t\t\t\tder.writeInt(pathLen);\n\t\t\t\tder.endSequence();\n\t\t\t\tder.endSequence();\n\t\t\t} else if (exts[i].oid === EXTS.extKeyUsage) {\n\t\t\t\tder.startSequence(asn1.Ber.OctetString);\n\t\t\t\tder.startSequence();\n\t\t\t\tcert.purposes.forEach(function (purpose) {\n\t\t\t\t\tif (purpose === 'ca')\n\t\t\t\t\t\treturn;\n\t\t\t\t\tif (KEYUSEBITS.indexOf(purpose) !== -1)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tvar oid = purpose;\n\t\t\t\t\tif (EXTPURPOSE[purpose] !== undefined)\n\t\t\t\t\t\toid = EXTPURPOSE[purpose];\n\t\t\t\t\tder.writeOID(oid);\n\t\t\t\t});\n\t\t\t\tder.endSequence();\n\t\t\t\tder.endSequence();\n\t\t\t} else if (exts[i].oid === EXTS.keyUsage) {\n\t\t\t\tder.startSequence(asn1.Ber.OctetString);\n\t\t\t\t/*\n\t\t\t\t * If we parsed this certificate from a byte\n\t\t\t\t * stream (i.e. we didn't generate it in sshpk)\n\t\t\t\t * then we'll have a \".bits\" property on the\n\t\t\t\t * ext with the original raw byte contents.\n\t\t\t\t *\n\t\t\t\t * If we have this, use it here instead of\n\t\t\t\t * regenerating it. This guarantees we output\n\t\t\t\t * the same data we parsed, so signatures still\n\t\t\t\t * validate.\n\t\t\t\t */\n\t\t\t\tif (exts[i].bits !== undefined) {\n\t\t\t\t\tder.writeBuffer(exts[i].bits,\n\t\t\t\t\t    asn1.Ber.BitString);\n\t\t\t\t} else {\n\t\t\t\t\tvar bits = writeBitField(cert.purposes,\n\t\t\t\t\t    KEYUSEBITS);\n\t\t\t\t\tder.writeBuffer(bits,\n\t\t\t\t\t    asn1.Ber.BitString);\n\t\t\t\t}\n\t\t\t\tder.endSequence();\n\t\t\t} else {\n\t\t\t\tder.writeBuffer(exts[i].data,\n\t\t\t\t    asn1.Ber.OctetString);\n\t\t\t}\n\n\t\t\tder.endSequence();\n\t\t}\n\n\t\tder.endSequence();\n\t\tder.endSequence();\n\t}\n\n\tder.endSequence();\n}\n\n/*\n * Reads an ASN.1 BER bitfield out of the Buffer produced by doing\n * `BerReader#readString(asn1.Ber.BitString)`. That function gives us the raw\n * contents of the BitString tag, which is a count of unused bits followed by\n * the bits as a right-padded byte string.\n *\n * `bits` is the Buffer, `bitIndex` should contain an array of string names\n * for the bits in the string, ordered starting with bit #0 in the ASN.1 spec.\n *\n * Returns an array of Strings, the names of the bits that were set to 1.\n */\nfunction readBitField(bits, bitIndex) {\n\tvar bitLen = 8 * (bits.length - 1) - bits[0];\n\tvar setBits = {};\n\tfor (var i = 0; i < bitLen; ++i) {\n\t\tvar byteN = 1 + Math.floor(i / 8);\n\t\tvar bit = 7 - (i % 8);\n\t\tvar mask = 1 << bit;\n\t\tvar bitVal = ((bits[byteN] & mask) !== 0);\n\t\tvar name = bitIndex[i];\n\t\tif (bitVal && typeof (name) === 'string') {\n\t\t\tsetBits[name] = true;\n\t\t}\n\t}\n\treturn (Object.keys(setBits));\n}\n\n/*\n * `setBits` is an array of strings, containing the names for each bit that\n * sould be set to 1. `bitIndex` is same as in `readBitField()`.\n *\n * Returns a Buffer, ready to be written out with `BerWriter#writeString()`.\n */\nfunction writeBitField(setBits, bitIndex) {\n\tvar bitLen = bitIndex.length;\n\tvar blen = Math.ceil(bitLen / 8);\n\tvar unused = blen * 8 - bitLen;\n\tvar bits = Buffer.alloc(1 + blen); // zero-filled\n\tbits[0] = unused;\n\tfor (var i = 0; i < bitLen; ++i) {\n\t\tvar byteN = 1 + Math.floor(i / 8);\n\t\tvar bit = 7 - (i % 8);\n\t\tvar mask = 1 << bit;\n\t\tvar name = bitIndex[i];\n\t\tif (name === undefined)\n\t\t\tcontinue;\n\t\tvar bitVal = (setBits.indexOf(name) !== -1);\n\t\tif (bitVal) {\n\t\t\tbits[byteN] |= mask;\n\t\t}\n\t}\n\treturn (bits);\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5074, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5079, "column": 0}, "map": {"version":3,"sources":["file:///Users/monz/Code/queue/frontend/node_modules/sshpk/lib/formats/x509-pem.js"],"sourcesContent":["// Copyright 2016 Joyent, Inc.\n\nvar x509 = require('./x509');\n\nmodule.exports = {\n\tread: read,\n\tverify: x509.verify,\n\tsign: x509.sign,\n\twrite: write\n};\n\nvar assert = require('assert-plus');\nvar asn1 = require('asn1');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('../algs');\nvar utils = require('../utils');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar pem = require('./pem');\nvar Identity = require('../identity');\nvar Signature = require('../signature');\nvar Certificate = require('../certificate');\n\nfunction read(buf, options) {\n\tif (typeof (buf) !== 'string') {\n\t\tassert.buffer(buf, 'buf');\n\t\tbuf = buf.toString('ascii');\n\t}\n\n\tvar lines = buf.trim().split(/[\\r\\n]+/g);\n\n\tvar m;\n\tvar si = -1;\n\twhile (!m && si < lines.length) {\n\t\tm = lines[++si].match(/*JSSTYLED*/\n\t\t    /[-]+[ ]*BEGIN CERTIFICATE[ ]*[-]+/);\n\t}\n\tassert.ok(m, 'invalid PEM header');\n\n\tvar m2;\n\tvar ei = lines.length;\n\twhile (!m2 && ei > 0) {\n\t\tm2 = lines[--ei].match(/*JSSTYLED*/\n\t\t    /[-]+[ ]*END CERTIFICATE[ ]*[-]+/);\n\t}\n\tassert.ok(m2, 'invalid PEM footer');\n\n\tlines = lines.slice(si, ei + 1);\n\n\tvar headers = {};\n\twhile (true) {\n\t\tlines = lines.slice(1);\n\t\tm = lines[0].match(/*JSSTYLED*/\n\t\t    /^([A-Za-z0-9-]+): (.+)$/);\n\t\tif (!m)\n\t\t\tbreak;\n\t\theaders[m[1].toLowerCase()] = m[2];\n\t}\n\n\t/* Chop off the first and last lines */\n\tlines = lines.slice(0, -1).join('');\n\tbuf = Buffer.from(lines, 'base64');\n\n\treturn (x509.read(buf, options));\n}\n\nfunction write(cert, options) {\n\tvar dbuf = x509.write(cert, options);\n\n\tvar header = 'CERTIFICATE';\n\tvar tmp = dbuf.toString('base64');\n\tvar len = tmp.length + (tmp.length / 64) +\n\t    18 + 16 + header.length*2 + 10;\n\tvar buf = Buffer.alloc(len);\n\tvar o = 0;\n\to += buf.write('-----BEGIN ' + header + '-----\\n', o);\n\tfor (var i = 0; i < tmp.length; ) {\n\t\tvar limit = i + 64;\n\t\tif (limit > tmp.length)\n\t\t\tlimit = tmp.length;\n\t\to += buf.write(tmp.slice(i, limit), o);\n\t\tbuf[o++] = 10;\n\t\ti = limit;\n\t}\n\to += buf.write('-----END ' + header + '-----\\n', o);\n\n\treturn (buf.slice(0, o));\n}\n"],"names":[],"mappings":"AAAA,8BAA8B;AAE9B,IAAI;AAEJ,OAAO,OAAO,GAAG;IAChB,MAAM;IACN,QAAQ,KAAK,MAAM;IACnB,MAAM,KAAK,IAAI;IACf,OAAO;AACR;AAEA,IAAI;AACJ,IAAI;AACJ,IAAI,SAAS,+FAAwB,MAAM;AAC3C,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AAEJ,SAAS,KAAK,GAAG,EAAE,OAAO;IACzB,IAAI,OAAQ,QAAS,UAAU;QAC9B,OAAO,MAAM,CAAC,KAAK;QACnB,MAAM,IAAI,QAAQ,CAAC;IACpB;IAEA,IAAI,QAAQ,IAAI,IAAI,GAAG,KAAK,CAAC;IAE7B,IAAI;IACJ,IAAI,KAAK,CAAC;IACV,MAAO,CAAC,KAAK,KAAK,MAAM,MAAM,CAAE;QAC/B,IAAI,KAAK,CAAC,EAAE,GAAG,CAAC,KAAK,CAAC,UAAU,GAC5B;IACL;IACA,OAAO,EAAE,CAAC,GAAG;IAEb,IAAI;IACJ,IAAI,KAAK,MAAM,MAAM;IACrB,MAAO,CAAC,MAAM,KAAK,EAAG;QACrB,KAAK,KAAK,CAAC,EAAE,GAAG,CAAC,KAAK,CAAC,UAAU,GAC7B;IACL;IACA,OAAO,EAAE,CAAC,IAAI;IAEd,QAAQ,MAAM,KAAK,CAAC,IAAI,KAAK;IAE7B,IAAI,UAAU,CAAC;IACf,MAAO,KAAM;QACZ,QAAQ,MAAM,KAAK,CAAC;QACpB,IAAI,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,UAAU,GACzB;QACJ,IAAI,CAAC,GACJ;QACD,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,WAAW,GAAG,GAAG,CAAC,CAAC,EAAE;IACnC;IAEA,qCAAqC,GACrC,QAAQ,MAAM,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;IAChC,MAAM,OAAO,IAAI,CAAC,OAAO;IAEzB,OAAQ,KAAK,IAAI,CAAC,KAAK;AACxB;AAEA,SAAS,MAAM,IAAI,EAAE,OAAO;IAC3B,IAAI,OAAO,KAAK,KAAK,CAAC,MAAM;IAE5B,IAAI,SAAS;IACb,IAAI,MAAM,KAAK,QAAQ,CAAC;IACxB,IAAI,MAAM,IAAI,MAAM,GAAI,IAAI,MAAM,GAAG,KACjC,KAAK,KAAK,OAAO,MAAM,GAAC,IAAI;IAChC,IAAI,MAAM,OAAO,KAAK,CAAC;IACvB,IAAI,IAAI;IACR,KAAK,IAAI,KAAK,CAAC,gBAAgB,SAAS,WAAW;IACnD,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,MAAM,EAAI;QACjC,IAAI,QAAQ,IAAI;QAChB,IAAI,QAAQ,IAAI,MAAM,EACrB,QAAQ,IAAI,MAAM;QACnB,KAAK,IAAI,KAAK,CAAC,IAAI,KAAK,CAAC,GAAG,QAAQ;QACpC,GAAG,CAAC,IAAI,GAAG;QACX,IAAI;IACL;IACA,KAAK,IAAI,KAAK,CAAC,cAAc,SAAS,WAAW;IAEjD,OAAQ,IAAI,KAAK,CAAC,GAAG;AACtB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5146, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5151, "column": 0}, "map": {"version":3,"sources":["file:///Users/monz/Code/queue/frontend/node_modules/sshpk/lib/certificate.js"],"sourcesContent":["// Copyright 2016 Joyent, Inc.\n\nmodule.exports = Certificate;\n\nvar assert = require('assert-plus');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('./algs');\nvar crypto = require('crypto');\nvar Fingerprint = require('./fingerprint');\nvar Signature = require('./signature');\nvar errs = require('./errors');\nvar util = require('util');\nvar utils = require('./utils');\nvar Key = require('./key');\nvar PrivateKey = require('./private-key');\nvar Identity = require('./identity');\n\nvar formats = {};\nformats['openssh'] = require('./formats/openssh-cert');\nformats['x509'] = require('./formats/x509');\nformats['pem'] = require('./formats/x509-pem');\n\nvar CertificateParseError = errs.CertificateParseError;\nvar InvalidAlgorithmError = errs.InvalidAlgorithmError;\n\nfunction Certificate(opts) {\n\tassert.object(opts, 'options');\n\tassert.arrayOfObject(opts.subjects, 'options.subjects');\n\tutils.assertCompatible(opts.subjects[0], Identity, [1, 0],\n\t    'options.subjects');\n\tutils.assertCompatible(opts.subjectKey, Key, [1, 0],\n\t    'options.subjectKey');\n\tutils.assertCompatible(opts.issuer, Identity, [1, 0], 'options.issuer');\n\tif (opts.issuerKey !== undefined) {\n\t\tutils.assertCompatible(opts.issuerKey, Key, [1, 0],\n\t\t    'options.issuerKey');\n\t}\n\tassert.object(opts.signatures, 'options.signatures');\n\tassert.buffer(opts.serial, 'options.serial');\n\tassert.date(opts.validFrom, 'options.validFrom');\n\tassert.date(opts.validUntil, 'optons.validUntil');\n\n\tassert.optionalArrayOfString(opts.purposes, 'options.purposes');\n\n\tthis._hashCache = {};\n\n\tthis.subjects = opts.subjects;\n\tthis.issuer = opts.issuer;\n\tthis.subjectKey = opts.subjectKey;\n\tthis.issuerKey = opts.issuerKey;\n\tthis.signatures = opts.signatures;\n\tthis.serial = opts.serial;\n\tthis.validFrom = opts.validFrom;\n\tthis.validUntil = opts.validUntil;\n\tthis.purposes = opts.purposes;\n}\n\nCertificate.formats = formats;\n\nCertificate.prototype.toBuffer = function (format, options) {\n\tif (format === undefined)\n\t\tformat = 'x509';\n\tassert.string(format, 'format');\n\tassert.object(formats[format], 'formats[format]');\n\tassert.optionalObject(options, 'options');\n\n\treturn (formats[format].write(this, options));\n};\n\nCertificate.prototype.toString = function (format, options) {\n\tif (format === undefined)\n\t\tformat = 'pem';\n\treturn (this.toBuffer(format, options).toString());\n};\n\nCertificate.prototype.fingerprint = function (algo) {\n\tif (algo === undefined)\n\t\talgo = 'sha256';\n\tassert.string(algo, 'algorithm');\n\tvar opts = {\n\t\ttype: 'certificate',\n\t\thash: this.hash(algo),\n\t\talgorithm: algo\n\t};\n\treturn (new Fingerprint(opts));\n};\n\nCertificate.prototype.hash = function (algo) {\n\tassert.string(algo, 'algorithm');\n\talgo = algo.toLowerCase();\n\tif (algs.hashAlgs[algo] === undefined)\n\t\tthrow (new InvalidAlgorithmError(algo));\n\n\tif (this._hashCache[algo])\n\t\treturn (this._hashCache[algo]);\n\n\tvar hash = crypto.createHash(algo).\n\t    update(this.toBuffer('x509')).digest();\n\tthis._hashCache[algo] = hash;\n\treturn (hash);\n};\n\nCertificate.prototype.isExpired = function (when) {\n\tif (when === undefined)\n\t\twhen = new Date();\n\treturn (!((when.getTime() >= this.validFrom.getTime()) &&\n\t\t(when.getTime() < this.validUntil.getTime())));\n};\n\nCertificate.prototype.isSignedBy = function (issuerCert) {\n\tutils.assertCompatible(issuerCert, Certificate, [1, 0], 'issuer');\n\n\tif (!this.issuer.equals(issuerCert.subjects[0]))\n\t\treturn (false);\n\tif (this.issuer.purposes && this.issuer.purposes.length > 0 &&\n\t    this.issuer.purposes.indexOf('ca') === -1) {\n\t\treturn (false);\n\t}\n\n\treturn (this.isSignedByKey(issuerCert.subjectKey));\n};\n\nCertificate.prototype.getExtension = function (keyOrOid) {\n\tassert.string(keyOrOid, 'keyOrOid');\n\tvar ext = this.getExtensions().filter(function (maybeExt) {\n\t\tif (maybeExt.format === 'x509')\n\t\t\treturn (maybeExt.oid === keyOrOid);\n\t\tif (maybeExt.format === 'openssh')\n\t\t\treturn (maybeExt.name === keyOrOid);\n\t\treturn (false);\n\t})[0];\n\treturn (ext);\n};\n\nCertificate.prototype.getExtensions = function () {\n\tvar exts = [];\n\tvar x509 = this.signatures.x509;\n\tif (x509 && x509.extras && x509.extras.exts) {\n\t\tx509.extras.exts.forEach(function (ext) {\n\t\t\text.format = 'x509';\n\t\t\texts.push(ext);\n\t\t});\n\t}\n\tvar openssh = this.signatures.openssh;\n\tif (openssh && openssh.exts) {\n\t\topenssh.exts.forEach(function (ext) {\n\t\t\text.format = 'openssh';\n\t\t\texts.push(ext);\n\t\t});\n\t}\n\treturn (exts);\n};\n\nCertificate.prototype.isSignedByKey = function (issuerKey) {\n\tutils.assertCompatible(issuerKey, Key, [1, 2], 'issuerKey');\n\n\tif (this.issuerKey !== undefined) {\n\t\treturn (this.issuerKey.\n\t\t    fingerprint('sha512').matches(issuerKey));\n\t}\n\n\tvar fmt = Object.keys(this.signatures)[0];\n\tvar valid = formats[fmt].verify(this, issuerKey);\n\tif (valid)\n\t\tthis.issuerKey = issuerKey;\n\treturn (valid);\n};\n\nCertificate.prototype.signWith = function (key) {\n\tutils.assertCompatible(key, PrivateKey, [1, 2], 'key');\n\tvar fmts = Object.keys(formats);\n\tvar didOne = false;\n\tfor (var i = 0; i < fmts.length; ++i) {\n\t\tif (fmts[i] !== 'pem') {\n\t\t\tvar ret = formats[fmts[i]].sign(this, key);\n\t\t\tif (ret === true)\n\t\t\t\tdidOne = true;\n\t\t}\n\t}\n\tif (!didOne) {\n\t\tthrow (new Error('Failed to sign the certificate for any ' +\n\t\t    'available certificate formats'));\n\t}\n};\n\nCertificate.createSelfSigned = function (subjectOrSubjects, key, options) {\n\tvar subjects;\n\tif (Array.isArray(subjectOrSubjects))\n\t\tsubjects = subjectOrSubjects;\n\telse\n\t\tsubjects = [subjectOrSubjects];\n\n\tassert.arrayOfObject(subjects);\n\tsubjects.forEach(function (subject) {\n\t\tutils.assertCompatible(subject, Identity, [1, 0], 'subject');\n\t});\n\n\tutils.assertCompatible(key, PrivateKey, [1, 2], 'private key');\n\n\tassert.optionalObject(options, 'options');\n\tif (options === undefined)\n\t\toptions = {};\n\tassert.optionalObject(options.validFrom, 'options.validFrom');\n\tassert.optionalObject(options.validUntil, 'options.validUntil');\n\tvar validFrom = options.validFrom;\n\tvar validUntil = options.validUntil;\n\tif (validFrom === undefined)\n\t\tvalidFrom = new Date();\n\tif (validUntil === undefined) {\n\t\tassert.optionalNumber(options.lifetime, 'options.lifetime');\n\t\tvar lifetime = options.lifetime;\n\t\tif (lifetime === undefined)\n\t\t\tlifetime = 10*365*24*3600;\n\t\tvalidUntil = new Date();\n\t\tvalidUntil.setTime(validUntil.getTime() + lifetime*1000);\n\t}\n\tassert.optionalBuffer(options.serial, 'options.serial');\n\tvar serial = options.serial;\n\tif (serial === undefined)\n\t\tserial = Buffer.from('0000000000000001', 'hex');\n\n\tvar purposes = options.purposes;\n\tif (purposes === undefined)\n\t\tpurposes = [];\n\n\tif (purposes.indexOf('signature') === -1)\n\t\tpurposes.push('signature');\n\n\t/* Self-signed certs are always CAs. */\n\tif (purposes.indexOf('ca') === -1)\n\t\tpurposes.push('ca');\n\tif (purposes.indexOf('crl') === -1)\n\t\tpurposes.push('crl');\n\n\t/*\n\t * If we weren't explicitly given any other purposes, do the sensible\n\t * thing and add some basic ones depending on the subject type.\n\t */\n\tif (purposes.length <= 3) {\n\t\tvar hostSubjects = subjects.filter(function (subject) {\n\t\t\treturn (subject.type === 'host');\n\t\t});\n\t\tvar userSubjects = subjects.filter(function (subject) {\n\t\t\treturn (subject.type === 'user');\n\t\t});\n\t\tif (hostSubjects.length > 0) {\n\t\t\tif (purposes.indexOf('serverAuth') === -1)\n\t\t\t\tpurposes.push('serverAuth');\n\t\t}\n\t\tif (userSubjects.length > 0) {\n\t\t\tif (purposes.indexOf('clientAuth') === -1)\n\t\t\t\tpurposes.push('clientAuth');\n\t\t}\n\t\tif (userSubjects.length > 0 || hostSubjects.length > 0) {\n\t\t\tif (purposes.indexOf('keyAgreement') === -1)\n\t\t\t\tpurposes.push('keyAgreement');\n\t\t\tif (key.type === 'rsa' &&\n\t\t\t    purposes.indexOf('encryption') === -1)\n\t\t\t\tpurposes.push('encryption');\n\t\t}\n\t}\n\n\tvar cert = new Certificate({\n\t\tsubjects: subjects,\n\t\tissuer: subjects[0],\n\t\tsubjectKey: key.toPublic(),\n\t\tissuerKey: key.toPublic(),\n\t\tsignatures: {},\n\t\tserial: serial,\n\t\tvalidFrom: validFrom,\n\t\tvalidUntil: validUntil,\n\t\tpurposes: purposes\n\t});\n\tcert.signWith(key);\n\n\treturn (cert);\n};\n\nCertificate.create =\n    function (subjectOrSubjects, key, issuer, issuerKey, options) {\n\tvar subjects;\n\tif (Array.isArray(subjectOrSubjects))\n\t\tsubjects = subjectOrSubjects;\n\telse\n\t\tsubjects = [subjectOrSubjects];\n\n\tassert.arrayOfObject(subjects);\n\tsubjects.forEach(function (subject) {\n\t\tutils.assertCompatible(subject, Identity, [1, 0], 'subject');\n\t});\n\n\tutils.assertCompatible(key, Key, [1, 0], 'key');\n\tif (PrivateKey.isPrivateKey(key))\n\t\tkey = key.toPublic();\n\tutils.assertCompatible(issuer, Identity, [1, 0], 'issuer');\n\tutils.assertCompatible(issuerKey, PrivateKey, [1, 2], 'issuer key');\n\n\tassert.optionalObject(options, 'options');\n\tif (options === undefined)\n\t\toptions = {};\n\tassert.optionalObject(options.validFrom, 'options.validFrom');\n\tassert.optionalObject(options.validUntil, 'options.validUntil');\n\tvar validFrom = options.validFrom;\n\tvar validUntil = options.validUntil;\n\tif (validFrom === undefined)\n\t\tvalidFrom = new Date();\n\tif (validUntil === undefined) {\n\t\tassert.optionalNumber(options.lifetime, 'options.lifetime');\n\t\tvar lifetime = options.lifetime;\n\t\tif (lifetime === undefined)\n\t\t\tlifetime = 10*365*24*3600;\n\t\tvalidUntil = new Date();\n\t\tvalidUntil.setTime(validUntil.getTime() + lifetime*1000);\n\t}\n\tassert.optionalBuffer(options.serial, 'options.serial');\n\tvar serial = options.serial;\n\tif (serial === undefined)\n\t\tserial = Buffer.from('0000000000000001', 'hex');\n\n\tvar purposes = options.purposes;\n\tif (purposes === undefined)\n\t\tpurposes = [];\n\n\tif (purposes.indexOf('signature') === -1)\n\t\tpurposes.push('signature');\n\n\tif (options.ca === true) {\n\t\tif (purposes.indexOf('ca') === -1)\n\t\t\tpurposes.push('ca');\n\t\tif (purposes.indexOf('crl') === -1)\n\t\t\tpurposes.push('crl');\n\t}\n\n\tvar hostSubjects = subjects.filter(function (subject) {\n\t\treturn (subject.type === 'host');\n\t});\n\tvar userSubjects = subjects.filter(function (subject) {\n\t\treturn (subject.type === 'user');\n\t});\n\tif (hostSubjects.length > 0) {\n\t\tif (purposes.indexOf('serverAuth') === -1)\n\t\t\tpurposes.push('serverAuth');\n\t}\n\tif (userSubjects.length > 0) {\n\t\tif (purposes.indexOf('clientAuth') === -1)\n\t\t\tpurposes.push('clientAuth');\n\t}\n\tif (userSubjects.length > 0 || hostSubjects.length > 0) {\n\t\tif (purposes.indexOf('keyAgreement') === -1)\n\t\t\tpurposes.push('keyAgreement');\n\t\tif (key.type === 'rsa' &&\n\t\t    purposes.indexOf('encryption') === -1)\n\t\t\tpurposes.push('encryption');\n\t}\n\n\tvar cert = new Certificate({\n\t\tsubjects: subjects,\n\t\tissuer: issuer,\n\t\tsubjectKey: key,\n\t\tissuerKey: issuerKey.toPublic(),\n\t\tsignatures: {},\n\t\tserial: serial,\n\t\tvalidFrom: validFrom,\n\t\tvalidUntil: validUntil,\n\t\tpurposes: purposes\n\t});\n\tcert.signWith(issuerKey);\n\n\treturn (cert);\n};\n\nCertificate.parse = function (data, format, options) {\n\tif (typeof (data) !== 'string')\n\t\tassert.buffer(data, 'data');\n\tif (format === undefined)\n\t\tformat = 'auto';\n\tassert.string(format, 'format');\n\tif (typeof (options) === 'string')\n\t\toptions = { filename: options };\n\tassert.optionalObject(options, 'options');\n\tif (options === undefined)\n\t\toptions = {};\n\tassert.optionalString(options.filename, 'options.filename');\n\tif (options.filename === undefined)\n\t\toptions.filename = '(unnamed)';\n\n\tassert.object(formats[format], 'formats[format]');\n\n\ttry {\n\t\tvar k = formats[format].read(data, options);\n\t\treturn (k);\n\t} catch (e) {\n\t\tthrow (new CertificateParseError(options.filename, format, e));\n\t}\n};\n\nCertificate.isCertificate = function (obj, ver) {\n\treturn (utils.isCompatible(obj, Certificate, ver));\n};\n\n/*\n * API versions for Certificate:\n * [1,0] -- initial ver\n * [1,1] -- openssh format now unpacks extensions\n */\nCertificate.prototype._sshpkApiVersion = [1, 1];\n\nCertificate._oldVersionDetect = function (obj) {\n\treturn ([1, 0]);\n};\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5501, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5506, "column": 0}, "map": {"version":3,"sources":["file:///Users/monz/Code/queue/frontend/node_modules/sshpk/lib/fingerprint.js"],"sourcesContent":["// Copyright 2018 Joyent, Inc.\n\nmodule.exports = Fingerprint;\n\nvar assert = require('assert-plus');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('./algs');\nvar crypto = require('crypto');\nvar errs = require('./errors');\nvar Key = require('./key');\nvar PrivateKey = require('./private-key');\nvar Certificate = require('./certificate');\nvar utils = require('./utils');\n\nvar FingerprintFormatError = errs.FingerprintFormatError;\nvar InvalidAlgorithmError = errs.InvalidAlgorithmError;\n\nfunction Fingerprint(opts) {\n\tassert.object(opts, 'options');\n\tassert.string(opts.type, 'options.type');\n\tassert.buffer(opts.hash, 'options.hash');\n\tassert.string(opts.algorithm, 'options.algorithm');\n\n\tthis.algorithm = opts.algorithm.toLowerCase();\n\tif (algs.hashAlgs[this.algorithm] !== true)\n\t\tthrow (new InvalidAlgorithmError(this.algorithm));\n\n\tthis.hash = opts.hash;\n\tthis.type = opts.type;\n\tthis.hashType = opts.hashType;\n}\n\nFingerprint.prototype.toString = function (format) {\n\tif (format === undefined) {\n\t\tif (this.algorithm === 'md5' || this.hashType === 'spki')\n\t\t\tformat = 'hex';\n\t\telse\n\t\t\tformat = 'base64';\n\t}\n\tassert.string(format);\n\n\tswitch (format) {\n\tcase 'hex':\n\t\tif (this.hashType === 'spki')\n\t\t\treturn (this.hash.toString('hex'));\n\t\treturn (addColons(this.hash.toString('hex')));\n\tcase 'base64':\n\t\tif (this.hashType === 'spki')\n\t\t\treturn (this.hash.toString('base64'));\n\t\treturn (sshBase64Format(this.algorithm,\n\t\t    this.hash.toString('base64')));\n\tdefault:\n\t\tthrow (new FingerprintFormatError(undefined, format));\n\t}\n};\n\nFingerprint.prototype.matches = function (other) {\n\tassert.object(other, 'key or certificate');\n\tif (this.type === 'key' && this.hashType !== 'ssh') {\n\t\tutils.assertCompatible(other, Key, [1, 7], 'key with spki');\n\t\tif (PrivateKey.isPrivateKey(other)) {\n\t\t\tutils.assertCompatible(other, PrivateKey, [1, 6],\n\t\t\t    'privatekey with spki support');\n\t\t}\n\t} else if (this.type === 'key') {\n\t\tutils.assertCompatible(other, Key, [1, 0], 'key');\n\t} else {\n\t\tutils.assertCompatible(other, Certificate, [1, 0],\n\t\t    'certificate');\n\t}\n\n\tvar theirHash = other.hash(this.algorithm, this.hashType);\n\tvar theirHash2 = crypto.createHash(this.algorithm).\n\t    update(theirHash).digest('base64');\n\n\tif (this.hash2 === undefined)\n\t\tthis.hash2 = crypto.createHash(this.algorithm).\n\t\t    update(this.hash).digest('base64');\n\n\treturn (this.hash2 === theirHash2);\n};\n\n/*JSSTYLED*/\nvar base64RE = /^[A-Za-z0-9+\\/=]+$/;\n/*JSSTYLED*/\nvar hexRE = /^[a-fA-F0-9]+$/;\n\nFingerprint.parse = function (fp, options) {\n\tassert.string(fp, 'fingerprint');\n\n\tvar alg, hash, enAlgs;\n\tif (Array.isArray(options)) {\n\t\tenAlgs = options;\n\t\toptions = {};\n\t}\n\tassert.optionalObject(options, 'options');\n\tif (options === undefined)\n\t\toptions = {};\n\tif (options.enAlgs !== undefined)\n\t\tenAlgs = options.enAlgs;\n\tif (options.algorithms !== undefined)\n\t\tenAlgs = options.algorithms;\n\tassert.optionalArrayOfString(enAlgs, 'algorithms');\n\n\tvar hashType = 'ssh';\n\tif (options.hashType !== undefined)\n\t\thashType = options.hashType;\n\tassert.string(hashType, 'options.hashType');\n\n\tvar parts = fp.split(':');\n\tif (parts.length == 2) {\n\t\talg = parts[0].toLowerCase();\n\t\tif (!base64RE.test(parts[1]))\n\t\t\tthrow (new FingerprintFormatError(fp));\n\t\ttry {\n\t\t\thash = Buffer.from(parts[1], 'base64');\n\t\t} catch (e) {\n\t\t\tthrow (new FingerprintFormatError(fp));\n\t\t}\n\t} else if (parts.length > 2) {\n\t\talg = 'md5';\n\t\tif (parts[0].toLowerCase() === 'md5')\n\t\t\tparts = parts.slice(1);\n\t\tparts = parts.map(function (p) {\n\t\t\twhile (p.length < 2)\n\t\t\t\tp = '0' + p;\n\t\t\tif (p.length > 2)\n\t\t\t\tthrow (new FingerprintFormatError(fp));\n\t\t\treturn (p);\n\t\t});\n\t\tparts = parts.join('');\n\t\tif (!hexRE.test(parts) || parts.length % 2 !== 0)\n\t\t\tthrow (new FingerprintFormatError(fp));\n\t\ttry {\n\t\t\thash = Buffer.from(parts, 'hex');\n\t\t} catch (e) {\n\t\t\tthrow (new FingerprintFormatError(fp));\n\t\t}\n\t} else {\n\t\tif (hexRE.test(fp)) {\n\t\t\thash = Buffer.from(fp, 'hex');\n\t\t} else if (base64RE.test(fp)) {\n\t\t\thash = Buffer.from(fp, 'base64');\n\t\t} else {\n\t\t\tthrow (new FingerprintFormatError(fp));\n\t\t}\n\n\t\tswitch (hash.length) {\n\t\tcase 32:\n\t\t\talg = 'sha256';\n\t\t\tbreak;\n\t\tcase 16:\n\t\t\talg = 'md5';\n\t\t\tbreak;\n\t\tcase 20:\n\t\t\talg = 'sha1';\n\t\t\tbreak;\n\t\tcase 64:\n\t\t\talg = 'sha512';\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow (new FingerprintFormatError(fp));\n\t\t}\n\n\t\t/* Plain hex/base64: guess it's probably SPKI unless told. */\n\t\tif (options.hashType === undefined)\n\t\t\thashType = 'spki';\n\t}\n\n\tif (alg === undefined)\n\t\tthrow (new FingerprintFormatError(fp));\n\n\tif (algs.hashAlgs[alg] === undefined)\n\t\tthrow (new InvalidAlgorithmError(alg));\n\n\tif (enAlgs !== undefined) {\n\t\tenAlgs = enAlgs.map(function (a) { return a.toLowerCase(); });\n\t\tif (enAlgs.indexOf(alg) === -1)\n\t\t\tthrow (new InvalidAlgorithmError(alg));\n\t}\n\n\treturn (new Fingerprint({\n\t\talgorithm: alg,\n\t\thash: hash,\n\t\ttype: options.type || 'key',\n\t\thashType: hashType\n\t}));\n};\n\nfunction addColons(s) {\n\t/*JSSTYLED*/\n\treturn (s.replace(/(.{2})(?=.)/g, '$1:'));\n}\n\nfunction base64Strip(s) {\n\t/*JSSTYLED*/\n\treturn (s.replace(/=*$/, ''));\n}\n\nfunction sshBase64Format(alg, h) {\n\treturn (alg.toUpperCase() + ':' + base64Strip(h));\n}\n\nFingerprint.isFingerprint = function (obj, ver) {\n\treturn (utils.isCompatible(obj, Fingerprint, ver));\n};\n\n/*\n * API versions for Fingerprint:\n * [1,0] -- initial ver\n * [1,1] -- first tagged ver\n * [1,2] -- hashType and spki support\n */\nFingerprint.prototype._sshpkApiVersion = [1, 2];\n\nFingerprint._oldVersionDetect = function (obj) {\n\tassert.func(obj.toString);\n\tassert.func(obj.matches);\n\treturn ([1, 0]);\n};\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5687, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5692, "column": 0}, "map": {"version":3,"sources":["file:///Users/monz/Code/queue/frontend/node_modules/sshpk/lib/key.js"],"sourcesContent":["// Copyright 2018 Joyent, Inc.\n\nmodule.exports = Key;\n\nvar assert = require('assert-plus');\nvar algs = require('./algs');\nvar crypto = require('crypto');\nvar Fingerprint = require('./fingerprint');\nvar Signature = require('./signature');\nvar DiffieHellman = require('./dhe').DiffieHellman;\nvar errs = require('./errors');\nvar utils = require('./utils');\nvar PrivateKey = require('./private-key');\nvar edCompat;\n\ntry {\n\tedCompat = require('./ed-compat');\n} catch (e) {\n\t/* Just continue through, and bail out if we try to use it. */\n}\n\nvar InvalidAlgorithmError = errs.InvalidAlgorithmError;\nvar KeyParseError = errs.KeyParseError;\n\nvar formats = {};\nformats['auto'] = require('./formats/auto');\nformats['pem'] = require('./formats/pem');\nformats['pkcs1'] = require('./formats/pkcs1');\nformats['pkcs8'] = require('./formats/pkcs8');\nformats['rfc4253'] = require('./formats/rfc4253');\nformats['ssh'] = require('./formats/ssh');\nformats['ssh-private'] = require('./formats/ssh-private');\nformats['openssh'] = formats['ssh-private'];\nformats['dnssec'] = require('./formats/dnssec');\nformats['putty'] = require('./formats/putty');\nformats['ppk'] = formats['putty'];\n\nfunction Key(opts) {\n\tassert.object(opts, 'options');\n\tassert.arrayOfObject(opts.parts, 'options.parts');\n\tassert.string(opts.type, 'options.type');\n\tassert.optionalString(opts.comment, 'options.comment');\n\n\tvar algInfo = algs.info[opts.type];\n\tif (typeof (algInfo) !== 'object')\n\t\tthrow (new InvalidAlgorithmError(opts.type));\n\n\tvar partLookup = {};\n\tfor (var i = 0; i < opts.parts.length; ++i) {\n\t\tvar part = opts.parts[i];\n\t\tpartLookup[part.name] = part;\n\t}\n\n\tthis.type = opts.type;\n\tthis.parts = opts.parts;\n\tthis.part = partLookup;\n\tthis.comment = undefined;\n\tthis.source = opts.source;\n\n\t/* for speeding up hashing/fingerprint operations */\n\tthis._rfc4253Cache = opts._rfc4253Cache;\n\tthis._hashCache = {};\n\n\tvar sz;\n\tthis.curve = undefined;\n\tif (this.type === 'ecdsa') {\n\t\tvar curve = this.part.curve.data.toString();\n\t\tthis.curve = curve;\n\t\tsz = algs.curves[curve].size;\n\t} else if (this.type === 'ed25519' || this.type === 'curve25519') {\n\t\tsz = 256;\n\t\tthis.curve = 'curve25519';\n\t} else {\n\t\tvar szPart = this.part[algInfo.sizePart];\n\t\tsz = szPart.data.length;\n\t\tsz = sz * 8 - utils.countZeros(szPart.data);\n\t}\n\tthis.size = sz;\n}\n\nKey.formats = formats;\n\nKey.prototype.toBuffer = function (format, options) {\n\tif (format === undefined)\n\t\tformat = 'ssh';\n\tassert.string(format, 'format');\n\tassert.object(formats[format], 'formats[format]');\n\tassert.optionalObject(options, 'options');\n\n\tif (format === 'rfc4253') {\n\t\tif (this._rfc4253Cache === undefined)\n\t\t\tthis._rfc4253Cache = formats['rfc4253'].write(this);\n\t\treturn (this._rfc4253Cache);\n\t}\n\n\treturn (formats[format].write(this, options));\n};\n\nKey.prototype.toString = function (format, options) {\n\treturn (this.toBuffer(format, options).toString());\n};\n\nKey.prototype.hash = function (algo, type) {\n\tassert.string(algo, 'algorithm');\n\tassert.optionalString(type, 'type');\n\tif (type === undefined)\n\t\ttype = 'ssh';\n\talgo = algo.toLowerCase();\n\tif (algs.hashAlgs[algo] === undefined)\n\t\tthrow (new InvalidAlgorithmError(algo));\n\n\tvar cacheKey = algo + '||' + type;\n\tif (this._hashCache[cacheKey])\n\t\treturn (this._hashCache[cacheKey]);\n\n\tvar buf;\n\tif (type === 'ssh') {\n\t\tbuf = this.toBuffer('rfc4253');\n\t} else if (type === 'spki') {\n\t\tbuf = formats.pkcs8.pkcs8ToBuffer(this);\n\t} else {\n\t\tthrow (new Error('Hash type ' + type + ' not supported'));\n\t}\n\tvar hash = crypto.createHash(algo).update(buf).digest();\n\tthis._hashCache[cacheKey] = hash;\n\treturn (hash);\n};\n\nKey.prototype.fingerprint = function (algo, type) {\n\tif (algo === undefined)\n\t\talgo = 'sha256';\n\tif (type === undefined)\n\t\ttype = 'ssh';\n\tassert.string(algo, 'algorithm');\n\tassert.string(type, 'type');\n\tvar opts = {\n\t\ttype: 'key',\n\t\thash: this.hash(algo, type),\n\t\talgorithm: algo,\n\t\thashType: type\n\t};\n\treturn (new Fingerprint(opts));\n};\n\nKey.prototype.defaultHashAlgorithm = function () {\n\tvar hashAlgo = 'sha1';\n\tif (this.type === 'rsa')\n\t\thashAlgo = 'sha256';\n\tif (this.type === 'dsa' && this.size > 1024)\n\t\thashAlgo = 'sha256';\n\tif (this.type === 'ed25519')\n\t\thashAlgo = 'sha512';\n\tif (this.type === 'ecdsa') {\n\t\tif (this.size <= 256)\n\t\t\thashAlgo = 'sha256';\n\t\telse if (this.size <= 384)\n\t\t\thashAlgo = 'sha384';\n\t\telse\n\t\t\thashAlgo = 'sha512';\n\t}\n\treturn (hashAlgo);\n};\n\nKey.prototype.createVerify = function (hashAlgo) {\n\tif (hashAlgo === undefined)\n\t\thashAlgo = this.defaultHashAlgorithm();\n\tassert.string(hashAlgo, 'hash algorithm');\n\n\t/* ED25519 is not supported by OpenSSL, use a javascript impl. */\n\tif (this.type === 'ed25519' && edCompat !== undefined)\n\t\treturn (new edCompat.Verifier(this, hashAlgo));\n\tif (this.type === 'curve25519')\n\t\tthrow (new Error('Curve25519 keys are not suitable for ' +\n\t\t    'signing or verification'));\n\n\tvar v, nm, err;\n\ttry {\n\t\tnm = hashAlgo.toUpperCase();\n\t\tv = crypto.createVerify(nm);\n\t} catch (e) {\n\t\terr = e;\n\t}\n\tif (v === undefined || (err instanceof Error &&\n\t    err.message.match(/Unknown message digest/))) {\n\t\tnm = 'RSA-';\n\t\tnm += hashAlgo.toUpperCase();\n\t\tv = crypto.createVerify(nm);\n\t}\n\tassert.ok(v, 'failed to create verifier');\n\tvar oldVerify = v.verify.bind(v);\n\tvar key = this.toBuffer('pkcs8');\n\tvar curve = this.curve;\n\tvar self = this;\n\tv.verify = function (signature, fmt) {\n\t\tif (Signature.isSignature(signature, [2, 0])) {\n\t\t\tif (signature.type !== self.type)\n\t\t\t\treturn (false);\n\t\t\tif (signature.hashAlgorithm &&\n\t\t\t    signature.hashAlgorithm !== hashAlgo)\n\t\t\t\treturn (false);\n\t\t\tif (signature.curve && self.type === 'ecdsa' &&\n\t\t\t    signature.curve !== curve)\n\t\t\t\treturn (false);\n\t\t\treturn (oldVerify(key, signature.toBuffer('asn1')));\n\n\t\t} else if (typeof (signature) === 'string' ||\n\t\t    Buffer.isBuffer(signature)) {\n\t\t\treturn (oldVerify(key, signature, fmt));\n\n\t\t/*\n\t\t * Avoid doing this on valid arguments, walking the prototype\n\t\t * chain can be quite slow.\n\t\t */\n\t\t} else if (Signature.isSignature(signature, [1, 0])) {\n\t\t\tthrow (new Error('signature was created by too old ' +\n\t\t\t    'a version of sshpk and cannot be verified'));\n\n\t\t} else {\n\t\t\tthrow (new TypeError('signature must be a string, ' +\n\t\t\t    'Buffer, or Signature object'));\n\t\t}\n\t};\n\treturn (v);\n};\n\nKey.prototype.createDiffieHellman = function () {\n\tif (this.type === 'rsa')\n\t\tthrow (new Error('RSA keys do not support Diffie-Hellman'));\n\n\treturn (new DiffieHellman(this));\n};\nKey.prototype.createDH = Key.prototype.createDiffieHellman;\n\nKey.parse = function (data, format, options) {\n\tif (typeof (data) !== 'string')\n\t\tassert.buffer(data, 'data');\n\tif (format === undefined)\n\t\tformat = 'auto';\n\tassert.string(format, 'format');\n\tif (typeof (options) === 'string')\n\t\toptions = { filename: options };\n\tassert.optionalObject(options, 'options');\n\tif (options === undefined)\n\t\toptions = {};\n\tassert.optionalString(options.filename, 'options.filename');\n\tif (options.filename === undefined)\n\t\toptions.filename = '(unnamed)';\n\n\tassert.object(formats[format], 'formats[format]');\n\n\ttry {\n\t\tvar k = formats[format].read(data, options);\n\t\tif (k instanceof PrivateKey)\n\t\t\tk = k.toPublic();\n\t\tif (!k.comment)\n\t\t\tk.comment = options.filename;\n\t\treturn (k);\n\t} catch (e) {\n\t\tif (e.name === 'KeyEncryptedError')\n\t\t\tthrow (e);\n\t\tthrow (new KeyParseError(options.filename, format, e));\n\t}\n};\n\nKey.isKey = function (obj, ver) {\n\treturn (utils.isCompatible(obj, Key, ver));\n};\n\n/*\n * API versions for Key:\n * [1,0] -- initial ver, may take Signature for createVerify or may not\n * [1,1] -- added pkcs1, pkcs8 formats\n * [1,2] -- added auto, ssh-private, openssh formats\n * [1,3] -- added defaultHashAlgorithm\n * [1,4] -- added ed support, createDH\n * [1,5] -- first explicitly tagged version\n * [1,6] -- changed ed25519 part names\n * [1,7] -- spki hash types\n */\nKey.prototype._sshpkApiVersion = [1, 7];\n\nKey._oldVersionDetect = function (obj) {\n\tassert.func(obj.toBuffer);\n\tassert.func(obj.fingerprint);\n\tif (obj.createDH)\n\t\treturn ([1, 4]);\n\tif (obj.defaultHashAlgorithm)\n\t\treturn ([1, 3]);\n\tif (obj.formats['auto'])\n\t\treturn ([1, 2]);\n\tif (obj.formats['pkcs1'])\n\t\treturn ([1, 1]);\n\treturn ([1, 0]);\n};\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5932, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5937, "column": 0}, "map": {"version":3,"sources":["file:///Users/monz/Code/queue/frontend/node_modules/sshpk/lib/index.js"],"sourcesContent":["// Copyright 2015 Joyent, Inc.\n\nvar Key = require('./key');\nvar Fingerprint = require('./fingerprint');\nvar Signature = require('./signature');\nvar PrivateKey = require('./private-key');\nvar Certificate = require('./certificate');\nvar Identity = require('./identity');\nvar errs = require('./errors');\n\nmodule.exports = {\n\t/* top-level classes */\n\tKey: Key,\n\tparseKey: Key.parse,\n\tFingerprint: Fingerprint,\n\tparseFingerprint: Fingerprint.parse,\n\tSignature: Signature,\n\tparseSignature: Signature.parse,\n\tPrivateKey: PrivateKey,\n\tparsePrivateKey: PrivateKey.parse,\n\tgeneratePrivateKey: PrivateKey.generate,\n\tCertificate: Certificate,\n\tparseCertificate: Certificate.parse,\n\tcreateSelfSignedCertificate: Certificate.createSelfSigned,\n\tcreateCertificate: Certificate.create,\n\tIdentity: Identity,\n\tidentityFromDN: Identity.parseDN,\n\tidentityForHost: Identity.forHost,\n\tidentityForUser: Identity.forUser,\n\tidentityForEmail: Identity.forEmail,\n\tidentityFromArray: Identity.fromArray,\n\n\t/* errors */\n\tFingerprintFormatError: errs.FingerprintFormatError,\n\tInvalidAlgorithmError: errs.InvalidAlgorithmError,\n\tKeyParseError: errs.KeyParseError,\n\tSignatureParseError: errs.SignatureParseError,\n\tKeyEncryptedError: errs.KeyEncryptedError,\n\tCertificateParseError: errs.CertificateParseError\n};\n"],"names":[],"mappings":"AAAA,8BAA8B;AAE9B,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AAEJ,OAAO,OAAO,GAAG;IAChB,qBAAqB,GACrB,KAAK;IACL,UAAU,IAAI,KAAK;IACnB,aAAa;IACb,kBAAkB,YAAY,KAAK;IACnC,WAAW;IACX,gBAAgB,UAAU,KAAK;IAC/B,YAAY;IACZ,iBAAiB,WAAW,KAAK;IACjC,oBAAoB,WAAW,QAAQ;IACvC,aAAa;IACb,kBAAkB,YAAY,KAAK;IACnC,6BAA6B,YAAY,gBAAgB;IACzD,mBAAmB,YAAY,MAAM;IACrC,UAAU;IACV,gBAAgB,SAAS,OAAO;IAChC,iBAAiB,SAAS,OAAO;IACjC,iBAAiB,SAAS,OAAO;IACjC,kBAAkB,SAAS,QAAQ;IACnC,mBAAmB,SAAS,SAAS;IAErC,UAAU,GACV,wBAAwB,KAAK,sBAAsB;IACnD,uBAAuB,KAAK,qBAAqB;IACjD,eAAe,KAAK,aAAa;IACjC,qBAAqB,KAAK,mBAAmB;IAC7C,mBAAmB,KAAK,iBAAiB;IACzC,uBAAuB,KAAK,qBAAqB;AAClD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5972, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}